
(function() {
'use strict';

function F2(fun)
{
  function wrapper(a) { return function(b) { return fun(a,b); }; }
  wrapper.arity = 2;
  wrapper.func = fun;
  return wrapper;
}

function F3(fun)
{
  function wrapper(a) {
    return function(b) { return function(c) { return fun(a, b, c); }; };
  }
  wrapper.arity = 3;
  wrapper.func = fun;
  return wrapper;
}

function F4(fun)
{
  function wrapper(a) { return function(b) { return function(c) {
    return function(d) { return fun(a, b, c, d); }; }; };
  }
  wrapper.arity = 4;
  wrapper.func = fun;
  return wrapper;
}

function F5(fun)
{
  function wrapper(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return fun(a, b, c, d, e); }; }; }; };
  }
  wrapper.arity = 5;
  wrapper.func = fun;
  return wrapper;
}

function F6(fun)
{
  function wrapper(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return fun(a, b, c, d, e, f); }; }; }; }; };
  }
  wrapper.arity = 6;
  wrapper.func = fun;
  return wrapper;
}

function F7(fun)
{
  function wrapper(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return fun(a, b, c, d, e, f, g); }; }; }; }; }; };
  }
  wrapper.arity = 7;
  wrapper.func = fun;
  return wrapper;
}

function F8(fun)
{
  function wrapper(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return function(h) {
    return fun(a, b, c, d, e, f, g, h); }; }; }; }; }; }; };
  }
  wrapper.arity = 8;
  wrapper.func = fun;
  return wrapper;
}

function F9(fun)
{
  function wrapper(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return function(h) { return function(i) {
    return fun(a, b, c, d, e, f, g, h, i); }; }; }; }; }; }; }; };
  }
  wrapper.arity = 9;
  wrapper.func = fun;
  return wrapper;
}

function A2(fun, a, b)
{
  return fun.arity === 2
    ? fun.func(a, b)
    : fun(a)(b);
}
function A3(fun, a, b, c)
{
  return fun.arity === 3
    ? fun.func(a, b, c)
    : fun(a)(b)(c);
}
function A4(fun, a, b, c, d)
{
  return fun.arity === 4
    ? fun.func(a, b, c, d)
    : fun(a)(b)(c)(d);
}
function A5(fun, a, b, c, d, e)
{
  return fun.arity === 5
    ? fun.func(a, b, c, d, e)
    : fun(a)(b)(c)(d)(e);
}
function A6(fun, a, b, c, d, e, f)
{
  return fun.arity === 6
    ? fun.func(a, b, c, d, e, f)
    : fun(a)(b)(c)(d)(e)(f);
}
function A7(fun, a, b, c, d, e, f, g)
{
  return fun.arity === 7
    ? fun.func(a, b, c, d, e, f, g)
    : fun(a)(b)(c)(d)(e)(f)(g);
}
function A8(fun, a, b, c, d, e, f, g, h)
{
  return fun.arity === 8
    ? fun.func(a, b, c, d, e, f, g, h)
    : fun(a)(b)(c)(d)(e)(f)(g)(h);
}
function A9(fun, a, b, c, d, e, f, g, h, i)
{
  return fun.arity === 9
    ? fun.func(a, b, c, d, e, f, g, h, i)
    : fun(a)(b)(c)(d)(e)(f)(g)(h)(i);
}

var _elm_lang$core$Native_Bitwise = function() {

return {
	and: F2(function and(a, b) { return a & b; }),
	or: F2(function or(a, b) { return a | b; }),
	xor: F2(function xor(a, b) { return a ^ b; }),
	complement: function complement(a) { return ~a; },
	shiftLeftBy: F2(function(offset, a) { return a << offset; }),
	shiftRightBy: F2(function(offset, a) { return a >> offset; }),
	shiftRightZfBy: F2(function(offset, a) { return a >>> offset; })
};

}();

var _elm_lang$core$Bitwise$shiftRightZfBy = _elm_lang$core$Native_Bitwise.shiftRightZfBy;
var _elm_lang$core$Bitwise$shiftRightBy = _elm_lang$core$Native_Bitwise.shiftRightBy;
var _elm_lang$core$Bitwise$shiftLeftBy = _elm_lang$core$Native_Bitwise.shiftLeftBy;
var _elm_lang$core$Bitwise$complement = _elm_lang$core$Native_Bitwise.complement;
var _elm_lang$core$Bitwise$xor = _elm_lang$core$Native_Bitwise.xor;
var _elm_lang$core$Bitwise$or = _elm_lang$core$Native_Bitwise.or;
var _elm_lang$core$Bitwise$and = _elm_lang$core$Native_Bitwise.and;

//import Native.Utils //

var _elm_lang$core$Native_Char = function() {

return {
	fromCode: function(c) { return _elm_lang$core$Native_Utils.chr(String.fromCharCode(c)); },
	toCode: function(c) { return c.charCodeAt(0); },
	toUpper: function(c) { return _elm_lang$core$Native_Utils.chr(c.toUpperCase()); },
	toLower: function(c) { return _elm_lang$core$Native_Utils.chr(c.toLowerCase()); },
	toLocaleUpper: function(c) { return _elm_lang$core$Native_Utils.chr(c.toLocaleUpperCase()); },
	toLocaleLower: function(c) { return _elm_lang$core$Native_Utils.chr(c.toLocaleLowerCase()); }
};

}();
//import Native.Utils //

var _elm_lang$core$Native_Basics = function() {

function div(a, b)
{
	return (a / b) | 0;
}
function rem(a, b)
{
	return a % b;
}
function mod(a, b)
{
	if (b === 0)
	{
		throw new Error('Cannot perform mod 0. Division by zero error.');
	}
	var r = a % b;
	var m = a === 0 ? 0 : (b > 0 ? (a >= 0 ? r : r + b) : -mod(-a, -b));

	return m === b ? 0 : m;
}
function logBase(base, n)
{
	return Math.log(n) / Math.log(base);
}
function negate(n)
{
	return -n;
}
function abs(n)
{
	return n < 0 ? -n : n;
}

function min(a, b)
{
	return _elm_lang$core$Native_Utils.cmp(a, b) < 0 ? a : b;
}
function max(a, b)
{
	return _elm_lang$core$Native_Utils.cmp(a, b) > 0 ? a : b;
}
function clamp(lo, hi, n)
{
	return _elm_lang$core$Native_Utils.cmp(n, lo) < 0
		? lo
		: _elm_lang$core$Native_Utils.cmp(n, hi) > 0
			? hi
			: n;
}

var ord = ['LT', 'EQ', 'GT'];

function compare(x, y)
{
	return { ctor: ord[_elm_lang$core$Native_Utils.cmp(x, y) + 1] };
}

function xor(a, b)
{
	return a !== b;
}
function not(b)
{
	return !b;
}
function isInfinite(n)
{
	return n === Infinity || n === -Infinity;
}

function truncate(n)
{
	return n | 0;
}

function degrees(d)
{
	return d * Math.PI / 180;
}
function turns(t)
{
	return 2 * Math.PI * t;
}
function fromPolar(point)
{
	var r = point._0;
	var t = point._1;
	return _elm_lang$core$Native_Utils.Tuple2(r * Math.cos(t), r * Math.sin(t));
}
function toPolar(point)
{
	var x = point._0;
	var y = point._1;
	return _elm_lang$core$Native_Utils.Tuple2(Math.sqrt(x * x + y * y), Math.atan2(y, x));
}

return {
	div: F2(div),
	rem: F2(rem),
	mod: F2(mod),

	pi: Math.PI,
	e: Math.E,
	cos: Math.cos,
	sin: Math.sin,
	tan: Math.tan,
	acos: Math.acos,
	asin: Math.asin,
	atan: Math.atan,
	atan2: F2(Math.atan2),

	degrees: degrees,
	turns: turns,
	fromPolar: fromPolar,
	toPolar: toPolar,

	sqrt: Math.sqrt,
	logBase: F2(logBase),
	negate: negate,
	abs: abs,
	min: F2(min),
	max: F2(max),
	clamp: F3(clamp),
	compare: F2(compare),

	xor: F2(xor),
	not: not,

	truncate: truncate,
	ceiling: Math.ceil,
	floor: Math.floor,
	round: Math.round,
	toFloat: function(x) { return x; },
	isNaN: isNaN,
	isInfinite: isInfinite
};

}();
//import //

var _elm_lang$core$Native_Utils = function() {

// COMPARISONS

function eq(x, y)
{
	var stack = [];
	var isEqual = eqHelp(x, y, 0, stack);
	var pair;
	while (isEqual && (pair = stack.pop()))
	{
		isEqual = eqHelp(pair.x, pair.y, 0, stack);
	}
	return isEqual;
}


function eqHelp(x, y, depth, stack)
{
	if (depth > 100)
	{
		stack.push({ x: x, y: y });
		return true;
	}

	if (x === y)
	{
		return true;
	}

	if (typeof x !== 'object')
	{
		if (typeof x === 'function')
		{
			throw new Error(
				'Trying to use `(==)` on functions. There is no way to know if functions are "the same" in the Elm sense.'
				+ ' Read more about this at http://package.elm-lang.org/packages/elm-lang/core/latest/Basics#=='
				+ ' which describes why it is this way and what the better version will look like.'
			);
		}
		return false;
	}

	if (x === null || y === null)
	{
		return false
	}

	if (x instanceof Date)
	{
		return x.getTime() === y.getTime();
	}

	if (!('ctor' in x))
	{
		for (var key in x)
		{
			if (!eqHelp(x[key], y[key], depth + 1, stack))
			{
				return false;
			}
		}
		return true;
	}

	// convert Dicts and Sets to lists
	if (x.ctor === 'RBNode_elm_builtin' || x.ctor === 'RBEmpty_elm_builtin')
	{
		x = _elm_lang$core$Dict$toList(x);
		y = _elm_lang$core$Dict$toList(y);
	}
	if (x.ctor === 'Set_elm_builtin')
	{
		x = _elm_lang$core$Set$toList(x);
		y = _elm_lang$core$Set$toList(y);
	}

	// check if lists are equal without recursion
	if (x.ctor === '::')
	{
		var a = x;
		var b = y;
		while (a.ctor === '::' && b.ctor === '::')
		{
			if (!eqHelp(a._0, b._0, depth + 1, stack))
			{
				return false;
			}
			a = a._1;
			b = b._1;
		}
		return a.ctor === b.ctor;
	}

	// check if Arrays are equal
	if (x.ctor === '_Array')
	{
		var xs = _elm_lang$core$Native_Array.toJSArray(x);
		var ys = _elm_lang$core$Native_Array.toJSArray(y);
		if (xs.length !== ys.length)
		{
			return false;
		}
		for (var i = 0; i < xs.length; i++)
		{
			if (!eqHelp(xs[i], ys[i], depth + 1, stack))
			{
				return false;
			}
		}
		return true;
	}

	if (!eqHelp(x.ctor, y.ctor, depth + 1, stack))
	{
		return false;
	}

	for (var key in x)
	{
		if (!eqHelp(x[key], y[key], depth + 1, stack))
		{
			return false;
		}
	}
	return true;
}

// Code in Generate/JavaScript.hs, Basics.js, and List.js depends on
// the particular integer values assigned to LT, EQ, and GT.

var LT = -1, EQ = 0, GT = 1;

function cmp(x, y)
{
	if (typeof x !== 'object')
	{
		return x === y ? EQ : x < y ? LT : GT;
	}

	if (x instanceof String)
	{
		var a = x.valueOf();
		var b = y.valueOf();
		return a === b ? EQ : a < b ? LT : GT;
	}

	if (x.ctor === '::' || x.ctor === '[]')
	{
		while (x.ctor === '::' && y.ctor === '::')
		{
			var ord = cmp(x._0, y._0);
			if (ord !== EQ)
			{
				return ord;
			}
			x = x._1;
			y = y._1;
		}
		return x.ctor === y.ctor ? EQ : x.ctor === '[]' ? LT : GT;
	}

	if (x.ctor.slice(0, 6) === '_Tuple')
	{
		var ord;
		var n = x.ctor.slice(6) - 0;
		var err = 'cannot compare tuples with more than 6 elements.';
		if (n === 0) return EQ;
		if (n >= 1) { ord = cmp(x._0, y._0); if (ord !== EQ) return ord;
		if (n >= 2) { ord = cmp(x._1, y._1); if (ord !== EQ) return ord;
		if (n >= 3) { ord = cmp(x._2, y._2); if (ord !== EQ) return ord;
		if (n >= 4) { ord = cmp(x._3, y._3); if (ord !== EQ) return ord;
		if (n >= 5) { ord = cmp(x._4, y._4); if (ord !== EQ) return ord;
		if (n >= 6) { ord = cmp(x._5, y._5); if (ord !== EQ) return ord;
		if (n >= 7) throw new Error('Comparison error: ' + err); } } } } } }
		return EQ;
	}

	throw new Error(
		'Comparison error: comparison is only defined on ints, '
		+ 'floats, times, chars, strings, lists of comparable values, '
		+ 'and tuples of comparable values.'
	);
}


// COMMON VALUES

var Tuple0 = {
	ctor: '_Tuple0'
};

function Tuple2(x, y)
{
	return {
		ctor: '_Tuple2',
		_0: x,
		_1: y
	};
}

function chr(c)
{
	return new String(c);
}


// GUID

var count = 0;
function guid(_)
{
	return count++;
}


// RECORDS

function update(oldRecord, updatedFields)
{
	var newRecord = {};

	for (var key in oldRecord)
	{
		newRecord[key] = oldRecord[key];
	}

	for (var key in updatedFields)
	{
		newRecord[key] = updatedFields[key];
	}

	return newRecord;
}


//// LIST STUFF ////

var Nil = { ctor: '[]' };

function Cons(hd, tl)
{
	return {
		ctor: '::',
		_0: hd,
		_1: tl
	};
}

function append(xs, ys)
{
	// append Strings
	if (typeof xs === 'string')
	{
		return xs + ys;
	}

	// append Lists
	if (xs.ctor === '[]')
	{
		return ys;
	}
	var root = Cons(xs._0, Nil);
	var curr = root;
	xs = xs._1;
	while (xs.ctor !== '[]')
	{
		curr._1 = Cons(xs._0, Nil);
		xs = xs._1;
		curr = curr._1;
	}
	curr._1 = ys;
	return root;
}


// CRASHES

function crash(moduleName, region)
{
	return function(message) {
		throw new Error(
			'Ran into a `Debug.crash` in module `' + moduleName + '` ' + regionToString(region) + '\n'
			+ 'The message provided by the code author is:\n\n    '
			+ message
		);
	};
}

function crashCase(moduleName, region, value)
{
	return function(message) {
		throw new Error(
			'Ran into a `Debug.crash` in module `' + moduleName + '`\n\n'
			+ 'This was caused by the `case` expression ' + regionToString(region) + '.\n'
			+ 'One of the branches ended with a crash and the following value got through:\n\n    ' + toString(value) + '\n\n'
			+ 'The message provided by the code author is:\n\n    '
			+ message
		);
	};
}

function regionToString(region)
{
	if (region.start.line == region.end.line)
	{
		return 'on line ' + region.start.line;
	}
	return 'between lines ' + region.start.line + ' and ' + region.end.line;
}


// TO STRING

function toString(v)
{
	var type = typeof v;
	if (type === 'function')
	{
		return '<function>';
	}

	if (type === 'boolean')
	{
		return v ? 'True' : 'False';
	}

	if (type === 'number')
	{
		return v + '';
	}

	if (v instanceof String)
	{
		return '\'' + addSlashes(v, true) + '\'';
	}

	if (type === 'string')
	{
		return '"' + addSlashes(v, false) + '"';
	}

	if (v === null)
	{
		return 'null';
	}

	if (type === 'object' && 'ctor' in v)
	{
		var ctorStarter = v.ctor.substring(0, 5);

		if (ctorStarter === '_Tupl')
		{
			var output = [];
			for (var k in v)
			{
				if (k === 'ctor') continue;
				output.push(toString(v[k]));
			}
			return '(' + output.join(',') + ')';
		}

		if (ctorStarter === '_Task')
		{
			return '<task>'
		}

		if (v.ctor === '_Array')
		{
			var list = _elm_lang$core$Array$toList(v);
			return 'Array.fromList ' + toString(list);
		}

		if (v.ctor === '<decoder>')
		{
			return '<decoder>';
		}

		if (v.ctor === '_Process')
		{
			return '<process:' + v.id + '>';
		}

		if (v.ctor === '::')
		{
			var output = '[' + toString(v._0);
			v = v._1;
			while (v.ctor === '::')
			{
				output += ',' + toString(v._0);
				v = v._1;
			}
			return output + ']';
		}

		if (v.ctor === '[]')
		{
			return '[]';
		}

		if (v.ctor === 'Set_elm_builtin')
		{
			return 'Set.fromList ' + toString(_elm_lang$core$Set$toList(v));
		}

		if (v.ctor === 'RBNode_elm_builtin' || v.ctor === 'RBEmpty_elm_builtin')
		{
			return 'Dict.fromList ' + toString(_elm_lang$core$Dict$toList(v));
		}

		var output = '';
		for (var i in v)
		{
			if (i === 'ctor') continue;
			var str = toString(v[i]);
			var c0 = str[0];
			var parenless = c0 === '{' || c0 === '(' || c0 === '<' || c0 === '"' || str.indexOf(' ') < 0;
			output += ' ' + (parenless ? str : '(' + str + ')');
		}
		return v.ctor + output;
	}

	if (type === 'object')
	{
		if (v instanceof Date)
		{
			return '<' + v.toString() + '>';
		}

		if (v.elm_web_socket)
		{
			return '<websocket>';
		}

		var output = [];
		for (var k in v)
		{
			output.push(k + ' = ' + toString(v[k]));
		}
		if (output.length === 0)
		{
			return '{}';
		}
		return '{ ' + output.join(', ') + ' }';
	}

	return '<internal structure>';
}

function addSlashes(str, isChar)
{
	var s = str.replace(/\\/g, '\\\\')
			  .replace(/\n/g, '\\n')
			  .replace(/\t/g, '\\t')
			  .replace(/\r/g, '\\r')
			  .replace(/\v/g, '\\v')
			  .replace(/\0/g, '\\0');
	if (isChar)
	{
		return s.replace(/\'/g, '\\\'');
	}
	else
	{
		return s.replace(/\"/g, '\\"');
	}
}


return {
	eq: eq,
	cmp: cmp,
	Tuple0: Tuple0,
	Tuple2: Tuple2,
	chr: chr,
	update: update,
	guid: guid,

	append: F2(append),

	crash: crash,
	crashCase: crashCase,

	toString: toString
};

}();
var _elm_lang$core$Basics$never = function (_p0) {
	never:
	while (true) {
		var _p1 = _p0;
		var _v1 = _p1._0;
		_p0 = _v1;
		continue never;
	}
};
var _elm_lang$core$Basics$uncurry = F2(
	function (f, _p2) {
		var _p3 = _p2;
		return A2(f, _p3._0, _p3._1);
	});
var _elm_lang$core$Basics$curry = F3(
	function (f, a, b) {
		return f(
			{ctor: '_Tuple2', _0: a, _1: b});
	});
var _elm_lang$core$Basics$flip = F3(
	function (f, b, a) {
		return A2(f, a, b);
	});
var _elm_lang$core$Basics$always = F2(
	function (a, _p4) {
		return a;
	});
var _elm_lang$core$Basics$identity = function (x) {
	return x;
};
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['<|'] = F2(
	function (f, x) {
		return f(x);
	});
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['|>'] = F2(
	function (x, f) {
		return f(x);
	});
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['>>'] = F3(
	function (f, g, x) {
		return g(
			f(x));
	});
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['<<'] = F3(
	function (g, f, x) {
		return g(
			f(x));
	});
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['++'] = _elm_lang$core$Native_Utils.append;
var _elm_lang$core$Basics$toString = _elm_lang$core$Native_Utils.toString;
var _elm_lang$core$Basics$isInfinite = _elm_lang$core$Native_Basics.isInfinite;
var _elm_lang$core$Basics$isNaN = _elm_lang$core$Native_Basics.isNaN;
var _elm_lang$core$Basics$toFloat = _elm_lang$core$Native_Basics.toFloat;
var _elm_lang$core$Basics$ceiling = _elm_lang$core$Native_Basics.ceiling;
var _elm_lang$core$Basics$floor = _elm_lang$core$Native_Basics.floor;
var _elm_lang$core$Basics$truncate = _elm_lang$core$Native_Basics.truncate;
var _elm_lang$core$Basics$round = _elm_lang$core$Native_Basics.round;
var _elm_lang$core$Basics$not = _elm_lang$core$Native_Basics.not;
var _elm_lang$core$Basics$xor = _elm_lang$core$Native_Basics.xor;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['||'] = _elm_lang$core$Native_Basics.or;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['&&'] = _elm_lang$core$Native_Basics.and;
var _elm_lang$core$Basics$max = _elm_lang$core$Native_Basics.max;
var _elm_lang$core$Basics$min = _elm_lang$core$Native_Basics.min;
var _elm_lang$core$Basics$compare = _elm_lang$core$Native_Basics.compare;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['>='] = _elm_lang$core$Native_Basics.ge;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['<='] = _elm_lang$core$Native_Basics.le;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['>'] = _elm_lang$core$Native_Basics.gt;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['<'] = _elm_lang$core$Native_Basics.lt;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['/='] = _elm_lang$core$Native_Basics.neq;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['=='] = _elm_lang$core$Native_Basics.eq;
var _elm_lang$core$Basics$e = _elm_lang$core$Native_Basics.e;
var _elm_lang$core$Basics$pi = _elm_lang$core$Native_Basics.pi;
var _elm_lang$core$Basics$clamp = _elm_lang$core$Native_Basics.clamp;
var _elm_lang$core$Basics$logBase = _elm_lang$core$Native_Basics.logBase;
var _elm_lang$core$Basics$abs = _elm_lang$core$Native_Basics.abs;
var _elm_lang$core$Basics$negate = _elm_lang$core$Native_Basics.negate;
var _elm_lang$core$Basics$sqrt = _elm_lang$core$Native_Basics.sqrt;
var _elm_lang$core$Basics$atan2 = _elm_lang$core$Native_Basics.atan2;
var _elm_lang$core$Basics$atan = _elm_lang$core$Native_Basics.atan;
var _elm_lang$core$Basics$asin = _elm_lang$core$Native_Basics.asin;
var _elm_lang$core$Basics$acos = _elm_lang$core$Native_Basics.acos;
var _elm_lang$core$Basics$tan = _elm_lang$core$Native_Basics.tan;
var _elm_lang$core$Basics$sin = _elm_lang$core$Native_Basics.sin;
var _elm_lang$core$Basics$cos = _elm_lang$core$Native_Basics.cos;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['^'] = _elm_lang$core$Native_Basics.exp;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['%'] = _elm_lang$core$Native_Basics.mod;
var _elm_lang$core$Basics$rem = _elm_lang$core$Native_Basics.rem;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['//'] = _elm_lang$core$Native_Basics.div;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['/'] = _elm_lang$core$Native_Basics.floatDiv;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['*'] = _elm_lang$core$Native_Basics.mul;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['-'] = _elm_lang$core$Native_Basics.sub;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['+'] = _elm_lang$core$Native_Basics.add;
var _elm_lang$core$Basics$toPolar = _elm_lang$core$Native_Basics.toPolar;
var _elm_lang$core$Basics$fromPolar = _elm_lang$core$Native_Basics.fromPolar;
var _elm_lang$core$Basics$turns = _elm_lang$core$Native_Basics.turns;
var _elm_lang$core$Basics$degrees = _elm_lang$core$Native_Basics.degrees;
var _elm_lang$core$Basics$radians = function (t) {
	return t;
};
var _elm_lang$core$Basics$GT = {ctor: 'GT'};
var _elm_lang$core$Basics$EQ = {ctor: 'EQ'};
var _elm_lang$core$Basics$LT = {ctor: 'LT'};
var _elm_lang$core$Basics$JustOneMore = function (a) {
	return {ctor: 'JustOneMore', _0: a};
};

var _elm_lang$core$Char$fromCode = _elm_lang$core$Native_Char.fromCode;
var _elm_lang$core$Char$toCode = _elm_lang$core$Native_Char.toCode;
var _elm_lang$core$Char$toLocaleLower = _elm_lang$core$Native_Char.toLocaleLower;
var _elm_lang$core$Char$toLocaleUpper = _elm_lang$core$Native_Char.toLocaleUpper;
var _elm_lang$core$Char$toLower = _elm_lang$core$Native_Char.toLower;
var _elm_lang$core$Char$toUpper = _elm_lang$core$Native_Char.toUpper;
var _elm_lang$core$Char$isBetween = F3(
	function (low, high, $char) {
		var code = _elm_lang$core$Char$toCode($char);
		return (_elm_lang$core$Native_Utils.cmp(
			code,
			_elm_lang$core$Char$toCode(low)) > -1) && (_elm_lang$core$Native_Utils.cmp(
			code,
			_elm_lang$core$Char$toCode(high)) < 1);
	});
var _elm_lang$core$Char$isUpper = A2(
	_elm_lang$core$Char$isBetween,
	_elm_lang$core$Native_Utils.chr('A'),
	_elm_lang$core$Native_Utils.chr('Z'));
var _elm_lang$core$Char$isLower = A2(
	_elm_lang$core$Char$isBetween,
	_elm_lang$core$Native_Utils.chr('a'),
	_elm_lang$core$Native_Utils.chr('z'));
var _elm_lang$core$Char$isDigit = A2(
	_elm_lang$core$Char$isBetween,
	_elm_lang$core$Native_Utils.chr('0'),
	_elm_lang$core$Native_Utils.chr('9'));
var _elm_lang$core$Char$isOctDigit = A2(
	_elm_lang$core$Char$isBetween,
	_elm_lang$core$Native_Utils.chr('0'),
	_elm_lang$core$Native_Utils.chr('7'));
var _elm_lang$core$Char$isHexDigit = function ($char) {
	return _elm_lang$core$Char$isDigit($char) || (A3(
		_elm_lang$core$Char$isBetween,
		_elm_lang$core$Native_Utils.chr('a'),
		_elm_lang$core$Native_Utils.chr('f'),
		$char) || A3(
		_elm_lang$core$Char$isBetween,
		_elm_lang$core$Native_Utils.chr('A'),
		_elm_lang$core$Native_Utils.chr('F'),
		$char));
};

//import Native.Utils //

var _elm_lang$core$Native_Debug = function() {

function log(tag, value)
{
	var msg = tag + ': ' + _elm_lang$core$Native_Utils.toString(value);
	var process = process || {};
	if (process.stdout)
	{
		process.stdout.write(msg);
	}
	else
	{
		console.log(msg);
	}
	return value;
}

function crash(message)
{
	throw new Error(message);
}

return {
	crash: crash,
	log: F2(log)
};

}();
var _elm_lang$core$Debug$crash = _elm_lang$core$Native_Debug.crash;
var _elm_lang$core$Debug$log = _elm_lang$core$Native_Debug.log;

var _elm_lang$core$Maybe$withDefault = F2(
	function ($default, maybe) {
		var _p0 = maybe;
		if (_p0.ctor === 'Just') {
			return _p0._0;
		} else {
			return $default;
		}
	});
var _elm_lang$core$Maybe$Nothing = {ctor: 'Nothing'};
var _elm_lang$core$Maybe$andThen = F2(
	function (callback, maybeValue) {
		var _p1 = maybeValue;
		if (_p1.ctor === 'Just') {
			return callback(_p1._0);
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _elm_lang$core$Maybe$Just = function (a) {
	return {ctor: 'Just', _0: a};
};
var _elm_lang$core$Maybe$map = F2(
	function (f, maybe) {
		var _p2 = maybe;
		if (_p2.ctor === 'Just') {
			return _elm_lang$core$Maybe$Just(
				f(_p2._0));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _elm_lang$core$Maybe$map2 = F3(
	function (func, ma, mb) {
		var _p3 = {ctor: '_Tuple2', _0: ma, _1: mb};
		if (((_p3.ctor === '_Tuple2') && (_p3._0.ctor === 'Just')) && (_p3._1.ctor === 'Just')) {
			return _elm_lang$core$Maybe$Just(
				A2(func, _p3._0._0, _p3._1._0));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _elm_lang$core$Maybe$map3 = F4(
	function (func, ma, mb, mc) {
		var _p4 = {ctor: '_Tuple3', _0: ma, _1: mb, _2: mc};
		if ((((_p4.ctor === '_Tuple3') && (_p4._0.ctor === 'Just')) && (_p4._1.ctor === 'Just')) && (_p4._2.ctor === 'Just')) {
			return _elm_lang$core$Maybe$Just(
				A3(func, _p4._0._0, _p4._1._0, _p4._2._0));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _elm_lang$core$Maybe$map4 = F5(
	function (func, ma, mb, mc, md) {
		var _p5 = {ctor: '_Tuple4', _0: ma, _1: mb, _2: mc, _3: md};
		if (((((_p5.ctor === '_Tuple4') && (_p5._0.ctor === 'Just')) && (_p5._1.ctor === 'Just')) && (_p5._2.ctor === 'Just')) && (_p5._3.ctor === 'Just')) {
			return _elm_lang$core$Maybe$Just(
				A4(func, _p5._0._0, _p5._1._0, _p5._2._0, _p5._3._0));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _elm_lang$core$Maybe$map5 = F6(
	function (func, ma, mb, mc, md, me) {
		var _p6 = {ctor: '_Tuple5', _0: ma, _1: mb, _2: mc, _3: md, _4: me};
		if ((((((_p6.ctor === '_Tuple5') && (_p6._0.ctor === 'Just')) && (_p6._1.ctor === 'Just')) && (_p6._2.ctor === 'Just')) && (_p6._3.ctor === 'Just')) && (_p6._4.ctor === 'Just')) {
			return _elm_lang$core$Maybe$Just(
				A5(func, _p6._0._0, _p6._1._0, _p6._2._0, _p6._3._0, _p6._4._0));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});

//import Native.Utils //

var _elm_lang$core$Native_List = function() {

var Nil = { ctor: '[]' };

function Cons(hd, tl)
{
	return { ctor: '::', _0: hd, _1: tl };
}

function fromArray(arr)
{
	var out = Nil;
	for (var i = arr.length; i--; )
	{
		out = Cons(arr[i], out);
	}
	return out;
}

function toArray(xs)
{
	var out = [];
	while (xs.ctor !== '[]')
	{
		out.push(xs._0);
		xs = xs._1;
	}
	return out;
}

function foldr(f, b, xs)
{
	var arr = toArray(xs);
	var acc = b;
	for (var i = arr.length; i--; )
	{
		acc = A2(f, arr[i], acc);
	}
	return acc;
}

function map2(f, xs, ys)
{
	var arr = [];
	while (xs.ctor !== '[]' && ys.ctor !== '[]')
	{
		arr.push(A2(f, xs._0, ys._0));
		xs = xs._1;
		ys = ys._1;
	}
	return fromArray(arr);
}

function map3(f, xs, ys, zs)
{
	var arr = [];
	while (xs.ctor !== '[]' && ys.ctor !== '[]' && zs.ctor !== '[]')
	{
		arr.push(A3(f, xs._0, ys._0, zs._0));
		xs = xs._1;
		ys = ys._1;
		zs = zs._1;
	}
	return fromArray(arr);
}

function map4(f, ws, xs, ys, zs)
{
	var arr = [];
	while (   ws.ctor !== '[]'
		   && xs.ctor !== '[]'
		   && ys.ctor !== '[]'
		   && zs.ctor !== '[]')
	{
		arr.push(A4(f, ws._0, xs._0, ys._0, zs._0));
		ws = ws._1;
		xs = xs._1;
		ys = ys._1;
		zs = zs._1;
	}
	return fromArray(arr);
}

function map5(f, vs, ws, xs, ys, zs)
{
	var arr = [];
	while (   vs.ctor !== '[]'
		   && ws.ctor !== '[]'
		   && xs.ctor !== '[]'
		   && ys.ctor !== '[]'
		   && zs.ctor !== '[]')
	{
		arr.push(A5(f, vs._0, ws._0, xs._0, ys._0, zs._0));
		vs = vs._1;
		ws = ws._1;
		xs = xs._1;
		ys = ys._1;
		zs = zs._1;
	}
	return fromArray(arr);
}

function sortBy(f, xs)
{
	return fromArray(toArray(xs).sort(function(a, b) {
		return _elm_lang$core$Native_Utils.cmp(f(a), f(b));
	}));
}

function sortWith(f, xs)
{
	return fromArray(toArray(xs).sort(function(a, b) {
		var ord = f(a)(b).ctor;
		return ord === 'EQ' ? 0 : ord === 'LT' ? -1 : 1;
	}));
}

return {
	Nil: Nil,
	Cons: Cons,
	cons: F2(Cons),
	toArray: toArray,
	fromArray: fromArray,

	foldr: F3(foldr),

	map2: F3(map2),
	map3: F4(map3),
	map4: F5(map4),
	map5: F6(map5),
	sortBy: F2(sortBy),
	sortWith: F2(sortWith)
};

}();
var _elm_lang$core$List$sortWith = _elm_lang$core$Native_List.sortWith;
var _elm_lang$core$List$sortBy = _elm_lang$core$Native_List.sortBy;
var _elm_lang$core$List$sort = function (xs) {
	return A2(_elm_lang$core$List$sortBy, _elm_lang$core$Basics$identity, xs);
};
var _elm_lang$core$List$singleton = function (value) {
	return {
		ctor: '::',
		_0: value,
		_1: {ctor: '[]'}
	};
};
var _elm_lang$core$List$drop = F2(
	function (n, list) {
		drop:
		while (true) {
			if (_elm_lang$core$Native_Utils.cmp(n, 0) < 1) {
				return list;
			} else {
				var _p0 = list;
				if (_p0.ctor === '[]') {
					return list;
				} else {
					var _v1 = n - 1,
						_v2 = _p0._1;
					n = _v1;
					list = _v2;
					continue drop;
				}
			}
		}
	});
var _elm_lang$core$List$map5 = _elm_lang$core$Native_List.map5;
var _elm_lang$core$List$map4 = _elm_lang$core$Native_List.map4;
var _elm_lang$core$List$map3 = _elm_lang$core$Native_List.map3;
var _elm_lang$core$List$map2 = _elm_lang$core$Native_List.map2;
var _elm_lang$core$List$any = F2(
	function (isOkay, list) {
		any:
		while (true) {
			var _p1 = list;
			if (_p1.ctor === '[]') {
				return false;
			} else {
				if (isOkay(_p1._0)) {
					return true;
				} else {
					var _v4 = isOkay,
						_v5 = _p1._1;
					isOkay = _v4;
					list = _v5;
					continue any;
				}
			}
		}
	});
var _elm_lang$core$List$all = F2(
	function (isOkay, list) {
		return !A2(
			_elm_lang$core$List$any,
			function (_p2) {
				return !isOkay(_p2);
			},
			list);
	});
var _elm_lang$core$List$foldr = _elm_lang$core$Native_List.foldr;
var _elm_lang$core$List$foldl = F3(
	function (func, acc, list) {
		foldl:
		while (true) {
			var _p3 = list;
			if (_p3.ctor === '[]') {
				return acc;
			} else {
				var _v7 = func,
					_v8 = A2(func, _p3._0, acc),
					_v9 = _p3._1;
				func = _v7;
				acc = _v8;
				list = _v9;
				continue foldl;
			}
		}
	});
var _elm_lang$core$List$length = function (xs) {
	return A3(
		_elm_lang$core$List$foldl,
		F2(
			function (_p4, i) {
				return i + 1;
			}),
		0,
		xs);
};
var _elm_lang$core$List$sum = function (numbers) {
	return A3(
		_elm_lang$core$List$foldl,
		F2(
			function (x, y) {
				return x + y;
			}),
		0,
		numbers);
};
var _elm_lang$core$List$product = function (numbers) {
	return A3(
		_elm_lang$core$List$foldl,
		F2(
			function (x, y) {
				return x * y;
			}),
		1,
		numbers);
};
var _elm_lang$core$List$maximum = function (list) {
	var _p5 = list;
	if (_p5.ctor === '::') {
		return _elm_lang$core$Maybe$Just(
			A3(_elm_lang$core$List$foldl, _elm_lang$core$Basics$max, _p5._0, _p5._1));
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _elm_lang$core$List$minimum = function (list) {
	var _p6 = list;
	if (_p6.ctor === '::') {
		return _elm_lang$core$Maybe$Just(
			A3(_elm_lang$core$List$foldl, _elm_lang$core$Basics$min, _p6._0, _p6._1));
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _elm_lang$core$List$member = F2(
	function (x, xs) {
		return A2(
			_elm_lang$core$List$any,
			function (a) {
				return _elm_lang$core$Native_Utils.eq(a, x);
			},
			xs);
	});
var _elm_lang$core$List$isEmpty = function (xs) {
	var _p7 = xs;
	if (_p7.ctor === '[]') {
		return true;
	} else {
		return false;
	}
};
var _elm_lang$core$List$tail = function (list) {
	var _p8 = list;
	if (_p8.ctor === '::') {
		return _elm_lang$core$Maybe$Just(_p8._1);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _elm_lang$core$List$head = function (list) {
	var _p9 = list;
	if (_p9.ctor === '::') {
		return _elm_lang$core$Maybe$Just(_p9._0);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _elm_lang$core$List_ops = _elm_lang$core$List_ops || {};
_elm_lang$core$List_ops['::'] = _elm_lang$core$Native_List.cons;
var _elm_lang$core$List$map = F2(
	function (f, xs) {
		return A3(
			_elm_lang$core$List$foldr,
			F2(
				function (x, acc) {
					return {
						ctor: '::',
						_0: f(x),
						_1: acc
					};
				}),
			{ctor: '[]'},
			xs);
	});
var _elm_lang$core$List$filter = F2(
	function (pred, xs) {
		var conditionalCons = F2(
			function (front, back) {
				return pred(front) ? {ctor: '::', _0: front, _1: back} : back;
			});
		return A3(
			_elm_lang$core$List$foldr,
			conditionalCons,
			{ctor: '[]'},
			xs);
	});
var _elm_lang$core$List$maybeCons = F3(
	function (f, mx, xs) {
		var _p10 = f(mx);
		if (_p10.ctor === 'Just') {
			return {ctor: '::', _0: _p10._0, _1: xs};
		} else {
			return xs;
		}
	});
var _elm_lang$core$List$filterMap = F2(
	function (f, xs) {
		return A3(
			_elm_lang$core$List$foldr,
			_elm_lang$core$List$maybeCons(f),
			{ctor: '[]'},
			xs);
	});
var _elm_lang$core$List$reverse = function (list) {
	return A3(
		_elm_lang$core$List$foldl,
		F2(
			function (x, y) {
				return {ctor: '::', _0: x, _1: y};
			}),
		{ctor: '[]'},
		list);
};
var _elm_lang$core$List$scanl = F3(
	function (f, b, xs) {
		var scan1 = F2(
			function (x, accAcc) {
				var _p11 = accAcc;
				if (_p11.ctor === '::') {
					return {
						ctor: '::',
						_0: A2(f, x, _p11._0),
						_1: accAcc
					};
				} else {
					return {ctor: '[]'};
				}
			});
		return _elm_lang$core$List$reverse(
			A3(
				_elm_lang$core$List$foldl,
				scan1,
				{
					ctor: '::',
					_0: b,
					_1: {ctor: '[]'}
				},
				xs));
	});
var _elm_lang$core$List$append = F2(
	function (xs, ys) {
		var _p12 = ys;
		if (_p12.ctor === '[]') {
			return xs;
		} else {
			return A3(
				_elm_lang$core$List$foldr,
				F2(
					function (x, y) {
						return {ctor: '::', _0: x, _1: y};
					}),
				ys,
				xs);
		}
	});
var _elm_lang$core$List$concat = function (lists) {
	return A3(
		_elm_lang$core$List$foldr,
		_elm_lang$core$List$append,
		{ctor: '[]'},
		lists);
};
var _elm_lang$core$List$concatMap = F2(
	function (f, list) {
		return _elm_lang$core$List$concat(
			A2(_elm_lang$core$List$map, f, list));
	});
var _elm_lang$core$List$partition = F2(
	function (pred, list) {
		var step = F2(
			function (x, _p13) {
				var _p14 = _p13;
				var _p16 = _p14._0;
				var _p15 = _p14._1;
				return pred(x) ? {
					ctor: '_Tuple2',
					_0: {ctor: '::', _0: x, _1: _p16},
					_1: _p15
				} : {
					ctor: '_Tuple2',
					_0: _p16,
					_1: {ctor: '::', _0: x, _1: _p15}
				};
			});
		return A3(
			_elm_lang$core$List$foldr,
			step,
			{
				ctor: '_Tuple2',
				_0: {ctor: '[]'},
				_1: {ctor: '[]'}
			},
			list);
	});
var _elm_lang$core$List$unzip = function (pairs) {
	var step = F2(
		function (_p18, _p17) {
			var _p19 = _p18;
			var _p20 = _p17;
			return {
				ctor: '_Tuple2',
				_0: {ctor: '::', _0: _p19._0, _1: _p20._0},
				_1: {ctor: '::', _0: _p19._1, _1: _p20._1}
			};
		});
	return A3(
		_elm_lang$core$List$foldr,
		step,
		{
			ctor: '_Tuple2',
			_0: {ctor: '[]'},
			_1: {ctor: '[]'}
		},
		pairs);
};
var _elm_lang$core$List$intersperse = F2(
	function (sep, xs) {
		var _p21 = xs;
		if (_p21.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			var step = F2(
				function (x, rest) {
					return {
						ctor: '::',
						_0: sep,
						_1: {ctor: '::', _0: x, _1: rest}
					};
				});
			var spersed = A3(
				_elm_lang$core$List$foldr,
				step,
				{ctor: '[]'},
				_p21._1);
			return {ctor: '::', _0: _p21._0, _1: spersed};
		}
	});
var _elm_lang$core$List$takeReverse = F3(
	function (n, list, taken) {
		takeReverse:
		while (true) {
			if (_elm_lang$core$Native_Utils.cmp(n, 0) < 1) {
				return taken;
			} else {
				var _p22 = list;
				if (_p22.ctor === '[]') {
					return taken;
				} else {
					var _v23 = n - 1,
						_v24 = _p22._1,
						_v25 = {ctor: '::', _0: _p22._0, _1: taken};
					n = _v23;
					list = _v24;
					taken = _v25;
					continue takeReverse;
				}
			}
		}
	});
var _elm_lang$core$List$takeTailRec = F2(
	function (n, list) {
		return _elm_lang$core$List$reverse(
			A3(
				_elm_lang$core$List$takeReverse,
				n,
				list,
				{ctor: '[]'}));
	});
var _elm_lang$core$List$takeFast = F3(
	function (ctr, n, list) {
		if (_elm_lang$core$Native_Utils.cmp(n, 0) < 1) {
			return {ctor: '[]'};
		} else {
			var _p23 = {ctor: '_Tuple2', _0: n, _1: list};
			_v26_5:
			do {
				_v26_1:
				do {
					if (_p23.ctor === '_Tuple2') {
						if (_p23._1.ctor === '[]') {
							return list;
						} else {
							if (_p23._1._1.ctor === '::') {
								switch (_p23._0) {
									case 1:
										break _v26_1;
									case 2:
										return {
											ctor: '::',
											_0: _p23._1._0,
											_1: {
												ctor: '::',
												_0: _p23._1._1._0,
												_1: {ctor: '[]'}
											}
										};
									case 3:
										if (_p23._1._1._1.ctor === '::') {
											return {
												ctor: '::',
												_0: _p23._1._0,
												_1: {
													ctor: '::',
													_0: _p23._1._1._0,
													_1: {
														ctor: '::',
														_0: _p23._1._1._1._0,
														_1: {ctor: '[]'}
													}
												}
											};
										} else {
											break _v26_5;
										}
									default:
										if ((_p23._1._1._1.ctor === '::') && (_p23._1._1._1._1.ctor === '::')) {
											var _p28 = _p23._1._1._1._0;
											var _p27 = _p23._1._1._0;
											var _p26 = _p23._1._0;
											var _p25 = _p23._1._1._1._1._0;
											var _p24 = _p23._1._1._1._1._1;
											return (_elm_lang$core$Native_Utils.cmp(ctr, 1000) > 0) ? {
												ctor: '::',
												_0: _p26,
												_1: {
													ctor: '::',
													_0: _p27,
													_1: {
														ctor: '::',
														_0: _p28,
														_1: {
															ctor: '::',
															_0: _p25,
															_1: A2(_elm_lang$core$List$takeTailRec, n - 4, _p24)
														}
													}
												}
											} : {
												ctor: '::',
												_0: _p26,
												_1: {
													ctor: '::',
													_0: _p27,
													_1: {
														ctor: '::',
														_0: _p28,
														_1: {
															ctor: '::',
															_0: _p25,
															_1: A3(_elm_lang$core$List$takeFast, ctr + 1, n - 4, _p24)
														}
													}
												}
											};
										} else {
											break _v26_5;
										}
								}
							} else {
								if (_p23._0 === 1) {
									break _v26_1;
								} else {
									break _v26_5;
								}
							}
						}
					} else {
						break _v26_5;
					}
				} while(false);
				return {
					ctor: '::',
					_0: _p23._1._0,
					_1: {ctor: '[]'}
				};
			} while(false);
			return list;
		}
	});
var _elm_lang$core$List$take = F2(
	function (n, list) {
		return A3(_elm_lang$core$List$takeFast, 0, n, list);
	});
var _elm_lang$core$List$repeatHelp = F3(
	function (result, n, value) {
		repeatHelp:
		while (true) {
			if (_elm_lang$core$Native_Utils.cmp(n, 0) < 1) {
				return result;
			} else {
				var _v27 = {ctor: '::', _0: value, _1: result},
					_v28 = n - 1,
					_v29 = value;
				result = _v27;
				n = _v28;
				value = _v29;
				continue repeatHelp;
			}
		}
	});
var _elm_lang$core$List$repeat = F2(
	function (n, value) {
		return A3(
			_elm_lang$core$List$repeatHelp,
			{ctor: '[]'},
			n,
			value);
	});
var _elm_lang$core$List$rangeHelp = F3(
	function (lo, hi, list) {
		rangeHelp:
		while (true) {
			if (_elm_lang$core$Native_Utils.cmp(lo, hi) < 1) {
				var _v30 = lo,
					_v31 = hi - 1,
					_v32 = {ctor: '::', _0: hi, _1: list};
				lo = _v30;
				hi = _v31;
				list = _v32;
				continue rangeHelp;
			} else {
				return list;
			}
		}
	});
var _elm_lang$core$List$range = F2(
	function (lo, hi) {
		return A3(
			_elm_lang$core$List$rangeHelp,
			lo,
			hi,
			{ctor: '[]'});
	});
var _elm_lang$core$List$indexedMap = F2(
	function (f, xs) {
		return A3(
			_elm_lang$core$List$map2,
			f,
			A2(
				_elm_lang$core$List$range,
				0,
				_elm_lang$core$List$length(xs) - 1),
			xs);
	});

var _elm_lang$core$Result$toMaybe = function (result) {
	var _p0 = result;
	if (_p0.ctor === 'Ok') {
		return _elm_lang$core$Maybe$Just(_p0._0);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _elm_lang$core$Result$withDefault = F2(
	function (def, result) {
		var _p1 = result;
		if (_p1.ctor === 'Ok') {
			return _p1._0;
		} else {
			return def;
		}
	});
var _elm_lang$core$Result$Err = function (a) {
	return {ctor: 'Err', _0: a};
};
var _elm_lang$core$Result$andThen = F2(
	function (callback, result) {
		var _p2 = result;
		if (_p2.ctor === 'Ok') {
			return callback(_p2._0);
		} else {
			return _elm_lang$core$Result$Err(_p2._0);
		}
	});
var _elm_lang$core$Result$Ok = function (a) {
	return {ctor: 'Ok', _0: a};
};
var _elm_lang$core$Result$map = F2(
	function (func, ra) {
		var _p3 = ra;
		if (_p3.ctor === 'Ok') {
			return _elm_lang$core$Result$Ok(
				func(_p3._0));
		} else {
			return _elm_lang$core$Result$Err(_p3._0);
		}
	});
var _elm_lang$core$Result$map2 = F3(
	function (func, ra, rb) {
		var _p4 = {ctor: '_Tuple2', _0: ra, _1: rb};
		if (_p4._0.ctor === 'Ok') {
			if (_p4._1.ctor === 'Ok') {
				return _elm_lang$core$Result$Ok(
					A2(func, _p4._0._0, _p4._1._0));
			} else {
				return _elm_lang$core$Result$Err(_p4._1._0);
			}
		} else {
			return _elm_lang$core$Result$Err(_p4._0._0);
		}
	});
var _elm_lang$core$Result$map3 = F4(
	function (func, ra, rb, rc) {
		var _p5 = {ctor: '_Tuple3', _0: ra, _1: rb, _2: rc};
		if (_p5._0.ctor === 'Ok') {
			if (_p5._1.ctor === 'Ok') {
				if (_p5._2.ctor === 'Ok') {
					return _elm_lang$core$Result$Ok(
						A3(func, _p5._0._0, _p5._1._0, _p5._2._0));
				} else {
					return _elm_lang$core$Result$Err(_p5._2._0);
				}
			} else {
				return _elm_lang$core$Result$Err(_p5._1._0);
			}
		} else {
			return _elm_lang$core$Result$Err(_p5._0._0);
		}
	});
var _elm_lang$core$Result$map4 = F5(
	function (func, ra, rb, rc, rd) {
		var _p6 = {ctor: '_Tuple4', _0: ra, _1: rb, _2: rc, _3: rd};
		if (_p6._0.ctor === 'Ok') {
			if (_p6._1.ctor === 'Ok') {
				if (_p6._2.ctor === 'Ok') {
					if (_p6._3.ctor === 'Ok') {
						return _elm_lang$core$Result$Ok(
							A4(func, _p6._0._0, _p6._1._0, _p6._2._0, _p6._3._0));
					} else {
						return _elm_lang$core$Result$Err(_p6._3._0);
					}
				} else {
					return _elm_lang$core$Result$Err(_p6._2._0);
				}
			} else {
				return _elm_lang$core$Result$Err(_p6._1._0);
			}
		} else {
			return _elm_lang$core$Result$Err(_p6._0._0);
		}
	});
var _elm_lang$core$Result$map5 = F6(
	function (func, ra, rb, rc, rd, re) {
		var _p7 = {ctor: '_Tuple5', _0: ra, _1: rb, _2: rc, _3: rd, _4: re};
		if (_p7._0.ctor === 'Ok') {
			if (_p7._1.ctor === 'Ok') {
				if (_p7._2.ctor === 'Ok') {
					if (_p7._3.ctor === 'Ok') {
						if (_p7._4.ctor === 'Ok') {
							return _elm_lang$core$Result$Ok(
								A5(func, _p7._0._0, _p7._1._0, _p7._2._0, _p7._3._0, _p7._4._0));
						} else {
							return _elm_lang$core$Result$Err(_p7._4._0);
						}
					} else {
						return _elm_lang$core$Result$Err(_p7._3._0);
					}
				} else {
					return _elm_lang$core$Result$Err(_p7._2._0);
				}
			} else {
				return _elm_lang$core$Result$Err(_p7._1._0);
			}
		} else {
			return _elm_lang$core$Result$Err(_p7._0._0);
		}
	});
var _elm_lang$core$Result$mapError = F2(
	function (f, result) {
		var _p8 = result;
		if (_p8.ctor === 'Ok') {
			return _elm_lang$core$Result$Ok(_p8._0);
		} else {
			return _elm_lang$core$Result$Err(
				f(_p8._0));
		}
	});
var _elm_lang$core$Result$fromMaybe = F2(
	function (err, maybe) {
		var _p9 = maybe;
		if (_p9.ctor === 'Just') {
			return _elm_lang$core$Result$Ok(_p9._0);
		} else {
			return _elm_lang$core$Result$Err(err);
		}
	});

//import Maybe, Native.List, Native.Utils, Result //

var _elm_lang$core$Native_String = function() {

function isEmpty(str)
{
	return str.length === 0;
}
function cons(chr, str)
{
	return chr + str;
}
function uncons(str)
{
	var hd = str[0];
	if (hd)
	{
		return _elm_lang$core$Maybe$Just(_elm_lang$core$Native_Utils.Tuple2(_elm_lang$core$Native_Utils.chr(hd), str.slice(1)));
	}
	return _elm_lang$core$Maybe$Nothing;
}
function append(a, b)
{
	return a + b;
}
function concat(strs)
{
	return _elm_lang$core$Native_List.toArray(strs).join('');
}
function length(str)
{
	return str.length;
}
function map(f, str)
{
	var out = str.split('');
	for (var i = out.length; i--; )
	{
		out[i] = f(_elm_lang$core$Native_Utils.chr(out[i]));
	}
	return out.join('');
}
function filter(pred, str)
{
	return str.split('').map(_elm_lang$core$Native_Utils.chr).filter(pred).join('');
}
function reverse(str)
{
	return str.split('').reverse().join('');
}
function foldl(f, b, str)
{
	var len = str.length;
	for (var i = 0; i < len; ++i)
	{
		b = A2(f, _elm_lang$core$Native_Utils.chr(str[i]), b);
	}
	return b;
}
function foldr(f, b, str)
{
	for (var i = str.length; i--; )
	{
		b = A2(f, _elm_lang$core$Native_Utils.chr(str[i]), b);
	}
	return b;
}
function split(sep, str)
{
	return _elm_lang$core$Native_List.fromArray(str.split(sep));
}
function join(sep, strs)
{
	return _elm_lang$core$Native_List.toArray(strs).join(sep);
}
function repeat(n, str)
{
	var result = '';
	while (n > 0)
	{
		if (n & 1)
		{
			result += str;
		}
		n >>= 1, str += str;
	}
	return result;
}
function slice(start, end, str)
{
	return str.slice(start, end);
}
function left(n, str)
{
	return n < 1 ? '' : str.slice(0, n);
}
function right(n, str)
{
	return n < 1 ? '' : str.slice(-n);
}
function dropLeft(n, str)
{
	return n < 1 ? str : str.slice(n);
}
function dropRight(n, str)
{
	return n < 1 ? str : str.slice(0, -n);
}
function pad(n, chr, str)
{
	var half = (n - str.length) / 2;
	return repeat(Math.ceil(half), chr) + str + repeat(half | 0, chr);
}
function padRight(n, chr, str)
{
	return str + repeat(n - str.length, chr);
}
function padLeft(n, chr, str)
{
	return repeat(n - str.length, chr) + str;
}

function trim(str)
{
	return str.trim();
}
function trimLeft(str)
{
	return str.replace(/^\s+/, '');
}
function trimRight(str)
{
	return str.replace(/\s+$/, '');
}

function words(str)
{
	return _elm_lang$core$Native_List.fromArray(str.trim().split(/\s+/g));
}
function lines(str)
{
	return _elm_lang$core$Native_List.fromArray(str.split(/\r\n|\r|\n/g));
}

function toUpper(str)
{
	return str.toUpperCase();
}
function toLower(str)
{
	return str.toLowerCase();
}

function any(pred, str)
{
	for (var i = str.length; i--; )
	{
		if (pred(_elm_lang$core$Native_Utils.chr(str[i])))
		{
			return true;
		}
	}
	return false;
}
function all(pred, str)
{
	for (var i = str.length; i--; )
	{
		if (!pred(_elm_lang$core$Native_Utils.chr(str[i])))
		{
			return false;
		}
	}
	return true;
}

function contains(sub, str)
{
	return str.indexOf(sub) > -1;
}
function startsWith(sub, str)
{
	return str.indexOf(sub) === 0;
}
function endsWith(sub, str)
{
	return str.length >= sub.length &&
		str.lastIndexOf(sub) === str.length - sub.length;
}
function indexes(sub, str)
{
	var subLen = sub.length;

	if (subLen < 1)
	{
		return _elm_lang$core$Native_List.Nil;
	}

	var i = 0;
	var is = [];

	while ((i = str.indexOf(sub, i)) > -1)
	{
		is.push(i);
		i = i + subLen;
	}

	return _elm_lang$core$Native_List.fromArray(is);
}


function toInt(s)
{
	var len = s.length;

	// if empty
	if (len === 0)
	{
		return intErr(s);
	}

	// if hex
	var c = s[0];
	if (c === '0' && s[1] === 'x')
	{
		for (var i = 2; i < len; ++i)
		{
			var c = s[i];
			if (('0' <= c && c <= '9') || ('A' <= c && c <= 'F') || ('a' <= c && c <= 'f'))
			{
				continue;
			}
			return intErr(s);
		}
		return _elm_lang$core$Result$Ok(parseInt(s, 16));
	}

	// is decimal
	if (c > '9' || (c < '0' && c !== '-' && c !== '+'))
	{
		return intErr(s);
	}
	for (var i = 1; i < len; ++i)
	{
		var c = s[i];
		if (c < '0' || '9' < c)
		{
			return intErr(s);
		}
	}

	return _elm_lang$core$Result$Ok(parseInt(s, 10));
}

function intErr(s)
{
	return _elm_lang$core$Result$Err("could not convert string '" + s + "' to an Int");
}


function toFloat(s)
{
	// check if it is a hex, octal, or binary number
	if (s.length === 0 || /[\sxbo]/.test(s))
	{
		return floatErr(s);
	}
	var n = +s;
	// faster isNaN check
	return n === n ? _elm_lang$core$Result$Ok(n) : floatErr(s);
}

function floatErr(s)
{
	return _elm_lang$core$Result$Err("could not convert string '" + s + "' to a Float");
}


function toList(str)
{
	return _elm_lang$core$Native_List.fromArray(str.split('').map(_elm_lang$core$Native_Utils.chr));
}
function fromList(chars)
{
	return _elm_lang$core$Native_List.toArray(chars).join('');
}

return {
	isEmpty: isEmpty,
	cons: F2(cons),
	uncons: uncons,
	append: F2(append),
	concat: concat,
	length: length,
	map: F2(map),
	filter: F2(filter),
	reverse: reverse,
	foldl: F3(foldl),
	foldr: F3(foldr),

	split: F2(split),
	join: F2(join),
	repeat: F2(repeat),

	slice: F3(slice),
	left: F2(left),
	right: F2(right),
	dropLeft: F2(dropLeft),
	dropRight: F2(dropRight),

	pad: F3(pad),
	padLeft: F3(padLeft),
	padRight: F3(padRight),

	trim: trim,
	trimLeft: trimLeft,
	trimRight: trimRight,

	words: words,
	lines: lines,

	toUpper: toUpper,
	toLower: toLower,

	any: F2(any),
	all: F2(all),

	contains: F2(contains),
	startsWith: F2(startsWith),
	endsWith: F2(endsWith),
	indexes: F2(indexes),

	toInt: toInt,
	toFloat: toFloat,
	toList: toList,
	fromList: fromList
};

}();

var _elm_lang$core$String$fromList = _elm_lang$core$Native_String.fromList;
var _elm_lang$core$String$toList = _elm_lang$core$Native_String.toList;
var _elm_lang$core$String$toFloat = _elm_lang$core$Native_String.toFloat;
var _elm_lang$core$String$toInt = _elm_lang$core$Native_String.toInt;
var _elm_lang$core$String$indices = _elm_lang$core$Native_String.indexes;
var _elm_lang$core$String$indexes = _elm_lang$core$Native_String.indexes;
var _elm_lang$core$String$endsWith = _elm_lang$core$Native_String.endsWith;
var _elm_lang$core$String$startsWith = _elm_lang$core$Native_String.startsWith;
var _elm_lang$core$String$contains = _elm_lang$core$Native_String.contains;
var _elm_lang$core$String$all = _elm_lang$core$Native_String.all;
var _elm_lang$core$String$any = _elm_lang$core$Native_String.any;
var _elm_lang$core$String$toLower = _elm_lang$core$Native_String.toLower;
var _elm_lang$core$String$toUpper = _elm_lang$core$Native_String.toUpper;
var _elm_lang$core$String$lines = _elm_lang$core$Native_String.lines;
var _elm_lang$core$String$words = _elm_lang$core$Native_String.words;
var _elm_lang$core$String$trimRight = _elm_lang$core$Native_String.trimRight;
var _elm_lang$core$String$trimLeft = _elm_lang$core$Native_String.trimLeft;
var _elm_lang$core$String$trim = _elm_lang$core$Native_String.trim;
var _elm_lang$core$String$padRight = _elm_lang$core$Native_String.padRight;
var _elm_lang$core$String$padLeft = _elm_lang$core$Native_String.padLeft;
var _elm_lang$core$String$pad = _elm_lang$core$Native_String.pad;
var _elm_lang$core$String$dropRight = _elm_lang$core$Native_String.dropRight;
var _elm_lang$core$String$dropLeft = _elm_lang$core$Native_String.dropLeft;
var _elm_lang$core$String$right = _elm_lang$core$Native_String.right;
var _elm_lang$core$String$left = _elm_lang$core$Native_String.left;
var _elm_lang$core$String$slice = _elm_lang$core$Native_String.slice;
var _elm_lang$core$String$repeat = _elm_lang$core$Native_String.repeat;
var _elm_lang$core$String$join = _elm_lang$core$Native_String.join;
var _elm_lang$core$String$split = _elm_lang$core$Native_String.split;
var _elm_lang$core$String$foldr = _elm_lang$core$Native_String.foldr;
var _elm_lang$core$String$foldl = _elm_lang$core$Native_String.foldl;
var _elm_lang$core$String$reverse = _elm_lang$core$Native_String.reverse;
var _elm_lang$core$String$filter = _elm_lang$core$Native_String.filter;
var _elm_lang$core$String$map = _elm_lang$core$Native_String.map;
var _elm_lang$core$String$length = _elm_lang$core$Native_String.length;
var _elm_lang$core$String$concat = _elm_lang$core$Native_String.concat;
var _elm_lang$core$String$append = _elm_lang$core$Native_String.append;
var _elm_lang$core$String$uncons = _elm_lang$core$Native_String.uncons;
var _elm_lang$core$String$cons = _elm_lang$core$Native_String.cons;
var _elm_lang$core$String$fromChar = function ($char) {
	return A2(_elm_lang$core$String$cons, $char, '');
};
var _elm_lang$core$String$isEmpty = _elm_lang$core$Native_String.isEmpty;

var _elm_lang$core$Tuple$mapSecond = F2(
	function (func, _p0) {
		var _p1 = _p0;
		return {
			ctor: '_Tuple2',
			_0: _p1._0,
			_1: func(_p1._1)
		};
	});
var _elm_lang$core$Tuple$mapFirst = F2(
	function (func, _p2) {
		var _p3 = _p2;
		return {
			ctor: '_Tuple2',
			_0: func(_p3._0),
			_1: _p3._1
		};
	});
var _elm_lang$core$Tuple$second = function (_p4) {
	var _p5 = _p4;
	return _p5._1;
};
var _elm_lang$core$Tuple$first = function (_p6) {
	var _p7 = _p6;
	return _p7._0;
};

//import //

var _elm_lang$core$Native_Platform = function() {


// PROGRAMS

function program(impl)
{
	return function(flagDecoder)
	{
		return function(object, moduleName)
		{
			object['worker'] = function worker(flags)
			{
				if (typeof flags !== 'undefined')
				{
					throw new Error(
						'The `' + moduleName + '` module does not need flags.\n'
						+ 'Call ' + moduleName + '.worker() with no arguments and you should be all set!'
					);
				}

				return initialize(
					impl.init,
					impl.update,
					impl.subscriptions,
					renderer
				);
			};
		};
	};
}

function programWithFlags(impl)
{
	return function(flagDecoder)
	{
		return function(object, moduleName)
		{
			object['worker'] = function worker(flags)
			{
				if (typeof flagDecoder === 'undefined')
				{
					throw new Error(
						'Are you trying to sneak a Never value into Elm? Trickster!\n'
						+ 'It looks like ' + moduleName + '.main is defined with `programWithFlags` but has type `Program Never`.\n'
						+ 'Use `program` instead if you do not want flags.'
					);
				}

				var result = A2(_elm_lang$core$Native_Json.run, flagDecoder, flags);
				if (result.ctor === 'Err')
				{
					throw new Error(
						moduleName + '.worker(...) was called with an unexpected argument.\n'
						+ 'I tried to convert it to an Elm value, but ran into this problem:\n\n'
						+ result._0
					);
				}

				return initialize(
					impl.init(result._0),
					impl.update,
					impl.subscriptions,
					renderer
				);
			};
		};
	};
}

function renderer(enqueue, _)
{
	return function(_) {};
}


// HTML TO PROGRAM

function htmlToProgram(vnode)
{
	var emptyBag = batch(_elm_lang$core$Native_List.Nil);
	var noChange = _elm_lang$core$Native_Utils.Tuple2(
		_elm_lang$core$Native_Utils.Tuple0,
		emptyBag
	);

	return _elm_lang$virtual_dom$VirtualDom$program({
		init: noChange,
		view: function(model) { return main; },
		update: F2(function(msg, model) { return noChange; }),
		subscriptions: function (model) { return emptyBag; }
	});
}


// INITIALIZE A PROGRAM

function initialize(init, update, subscriptions, renderer)
{
	// ambient state
	var managers = {};
	var updateView;

	// init and update state in main process
	var initApp = _elm_lang$core$Native_Scheduler.nativeBinding(function(callback) {
		var model = init._0;
		updateView = renderer(enqueue, model);
		var cmds = init._1;
		var subs = subscriptions(model);
		dispatchEffects(managers, cmds, subs);
		callback(_elm_lang$core$Native_Scheduler.succeed(model));
	});

	function onMessage(msg, model)
	{
		return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback) {
			var results = A2(update, msg, model);
			model = results._0;
			updateView(model);
			var cmds = results._1;
			var subs = subscriptions(model);
			dispatchEffects(managers, cmds, subs);
			callback(_elm_lang$core$Native_Scheduler.succeed(model));
		});
	}

	var mainProcess = spawnLoop(initApp, onMessage);

	function enqueue(msg)
	{
		_elm_lang$core$Native_Scheduler.rawSend(mainProcess, msg);
	}

	var ports = setupEffects(managers, enqueue);

	return ports ? { ports: ports } : {};
}


// EFFECT MANAGERS

var effectManagers = {};

function setupEffects(managers, callback)
{
	var ports;

	// setup all necessary effect managers
	for (var key in effectManagers)
	{
		var manager = effectManagers[key];

		if (manager.isForeign)
		{
			ports = ports || {};
			ports[key] = manager.tag === 'cmd'
				? setupOutgoingPort(key)
				: setupIncomingPort(key, callback);
		}

		managers[key] = makeManager(manager, callback);
	}

	return ports;
}

function makeManager(info, callback)
{
	var router = {
		main: callback,
		self: undefined
	};

	var tag = info.tag;
	var onEffects = info.onEffects;
	var onSelfMsg = info.onSelfMsg;

	function onMessage(msg, state)
	{
		if (msg.ctor === 'self')
		{
			return A3(onSelfMsg, router, msg._0, state);
		}

		var fx = msg._0;
		switch (tag)
		{
			case 'cmd':
				return A3(onEffects, router, fx.cmds, state);

			case 'sub':
				return A3(onEffects, router, fx.subs, state);

			case 'fx':
				return A4(onEffects, router, fx.cmds, fx.subs, state);
		}
	}

	var process = spawnLoop(info.init, onMessage);
	router.self = process;
	return process;
}

function sendToApp(router, msg)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		router.main(msg);
		callback(_elm_lang$core$Native_Scheduler.succeed(_elm_lang$core$Native_Utils.Tuple0));
	});
}

function sendToSelf(router, msg)
{
	return A2(_elm_lang$core$Native_Scheduler.send, router.self, {
		ctor: 'self',
		_0: msg
	});
}


// HELPER for STATEFUL LOOPS

function spawnLoop(init, onMessage)
{
	var andThen = _elm_lang$core$Native_Scheduler.andThen;

	function loop(state)
	{
		var handleMsg = _elm_lang$core$Native_Scheduler.receive(function(msg) {
			return onMessage(msg, state);
		});
		return A2(andThen, loop, handleMsg);
	}

	var task = A2(andThen, loop, init);

	return _elm_lang$core$Native_Scheduler.rawSpawn(task);
}


// BAGS

function leaf(home)
{
	return function(value)
	{
		return {
			type: 'leaf',
			home: home,
			value: value
		};
	};
}

function batch(list)
{
	return {
		type: 'node',
		branches: list
	};
}

function map(tagger, bag)
{
	return {
		type: 'map',
		tagger: tagger,
		tree: bag
	}
}


// PIPE BAGS INTO EFFECT MANAGERS

function dispatchEffects(managers, cmdBag, subBag)
{
	var effectsDict = {};
	gatherEffects(true, cmdBag, effectsDict, null);
	gatherEffects(false, subBag, effectsDict, null);

	for (var home in managers)
	{
		var fx = home in effectsDict
			? effectsDict[home]
			: {
				cmds: _elm_lang$core$Native_List.Nil,
				subs: _elm_lang$core$Native_List.Nil
			};

		_elm_lang$core$Native_Scheduler.rawSend(managers[home], { ctor: 'fx', _0: fx });
	}
}

function gatherEffects(isCmd, bag, effectsDict, taggers)
{
	switch (bag.type)
	{
		case 'leaf':
			var home = bag.home;
			var effect = toEffect(isCmd, home, taggers, bag.value);
			effectsDict[home] = insert(isCmd, effect, effectsDict[home]);
			return;

		case 'node':
			var list = bag.branches;
			while (list.ctor !== '[]')
			{
				gatherEffects(isCmd, list._0, effectsDict, taggers);
				list = list._1;
			}
			return;

		case 'map':
			gatherEffects(isCmd, bag.tree, effectsDict, {
				tagger: bag.tagger,
				rest: taggers
			});
			return;
	}
}

function toEffect(isCmd, home, taggers, value)
{
	function applyTaggers(x)
	{
		var temp = taggers;
		while (temp)
		{
			x = temp.tagger(x);
			temp = temp.rest;
		}
		return x;
	}

	var map = isCmd
		? effectManagers[home].cmdMap
		: effectManagers[home].subMap;

	return A2(map, applyTaggers, value)
}

function insert(isCmd, newEffect, effects)
{
	effects = effects || {
		cmds: _elm_lang$core$Native_List.Nil,
		subs: _elm_lang$core$Native_List.Nil
	};
	if (isCmd)
	{
		effects.cmds = _elm_lang$core$Native_List.Cons(newEffect, effects.cmds);
		return effects;
	}
	effects.subs = _elm_lang$core$Native_List.Cons(newEffect, effects.subs);
	return effects;
}


// PORTS

function checkPortName(name)
{
	if (name in effectManagers)
	{
		throw new Error('There can only be one port named `' + name + '`, but your program has multiple.');
	}
}


// OUTGOING PORTS

function outgoingPort(name, converter)
{
	checkPortName(name);
	effectManagers[name] = {
		tag: 'cmd',
		cmdMap: outgoingPortMap,
		converter: converter,
		isForeign: true
	};
	return leaf(name);
}

var outgoingPortMap = F2(function cmdMap(tagger, value) {
	return value;
});

function setupOutgoingPort(name)
{
	var subs = [];
	var converter = effectManagers[name].converter;

	// CREATE MANAGER

	var init = _elm_lang$core$Native_Scheduler.succeed(null);

	function onEffects(router, cmdList, state)
	{
		while (cmdList.ctor !== '[]')
		{
			// grab a separate reference to subs in case unsubscribe is called
			var currentSubs = subs;
			var value = converter(cmdList._0);
			for (var i = 0; i < currentSubs.length; i++)
			{
				currentSubs[i](value);
			}
			cmdList = cmdList._1;
		}
		return init;
	}

	effectManagers[name].init = init;
	effectManagers[name].onEffects = F3(onEffects);

	// PUBLIC API

	function subscribe(callback)
	{
		subs.push(callback);
	}

	function unsubscribe(callback)
	{
		// copy subs into a new array in case unsubscribe is called within a
		// subscribed callback
		subs = subs.slice();
		var index = subs.indexOf(callback);
		if (index >= 0)
		{
			subs.splice(index, 1);
		}
	}

	return {
		subscribe: subscribe,
		unsubscribe: unsubscribe
	};
}


// INCOMING PORTS

function incomingPort(name, converter)
{
	checkPortName(name);
	effectManagers[name] = {
		tag: 'sub',
		subMap: incomingPortMap,
		converter: converter,
		isForeign: true
	};
	return leaf(name);
}

var incomingPortMap = F2(function subMap(tagger, finalTagger)
{
	return function(value)
	{
		return tagger(finalTagger(value));
	};
});

function setupIncomingPort(name, callback)
{
	var sentBeforeInit = [];
	var subs = _elm_lang$core$Native_List.Nil;
	var converter = effectManagers[name].converter;
	var currentOnEffects = preInitOnEffects;
	var currentSend = preInitSend;

	// CREATE MANAGER

	var init = _elm_lang$core$Native_Scheduler.succeed(null);

	function preInitOnEffects(router, subList, state)
	{
		var postInitResult = postInitOnEffects(router, subList, state);

		for(var i = 0; i < sentBeforeInit.length; i++)
		{
			postInitSend(sentBeforeInit[i]);
		}

		sentBeforeInit = null; // to release objects held in queue
		currentSend = postInitSend;
		currentOnEffects = postInitOnEffects;
		return postInitResult;
	}

	function postInitOnEffects(router, subList, state)
	{
		subs = subList;
		return init;
	}

	function onEffects(router, subList, state)
	{
		return currentOnEffects(router, subList, state);
	}

	effectManagers[name].init = init;
	effectManagers[name].onEffects = F3(onEffects);

	// PUBLIC API

	function preInitSend(value)
	{
		sentBeforeInit.push(value);
	}

	function postInitSend(value)
	{
		var temp = subs;
		while (temp.ctor !== '[]')
		{
			callback(temp._0(value));
			temp = temp._1;
		}
	}

	function send(incomingValue)
	{
		var result = A2(_elm_lang$core$Json_Decode$decodeValue, converter, incomingValue);
		if (result.ctor === 'Err')
		{
			throw new Error('Trying to send an unexpected type of value through port `' + name + '`:\n' + result._0);
		}

		currentSend(result._0);
	}

	return { send: send };
}

return {
	// routers
	sendToApp: F2(sendToApp),
	sendToSelf: F2(sendToSelf),

	// global setup
	effectManagers: effectManagers,
	outgoingPort: outgoingPort,
	incomingPort: incomingPort,

	htmlToProgram: htmlToProgram,
	program: program,
	programWithFlags: programWithFlags,
	initialize: initialize,

	// effect bags
	leaf: leaf,
	batch: batch,
	map: F2(map)
};

}();

//import Native.Utils //

var _elm_lang$core$Native_Scheduler = function() {

var MAX_STEPS = 10000;


// TASKS

function succeed(value)
{
	return {
		ctor: '_Task_succeed',
		value: value
	};
}

function fail(error)
{
	return {
		ctor: '_Task_fail',
		value: error
	};
}

function nativeBinding(callback)
{
	return {
		ctor: '_Task_nativeBinding',
		callback: callback,
		cancel: null
	};
}

function andThen(callback, task)
{
	return {
		ctor: '_Task_andThen',
		callback: callback,
		task: task
	};
}

function onError(callback, task)
{
	return {
		ctor: '_Task_onError',
		callback: callback,
		task: task
	};
}

function receive(callback)
{
	return {
		ctor: '_Task_receive',
		callback: callback
	};
}


// PROCESSES

function rawSpawn(task)
{
	var process = {
		ctor: '_Process',
		id: _elm_lang$core$Native_Utils.guid(),
		root: task,
		stack: null,
		mailbox: []
	};

	enqueue(process);

	return process;
}

function spawn(task)
{
	return nativeBinding(function(callback) {
		var process = rawSpawn(task);
		callback(succeed(process));
	});
}

function rawSend(process, msg)
{
	process.mailbox.push(msg);
	enqueue(process);
}

function send(process, msg)
{
	return nativeBinding(function(callback) {
		rawSend(process, msg);
		callback(succeed(_elm_lang$core$Native_Utils.Tuple0));
	});
}

function kill(process)
{
	return nativeBinding(function(callback) {
		var root = process.root;
		if (root.ctor === '_Task_nativeBinding' && root.cancel)
		{
			root.cancel();
		}

		process.root = null;

		callback(succeed(_elm_lang$core$Native_Utils.Tuple0));
	});
}

function sleep(time)
{
	return nativeBinding(function(callback) {
		var id = setTimeout(function() {
			callback(succeed(_elm_lang$core$Native_Utils.Tuple0));
		}, time);

		return function() { clearTimeout(id); };
	});
}


// STEP PROCESSES

function step(numSteps, process)
{
	while (numSteps < MAX_STEPS)
	{
		var ctor = process.root.ctor;

		if (ctor === '_Task_succeed')
		{
			while (process.stack && process.stack.ctor === '_Task_onError')
			{
				process.stack = process.stack.rest;
			}
			if (process.stack === null)
			{
				break;
			}
			process.root = process.stack.callback(process.root.value);
			process.stack = process.stack.rest;
			++numSteps;
			continue;
		}

		if (ctor === '_Task_fail')
		{
			while (process.stack && process.stack.ctor === '_Task_andThen')
			{
				process.stack = process.stack.rest;
			}
			if (process.stack === null)
			{
				break;
			}
			process.root = process.stack.callback(process.root.value);
			process.stack = process.stack.rest;
			++numSteps;
			continue;
		}

		if (ctor === '_Task_andThen')
		{
			process.stack = {
				ctor: '_Task_andThen',
				callback: process.root.callback,
				rest: process.stack
			};
			process.root = process.root.task;
			++numSteps;
			continue;
		}

		if (ctor === '_Task_onError')
		{
			process.stack = {
				ctor: '_Task_onError',
				callback: process.root.callback,
				rest: process.stack
			};
			process.root = process.root.task;
			++numSteps;
			continue;
		}

		if (ctor === '_Task_nativeBinding')
		{
			process.root.cancel = process.root.callback(function(newRoot) {
				process.root = newRoot;
				enqueue(process);
			});

			break;
		}

		if (ctor === '_Task_receive')
		{
			var mailbox = process.mailbox;
			if (mailbox.length === 0)
			{
				break;
			}

			process.root = process.root.callback(mailbox.shift());
			++numSteps;
			continue;
		}

		throw new Error(ctor);
	}

	if (numSteps < MAX_STEPS)
	{
		return numSteps + 1;
	}
	enqueue(process);

	return numSteps;
}


// WORK QUEUE

var working = false;
var workQueue = [];

function enqueue(process)
{
	workQueue.push(process);

	if (!working)
	{
		setTimeout(work, 0);
		working = true;
	}
}

function work()
{
	var numSteps = 0;
	var process;
	while (numSteps < MAX_STEPS && (process = workQueue.shift()))
	{
		if (process.root)
		{
			numSteps = step(numSteps, process);
		}
	}
	if (!process)
	{
		working = false;
		return;
	}
	setTimeout(work, 0);
}


return {
	succeed: succeed,
	fail: fail,
	nativeBinding: nativeBinding,
	andThen: F2(andThen),
	onError: F2(onError),
	receive: receive,

	spawn: spawn,
	kill: kill,
	sleep: sleep,
	send: F2(send),

	rawSpawn: rawSpawn,
	rawSend: rawSend
};

}();
var _elm_lang$core$Platform_Cmd$batch = _elm_lang$core$Native_Platform.batch;
var _elm_lang$core$Platform_Cmd$none = _elm_lang$core$Platform_Cmd$batch(
	{ctor: '[]'});
var _elm_lang$core$Platform_Cmd_ops = _elm_lang$core$Platform_Cmd_ops || {};
_elm_lang$core$Platform_Cmd_ops['!'] = F2(
	function (model, commands) {
		return {
			ctor: '_Tuple2',
			_0: model,
			_1: _elm_lang$core$Platform_Cmd$batch(commands)
		};
	});
var _elm_lang$core$Platform_Cmd$map = _elm_lang$core$Native_Platform.map;
var _elm_lang$core$Platform_Cmd$Cmd = {ctor: 'Cmd'};

var _elm_lang$core$Platform_Sub$batch = _elm_lang$core$Native_Platform.batch;
var _elm_lang$core$Platform_Sub$none = _elm_lang$core$Platform_Sub$batch(
	{ctor: '[]'});
var _elm_lang$core$Platform_Sub$map = _elm_lang$core$Native_Platform.map;
var _elm_lang$core$Platform_Sub$Sub = {ctor: 'Sub'};

var _elm_lang$core$Platform$hack = _elm_lang$core$Native_Scheduler.succeed;
var _elm_lang$core$Platform$sendToSelf = _elm_lang$core$Native_Platform.sendToSelf;
var _elm_lang$core$Platform$sendToApp = _elm_lang$core$Native_Platform.sendToApp;
var _elm_lang$core$Platform$programWithFlags = _elm_lang$core$Native_Platform.programWithFlags;
var _elm_lang$core$Platform$program = _elm_lang$core$Native_Platform.program;
var _elm_lang$core$Platform$Program = {ctor: 'Program'};
var _elm_lang$core$Platform$Task = {ctor: 'Task'};
var _elm_lang$core$Platform$ProcessId = {ctor: 'ProcessId'};
var _elm_lang$core$Platform$Router = {ctor: 'Router'};

var _Skinney$murmur3$Murmur3$mur = F2(
	function (c, h) {
		return 4294967295 & (((h & 65535) * c) + ((65535 & ((h >>> 16) * c)) << 16));
	});
var _Skinney$murmur3$Murmur3$step = function (acc) {
	var h1 = A2(_Skinney$murmur3$Murmur3$mur, 5, (acc >>> 19) | (acc << 13));
	return ((h1 & 65535) + 27492) + ((65535 & ((h1 >>> 16) + 58964)) << 16);
};
var _Skinney$murmur3$Murmur3$mix = F2(
	function (h1, h2) {
		var k1 = A2(_Skinney$murmur3$Murmur3$mur, 3432918353, h2);
		return h1 ^ A2(_Skinney$murmur3$Murmur3$mur, 461845907, (k1 >>> 17) | (k1 << 15));
	});
var _Skinney$murmur3$Murmur3$finalize = F2(
	function (strLength, _p0) {
		var _p1 = _p0;
		var _p3 = _p1._1;
		var _p2 = _p1._2;
		var acc = (!_elm_lang$core$Native_Utils.eq(_p2, 0)) ? A2(_Skinney$murmur3$Murmur3$mix, _p3, _p2) : _p3;
		var h1 = acc ^ strLength;
		var h2 = A2(_Skinney$murmur3$Murmur3$mur, 2246822507, h1 ^ (h1 >>> 16));
		var h3 = A2(_Skinney$murmur3$Murmur3$mur, 3266489909, h2 ^ (h2 >>> 13));
		return (h3 ^ (h3 >>> 16)) >>> 0;
	});
var _Skinney$murmur3$Murmur3$hashFold = F2(
	function (c, _p4) {
		var _p5 = _p4;
		var _p7 = _p5._0;
		var _p6 = _p5._1;
		var res = _p5._2 | ((255 & _elm_lang$core$Char$toCode(c)) << _p7);
		if (_elm_lang$core$Native_Utils.cmp(_p7, 24) > -1) {
			var newHash = _Skinney$murmur3$Murmur3$step(
				A2(_Skinney$murmur3$Murmur3$mix, _p6, res));
			return {ctor: '_Tuple3', _0: 0, _1: newHash, _2: 0};
		} else {
			return {ctor: '_Tuple3', _0: _p7 + 8, _1: _p6, _2: res};
		}
	});
var _Skinney$murmur3$Murmur3$hashString = F2(
	function (seed, str) {
		return A2(
			_Skinney$murmur3$Murmur3$finalize,
			_elm_lang$core$String$length(str),
			A3(
				_elm_lang$core$String$foldl,
				_Skinney$murmur3$Murmur3$hashFold,
				{ctor: '_Tuple3', _0: 0, _1: seed, _2: 0},
				str));
	});

//import Maybe, Native.List //

var _elm_lang$core$Native_Regex = function() {

function escape(str)
{
	return str.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
}
function caseInsensitive(re)
{
	return new RegExp(re.source, 'gi');
}
function regex(raw)
{
	return new RegExp(raw, 'g');
}

function contains(re, string)
{
	return string.match(re) !== null;
}

function find(n, re, str)
{
	n = n.ctor === 'All' ? Infinity : n._0;
	var out = [];
	var number = 0;
	var string = str;
	var lastIndex = re.lastIndex;
	var prevLastIndex = -1;
	var result;
	while (number++ < n && (result = re.exec(string)))
	{
		if (prevLastIndex === re.lastIndex) break;
		var i = result.length - 1;
		var subs = new Array(i);
		while (i > 0)
		{
			var submatch = result[i];
			subs[--i] = submatch === undefined
				? _elm_lang$core$Maybe$Nothing
				: _elm_lang$core$Maybe$Just(submatch);
		}
		out.push({
			match: result[0],
			submatches: _elm_lang$core$Native_List.fromArray(subs),
			index: result.index,
			number: number
		});
		prevLastIndex = re.lastIndex;
	}
	re.lastIndex = lastIndex;
	return _elm_lang$core$Native_List.fromArray(out);
}

function replace(n, re, replacer, string)
{
	n = n.ctor === 'All' ? Infinity : n._0;
	var count = 0;
	function jsReplacer(match)
	{
		if (count++ >= n)
		{
			return match;
		}
		var i = arguments.length - 3;
		var submatches = new Array(i);
		while (i > 0)
		{
			var submatch = arguments[i];
			submatches[--i] = submatch === undefined
				? _elm_lang$core$Maybe$Nothing
				: _elm_lang$core$Maybe$Just(submatch);
		}
		return replacer({
			match: match,
			submatches: _elm_lang$core$Native_List.fromArray(submatches),
			index: arguments[arguments.length - 2],
			number: count
		});
	}
	return string.replace(re, jsReplacer);
}

function split(n, re, str)
{
	n = n.ctor === 'All' ? Infinity : n._0;
	if (n === Infinity)
	{
		return _elm_lang$core$Native_List.fromArray(str.split(re));
	}
	var string = str;
	var result;
	var out = [];
	var start = re.lastIndex;
	var restoreLastIndex = re.lastIndex;
	while (n--)
	{
		if (!(result = re.exec(string))) break;
		out.push(string.slice(start, result.index));
		start = re.lastIndex;
	}
	out.push(string.slice(start));
	re.lastIndex = restoreLastIndex;
	return _elm_lang$core$Native_List.fromArray(out);
}

return {
	regex: regex,
	caseInsensitive: caseInsensitive,
	escape: escape,

	contains: F2(contains),
	find: F3(find),
	replace: F4(replace),
	split: F3(split)
};

}();

var _elm_lang$core$Regex$split = _elm_lang$core$Native_Regex.split;
var _elm_lang$core$Regex$replace = _elm_lang$core$Native_Regex.replace;
var _elm_lang$core$Regex$find = _elm_lang$core$Native_Regex.find;
var _elm_lang$core$Regex$contains = _elm_lang$core$Native_Regex.contains;
var _elm_lang$core$Regex$caseInsensitive = _elm_lang$core$Native_Regex.caseInsensitive;
var _elm_lang$core$Regex$regex = _elm_lang$core$Native_Regex.regex;
var _elm_lang$core$Regex$escape = _elm_lang$core$Native_Regex.escape;
var _elm_lang$core$Regex$Match = F4(
	function (a, b, c, d) {
		return {match: a, submatches: b, index: c, number: d};
	});
var _elm_lang$core$Regex$Regex = {ctor: 'Regex'};
var _elm_lang$core$Regex$AtMost = function (a) {
	return {ctor: 'AtMost', _0: a};
};
var _elm_lang$core$Regex$All = {ctor: 'All'};

var _rtfeldman$elm_css_util$Css_Helpers$toCssIdentifier = function (identifier) {
	return A4(
		_elm_lang$core$Regex$replace,
		_elm_lang$core$Regex$All,
		_elm_lang$core$Regex$regex('[^a-zA-Z0-9_-]'),
		function (_p0) {
			return '';
		},
		A4(
			_elm_lang$core$Regex$replace,
			_elm_lang$core$Regex$All,
			_elm_lang$core$Regex$regex('\\s+'),
			function (_p1) {
				return '-';
			},
			_elm_lang$core$String$trim(
				_elm_lang$core$Basics$toString(identifier))));
};
var _rtfeldman$elm_css_util$Css_Helpers$identifierToString = F2(
	function (name, identifier) {
		return A2(
			_elm_lang$core$Basics_ops['++'],
			_rtfeldman$elm_css_util$Css_Helpers$toCssIdentifier(name),
			_rtfeldman$elm_css_util$Css_Helpers$toCssIdentifier(identifier));
	});

var _rtfeldman$elm_css$Css_Structure$dropEmptyDeclarations = function (declarations) {
	dropEmptyDeclarations:
	while (true) {
		var _p0 = declarations;
		if (_p0.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			switch (_p0._0.ctor) {
				case 'StyleBlockDeclaration':
					var _p1 = _p0._1;
					if (_elm_lang$core$List$isEmpty(_p0._0._0._2)) {
						var _v1 = _p1;
						declarations = _v1;
						continue dropEmptyDeclarations;
					} else {
						return {
							ctor: '::',
							_0: _p0._0,
							_1: _rtfeldman$elm_css$Css_Structure$dropEmptyDeclarations(_p1)
						};
					}
				case 'MediaRule':
					var _p4 = _p0._1;
					if (A2(
						_elm_lang$core$List$all,
						function (_p2) {
							var _p3 = _p2;
							return _elm_lang$core$List$isEmpty(_p3._2);
						},
						_p0._0._1)) {
						var _v3 = _p4;
						declarations = _v3;
						continue dropEmptyDeclarations;
					} else {
						return {
							ctor: '::',
							_0: _p0._0,
							_1: _rtfeldman$elm_css$Css_Structure$dropEmptyDeclarations(_p4)
						};
					}
				case 'SupportsRule':
					var _p5 = _p0._1;
					if (_elm_lang$core$List$isEmpty(_p0._0._1)) {
						var _v4 = _p5;
						declarations = _v4;
						continue dropEmptyDeclarations;
					} else {
						return {
							ctor: '::',
							_0: _p0._0,
							_1: _rtfeldman$elm_css$Css_Structure$dropEmptyDeclarations(_p5)
						};
					}
				case 'DocumentRule':
					return {
						ctor: '::',
						_0: _p0._0,
						_1: _rtfeldman$elm_css$Css_Structure$dropEmptyDeclarations(_p0._1)
					};
				case 'PageRule':
					var _p6 = _p0._1;
					if (_elm_lang$core$List$isEmpty(_p0._0._1)) {
						var _v5 = _p6;
						declarations = _v5;
						continue dropEmptyDeclarations;
					} else {
						return {
							ctor: '::',
							_0: _p0._0,
							_1: _rtfeldman$elm_css$Css_Structure$dropEmptyDeclarations(_p6)
						};
					}
				case 'FontFace':
					var _p7 = _p0._1;
					if (_elm_lang$core$List$isEmpty(_p0._0._0)) {
						var _v6 = _p7;
						declarations = _v6;
						continue dropEmptyDeclarations;
					} else {
						return {
							ctor: '::',
							_0: _p0._0,
							_1: _rtfeldman$elm_css$Css_Structure$dropEmptyDeclarations(_p7)
						};
					}
				case 'Keyframes':
					var _p8 = _p0._1;
					if (_elm_lang$core$List$isEmpty(_p0._0._1)) {
						var _v7 = _p8;
						declarations = _v7;
						continue dropEmptyDeclarations;
					} else {
						return {
							ctor: '::',
							_0: _p0._0,
							_1: _rtfeldman$elm_css$Css_Structure$dropEmptyDeclarations(_p8)
						};
					}
				case 'Viewport':
					var _p9 = _p0._1;
					if (_elm_lang$core$List$isEmpty(_p0._0._0)) {
						var _v8 = _p9;
						declarations = _v8;
						continue dropEmptyDeclarations;
					} else {
						return {
							ctor: '::',
							_0: _p0._0,
							_1: _rtfeldman$elm_css$Css_Structure$dropEmptyDeclarations(_p9)
						};
					}
				case 'CounterStyle':
					var _p10 = _p0._1;
					if (_elm_lang$core$List$isEmpty(_p0._0._0)) {
						var _v9 = _p10;
						declarations = _v9;
						continue dropEmptyDeclarations;
					} else {
						return {
							ctor: '::',
							_0: _p0._0,
							_1: _rtfeldman$elm_css$Css_Structure$dropEmptyDeclarations(_p10)
						};
					}
				default:
					var _p13 = _p0._1;
					if (A2(
						_elm_lang$core$List$all,
						function (_p11) {
							var _p12 = _p11;
							return _elm_lang$core$List$isEmpty(_p12._1);
						},
						_p0._0._0)) {
						var _v11 = _p13;
						declarations = _v11;
						continue dropEmptyDeclarations;
					} else {
						return {
							ctor: '::',
							_0: _p0._0,
							_1: _rtfeldman$elm_css$Css_Structure$dropEmptyDeclarations(_p13)
						};
					}
			}
		}
	}
};
var _rtfeldman$elm_css$Css_Structure$dropEmpty = function (_p14) {
	var _p15 = _p14;
	return {
		charset: _p15.charset,
		imports: _p15.imports,
		namespaces: _p15.namespaces,
		declarations: _rtfeldman$elm_css$Css_Structure$dropEmptyDeclarations(_p15.declarations)
	};
};
var _rtfeldman$elm_css$Css_Structure$concatMapLast = F2(
	function (update, list) {
		var _p16 = list;
		if (_p16.ctor === '[]') {
			return list;
		} else {
			if (_p16._1.ctor === '[]') {
				return update(_p16._0);
			} else {
				return {
					ctor: '::',
					_0: _p16._0,
					_1: A2(_rtfeldman$elm_css$Css_Structure$concatMapLast, update, _p16._1)
				};
			}
		}
	});
var _rtfeldman$elm_css$Css_Structure$mapLast = F2(
	function (update, list) {
		var _p17 = list;
		if (_p17.ctor === '[]') {
			return list;
		} else {
			if (_p17._1.ctor === '[]') {
				return {
					ctor: '::',
					_0: update(_p17._0),
					_1: {ctor: '[]'}
				};
			} else {
				return {
					ctor: '::',
					_0: _p17._0,
					_1: A2(_rtfeldman$elm_css$Css_Structure$mapLast, update, _p17._1)
				};
			}
		}
	});
var _rtfeldman$elm_css$Css_Structure$Property = F3(
	function (a, b, c) {
		return {important: a, key: b, value: c};
	});
var _rtfeldman$elm_css$Css_Structure$Stylesheet = F4(
	function (a, b, c, d) {
		return {charset: a, imports: b, namespaces: c, declarations: d};
	});
var _rtfeldman$elm_css$Css_Structure$FontFeatureValues = function (a) {
	return {ctor: 'FontFeatureValues', _0: a};
};
var _rtfeldman$elm_css$Css_Structure$CounterStyle = function (a) {
	return {ctor: 'CounterStyle', _0: a};
};
var _rtfeldman$elm_css$Css_Structure$Viewport = function (a) {
	return {ctor: 'Viewport', _0: a};
};
var _rtfeldman$elm_css$Css_Structure$Keyframes = F2(
	function (a, b) {
		return {ctor: 'Keyframes', _0: a, _1: b};
	});
var _rtfeldman$elm_css$Css_Structure$FontFace = function (a) {
	return {ctor: 'FontFace', _0: a};
};
var _rtfeldman$elm_css$Css_Structure$PageRule = F2(
	function (a, b) {
		return {ctor: 'PageRule', _0: a, _1: b};
	});
var _rtfeldman$elm_css$Css_Structure$DocumentRule = F5(
	function (a, b, c, d, e) {
		return {ctor: 'DocumentRule', _0: a, _1: b, _2: c, _3: d, _4: e};
	});
var _rtfeldman$elm_css$Css_Structure$SupportsRule = F2(
	function (a, b) {
		return {ctor: 'SupportsRule', _0: a, _1: b};
	});
var _rtfeldman$elm_css$Css_Structure$MediaRule = F2(
	function (a, b) {
		return {ctor: 'MediaRule', _0: a, _1: b};
	});
var _rtfeldman$elm_css$Css_Structure$StyleBlockDeclaration = function (a) {
	return {ctor: 'StyleBlockDeclaration', _0: a};
};
var _rtfeldman$elm_css$Css_Structure$concatMapLastStyleBlock = F2(
	function (update, declarations) {
		var _p18 = declarations;
		_v15_12:
		do {
			if (_p18.ctor === '[]') {
				return declarations;
			} else {
				if (_p18._1.ctor === '[]') {
					switch (_p18._0.ctor) {
						case 'StyleBlockDeclaration':
							return A2(
								_elm_lang$core$List$map,
								_rtfeldman$elm_css$Css_Structure$StyleBlockDeclaration,
								update(_p18._0._0));
						case 'MediaRule':
							if (_p18._0._1.ctor === '::') {
								if (_p18._0._1._1.ctor === '[]') {
									return {
										ctor: '::',
										_0: A2(
											_rtfeldman$elm_css$Css_Structure$MediaRule,
											_p18._0._0,
											update(_p18._0._1._0)),
										_1: {ctor: '[]'}
									};
								} else {
									var _p19 = A2(
										_rtfeldman$elm_css$Css_Structure$concatMapLastStyleBlock,
										update,
										{
											ctor: '::',
											_0: A2(_rtfeldman$elm_css$Css_Structure$MediaRule, _p18._0._0, _p18._0._1._1),
											_1: {ctor: '[]'}
										});
									if (((_p19.ctor === '::') && (_p19._0.ctor === 'MediaRule')) && (_p19._1.ctor === '[]')) {
										return {
											ctor: '::',
											_0: A2(
												_rtfeldman$elm_css$Css_Structure$MediaRule,
												_p19._0._0,
												{ctor: '::', _0: _p18._0._1._0, _1: _p19._0._1}),
											_1: {ctor: '[]'}
										};
									} else {
										return _p19;
									}
								}
							} else {
								break _v15_12;
							}
						case 'SupportsRule':
							return {
								ctor: '::',
								_0: A2(
									_rtfeldman$elm_css$Css_Structure$SupportsRule,
									_p18._0._0,
									A2(_rtfeldman$elm_css$Css_Structure$concatMapLastStyleBlock, update, _p18._0._1)),
								_1: {ctor: '[]'}
							};
						case 'DocumentRule':
							return A2(
								_elm_lang$core$List$map,
								A4(_rtfeldman$elm_css$Css_Structure$DocumentRule, _p18._0._0, _p18._0._1, _p18._0._2, _p18._0._3),
								update(_p18._0._4));
						case 'PageRule':
							return declarations;
						case 'FontFace':
							return declarations;
						case 'Keyframes':
							return declarations;
						case 'Viewport':
							return declarations;
						case 'CounterStyle':
							return declarations;
						default:
							return declarations;
					}
				} else {
					break _v15_12;
				}
			}
		} while(false);
		return {
			ctor: '::',
			_0: _p18._0,
			_1: A2(_rtfeldman$elm_css$Css_Structure$concatMapLastStyleBlock, update, _p18._1)
		};
	});
var _rtfeldman$elm_css$Css_Structure$StyleBlock = F3(
	function (a, b, c) {
		return {ctor: 'StyleBlock', _0: a, _1: b, _2: c};
	});
var _rtfeldman$elm_css$Css_Structure$withPropertyAppended = F2(
	function (property, _p20) {
		var _p21 = _p20;
		return A3(
			_rtfeldman$elm_css$Css_Structure$StyleBlock,
			_p21._0,
			_p21._1,
			A2(
				_elm_lang$core$Basics_ops['++'],
				_p21._2,
				{
					ctor: '::',
					_0: property,
					_1: {ctor: '[]'}
				}));
	});
var _rtfeldman$elm_css$Css_Structure$appendProperty = F2(
	function (property, declarations) {
		var _p22 = declarations;
		if (_p22.ctor === '[]') {
			return declarations;
		} else {
			if (_p22._1.ctor === '[]') {
				switch (_p22._0.ctor) {
					case 'StyleBlockDeclaration':
						return {
							ctor: '::',
							_0: _rtfeldman$elm_css$Css_Structure$StyleBlockDeclaration(
								A2(_rtfeldman$elm_css$Css_Structure$withPropertyAppended, property, _p22._0._0)),
							_1: {ctor: '[]'}
						};
					case 'MediaRule':
						return {
							ctor: '::',
							_0: A2(
								_rtfeldman$elm_css$Css_Structure$MediaRule,
								_p22._0._0,
								A2(
									_rtfeldman$elm_css$Css_Structure$mapLast,
									_rtfeldman$elm_css$Css_Structure$withPropertyAppended(property),
									_p22._0._1)),
							_1: {ctor: '[]'}
						};
					default:
						return declarations;
				}
			} else {
				return {
					ctor: '::',
					_0: _p22._0,
					_1: A2(_rtfeldman$elm_css$Css_Structure$appendProperty, property, _p22._1)
				};
			}
		}
	});
var _rtfeldman$elm_css$Css_Structure$appendToLastSelector = F2(
	function (f, styleBlock) {
		var _p23 = styleBlock;
		if (_p23._1.ctor === '[]') {
			var _p24 = _p23._0;
			return {
				ctor: '::',
				_0: A3(
					_rtfeldman$elm_css$Css_Structure$StyleBlock,
					_p24,
					{ctor: '[]'},
					_p23._2),
				_1: {
					ctor: '::',
					_0: A3(
						_rtfeldman$elm_css$Css_Structure$StyleBlock,
						f(_p24),
						{ctor: '[]'},
						{ctor: '[]'}),
					_1: {ctor: '[]'}
				}
			};
		} else {
			var _p26 = _p23._1;
			var _p25 = _p23._0;
			var newFirst = f(_p25);
			var newRest = A2(_elm_lang$core$List$map, f, _p26);
			return {
				ctor: '::',
				_0: A3(_rtfeldman$elm_css$Css_Structure$StyleBlock, _p25, _p26, _p23._2),
				_1: {
					ctor: '::',
					_0: A3(
						_rtfeldman$elm_css$Css_Structure$StyleBlock,
						newFirst,
						newRest,
						{ctor: '[]'}),
					_1: {ctor: '[]'}
				}
			};
		}
	});
var _rtfeldman$elm_css$Css_Structure$MediaQuery = function (a) {
	return {ctor: 'MediaQuery', _0: a};
};
var _rtfeldman$elm_css$Css_Structure$Selector = F3(
	function (a, b, c) {
		return {ctor: 'Selector', _0: a, _1: b, _2: c};
	});
var _rtfeldman$elm_css$Css_Structure$applyPseudoElement = F2(
	function (pseudo, _p27) {
		var _p28 = _p27;
		return A3(
			_rtfeldman$elm_css$Css_Structure$Selector,
			_p28._0,
			_p28._1,
			_elm_lang$core$Maybe$Just(pseudo));
	});
var _rtfeldman$elm_css$Css_Structure$appendPseudoElementToLastSelector = F2(
	function (pseudo, styleBlock) {
		return A2(
			_rtfeldman$elm_css$Css_Structure$appendToLastSelector,
			_rtfeldman$elm_css$Css_Structure$applyPseudoElement(pseudo),
			styleBlock);
	});
var _rtfeldman$elm_css$Css_Structure$CustomSelector = F2(
	function (a, b) {
		return {ctor: 'CustomSelector', _0: a, _1: b};
	});
var _rtfeldman$elm_css$Css_Structure$UniversalSelectorSequence = function (a) {
	return {ctor: 'UniversalSelectorSequence', _0: a};
};
var _rtfeldman$elm_css$Css_Structure$TypeSelectorSequence = F2(
	function (a, b) {
		return {ctor: 'TypeSelectorSequence', _0: a, _1: b};
	});
var _rtfeldman$elm_css$Css_Structure$appendRepeatable = F2(
	function (selector, sequence) {
		var _p29 = sequence;
		switch (_p29.ctor) {
			case 'TypeSelectorSequence':
				return A2(
					_rtfeldman$elm_css$Css_Structure$TypeSelectorSequence,
					_p29._0,
					A2(
						_elm_lang$core$Basics_ops['++'],
						_p29._1,
						{
							ctor: '::',
							_0: selector,
							_1: {ctor: '[]'}
						}));
			case 'UniversalSelectorSequence':
				return _rtfeldman$elm_css$Css_Structure$UniversalSelectorSequence(
					A2(
						_elm_lang$core$Basics_ops['++'],
						_p29._0,
						{
							ctor: '::',
							_0: selector,
							_1: {ctor: '[]'}
						}));
			default:
				return A2(
					_rtfeldman$elm_css$Css_Structure$CustomSelector,
					_p29._0,
					A2(
						_elm_lang$core$Basics_ops['++'],
						_p29._1,
						{
							ctor: '::',
							_0: selector,
							_1: {ctor: '[]'}
						}));
		}
	});
var _rtfeldman$elm_css$Css_Structure$appendRepeatableWithCombinator = F2(
	function (selector, list) {
		var _p30 = list;
		if (_p30.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			if ((_p30._0.ctor === '_Tuple2') && (_p30._1.ctor === '[]')) {
				return {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: _p30._0._0,
						_1: A2(_rtfeldman$elm_css$Css_Structure$appendRepeatable, selector, _p30._0._1)
					},
					_1: {ctor: '[]'}
				};
			} else {
				return {
					ctor: '::',
					_0: _p30._0,
					_1: A2(_rtfeldman$elm_css$Css_Structure$appendRepeatableWithCombinator, selector, _p30._1)
				};
			}
		}
	});
var _rtfeldman$elm_css$Css_Structure$appendRepeatableSelector = F2(
	function (repeatableSimpleSelector, selector) {
		var _p31 = selector;
		if (_p31._1.ctor === '[]') {
			return A3(
				_rtfeldman$elm_css$Css_Structure$Selector,
				A2(_rtfeldman$elm_css$Css_Structure$appendRepeatable, repeatableSimpleSelector, _p31._0),
				{ctor: '[]'},
				_p31._2);
		} else {
			return A3(
				_rtfeldman$elm_css$Css_Structure$Selector,
				_p31._0,
				A2(_rtfeldman$elm_css$Css_Structure$appendRepeatableWithCombinator, repeatableSimpleSelector, _p31._1),
				_p31._2);
		}
	});
var _rtfeldman$elm_css$Css_Structure$extendLastSelector = F2(
	function (selector, declarations) {
		var _p32 = declarations;
		_v24_15:
		do {
			if (_p32.ctor === '[]') {
				return declarations;
			} else {
				if (_p32._1.ctor === '[]') {
					switch (_p32._0.ctor) {
						case 'StyleBlockDeclaration':
							if (_p32._0._0._1.ctor === '[]') {
								return {
									ctor: '::',
									_0: _rtfeldman$elm_css$Css_Structure$StyleBlockDeclaration(
										A3(
											_rtfeldman$elm_css$Css_Structure$StyleBlock,
											A2(_rtfeldman$elm_css$Css_Structure$appendRepeatableSelector, selector, _p32._0._0._0),
											{ctor: '[]'},
											_p32._0._0._2)),
									_1: {ctor: '[]'}
								};
							} else {
								var newRest = A2(
									_rtfeldman$elm_css$Css_Structure$mapLast,
									_rtfeldman$elm_css$Css_Structure$appendRepeatableSelector(selector),
									_p32._0._0._1);
								return {
									ctor: '::',
									_0: _rtfeldman$elm_css$Css_Structure$StyleBlockDeclaration(
										A3(_rtfeldman$elm_css$Css_Structure$StyleBlock, _p32._0._0._0, newRest, _p32._0._0._2)),
									_1: {ctor: '[]'}
								};
							}
						case 'MediaRule':
							if (_p32._0._1.ctor === '::') {
								if (_p32._0._1._1.ctor === '[]') {
									if (_p32._0._1._0._1.ctor === '[]') {
										var newStyleBlock = A3(
											_rtfeldman$elm_css$Css_Structure$StyleBlock,
											A2(_rtfeldman$elm_css$Css_Structure$appendRepeatableSelector, selector, _p32._0._1._0._0),
											{ctor: '[]'},
											_p32._0._1._0._2);
										return {
											ctor: '::',
											_0: A2(
												_rtfeldman$elm_css$Css_Structure$MediaRule,
												_p32._0._0,
												{
													ctor: '::',
													_0: newStyleBlock,
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										};
									} else {
										var newRest = A2(
											_rtfeldman$elm_css$Css_Structure$mapLast,
											_rtfeldman$elm_css$Css_Structure$appendRepeatableSelector(selector),
											_p32._0._1._0._1);
										var newStyleBlock = A3(_rtfeldman$elm_css$Css_Structure$StyleBlock, _p32._0._1._0._0, newRest, _p32._0._1._0._2);
										return {
											ctor: '::',
											_0: A2(
												_rtfeldman$elm_css$Css_Structure$MediaRule,
												_p32._0._0,
												{
													ctor: '::',
													_0: newStyleBlock,
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										};
									}
								} else {
									var _p33 = A2(
										_rtfeldman$elm_css$Css_Structure$extendLastSelector,
										selector,
										{
											ctor: '::',
											_0: A2(_rtfeldman$elm_css$Css_Structure$MediaRule, _p32._0._0, _p32._0._1._1),
											_1: {ctor: '[]'}
										});
									if (((_p33.ctor === '::') && (_p33._0.ctor === 'MediaRule')) && (_p33._1.ctor === '[]')) {
										return {
											ctor: '::',
											_0: A2(
												_rtfeldman$elm_css$Css_Structure$MediaRule,
												_p33._0._0,
												{ctor: '::', _0: _p32._0._1._0, _1: _p33._0._1}),
											_1: {ctor: '[]'}
										};
									} else {
										return _p33;
									}
								}
							} else {
								break _v24_15;
							}
						case 'SupportsRule':
							return {
								ctor: '::',
								_0: A2(
									_rtfeldman$elm_css$Css_Structure$SupportsRule,
									_p32._0._0,
									A2(_rtfeldman$elm_css$Css_Structure$extendLastSelector, selector, _p32._0._1)),
								_1: {ctor: '[]'}
							};
						case 'DocumentRule':
							if (_p32._0._4._1.ctor === '[]') {
								var newStyleBlock = A3(
									_rtfeldman$elm_css$Css_Structure$StyleBlock,
									A2(_rtfeldman$elm_css$Css_Structure$appendRepeatableSelector, selector, _p32._0._4._0),
									{ctor: '[]'},
									_p32._0._4._2);
								return {
									ctor: '::',
									_0: A5(_rtfeldman$elm_css$Css_Structure$DocumentRule, _p32._0._0, _p32._0._1, _p32._0._2, _p32._0._3, newStyleBlock),
									_1: {ctor: '[]'}
								};
							} else {
								var newRest = A2(
									_rtfeldman$elm_css$Css_Structure$mapLast,
									_rtfeldman$elm_css$Css_Structure$appendRepeatableSelector(selector),
									_p32._0._4._1);
								var newStyleBlock = A3(_rtfeldman$elm_css$Css_Structure$StyleBlock, _p32._0._4._0, newRest, _p32._0._4._2);
								return {
									ctor: '::',
									_0: A5(_rtfeldman$elm_css$Css_Structure$DocumentRule, _p32._0._0, _p32._0._1, _p32._0._2, _p32._0._3, newStyleBlock),
									_1: {ctor: '[]'}
								};
							}
						case 'PageRule':
							return declarations;
						case 'FontFace':
							return declarations;
						case 'Keyframes':
							return declarations;
						case 'Viewport':
							return declarations;
						case 'CounterStyle':
							return declarations;
						default:
							return declarations;
					}
				} else {
					break _v24_15;
				}
			}
		} while(false);
		return {
			ctor: '::',
			_0: _p32._0,
			_1: A2(_rtfeldman$elm_css$Css_Structure$extendLastSelector, selector, _p32._1)
		};
	});
var _rtfeldman$elm_css$Css_Structure$appendRepeatableToLastSelector = F2(
	function (selector, styleBlock) {
		return A2(
			_rtfeldman$elm_css$Css_Structure$appendToLastSelector,
			_rtfeldman$elm_css$Css_Structure$appendRepeatableSelector(selector),
			styleBlock);
	});
var _rtfeldman$elm_css$Css_Structure$PseudoClassSelector = function (a) {
	return {ctor: 'PseudoClassSelector', _0: a};
};
var _rtfeldman$elm_css$Css_Structure$IdSelector = function (a) {
	return {ctor: 'IdSelector', _0: a};
};
var _rtfeldman$elm_css$Css_Structure$ClassSelector = function (a) {
	return {ctor: 'ClassSelector', _0: a};
};
var _rtfeldman$elm_css$Css_Structure$TypeSelector = function (a) {
	return {ctor: 'TypeSelector', _0: a};
};
var _rtfeldman$elm_css$Css_Structure$PseudoElement = function (a) {
	return {ctor: 'PseudoElement', _0: a};
};
var _rtfeldman$elm_css$Css_Structure$Descendant = {ctor: 'Descendant'};
var _rtfeldman$elm_css$Css_Structure$Child = {ctor: 'Child'};
var _rtfeldman$elm_css$Css_Structure$GeneralSibling = {ctor: 'GeneralSibling'};
var _rtfeldman$elm_css$Css_Structure$AdjacentSibling = {ctor: 'AdjacentSibling'};

var _rtfeldman$elm_css$Css_Preprocess$propertyToPair = function (property) {
	var value = property.important ? A2(_elm_lang$core$Basics_ops['++'], property.value, ' !important') : property.value;
	return {ctor: '_Tuple2', _0: property.key, _1: value};
};
var _rtfeldman$elm_css$Css_Preprocess$toPropertyPairs = function (mixins) {
	toPropertyPairs:
	while (true) {
		var _p0 = mixins;
		if (_p0.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			switch (_p0._0.ctor) {
				case 'AppendProperty':
					return {
						ctor: '::',
						_0: _rtfeldman$elm_css$Css_Preprocess$propertyToPair(_p0._0._0),
						_1: _rtfeldman$elm_css$Css_Preprocess$toPropertyPairs(_p0._1)
					};
				case 'ApplyMixins':
					return A2(
						_elm_lang$core$Basics_ops['++'],
						_rtfeldman$elm_css$Css_Preprocess$toPropertyPairs(_p0._0._0),
						_rtfeldman$elm_css$Css_Preprocess$toPropertyPairs(_p0._1));
				default:
					var _v1 = _p0._1;
					mixins = _v1;
					continue toPropertyPairs;
			}
		}
	}
};
var _rtfeldman$elm_css$Css_Preprocess$unwrapSnippet = function (_p1) {
	var _p2 = _p1;
	return _p2._0;
};
var _rtfeldman$elm_css$Css_Preprocess$toMediaRule = F2(
	function (mediaQueries, declaration) {
		var _p3 = declaration;
		switch (_p3.ctor) {
			case 'StyleBlockDeclaration':
				return A2(
					_rtfeldman$elm_css$Css_Structure$MediaRule,
					mediaQueries,
					{
						ctor: '::',
						_0: _p3._0,
						_1: {ctor: '[]'}
					});
			case 'MediaRule':
				return A2(
					_rtfeldman$elm_css$Css_Structure$MediaRule,
					A2(_elm_lang$core$Basics_ops['++'], mediaQueries, _p3._0),
					_p3._1);
			case 'SupportsRule':
				return A2(
					_rtfeldman$elm_css$Css_Structure$SupportsRule,
					_p3._0,
					A2(
						_elm_lang$core$List$map,
						_rtfeldman$elm_css$Css_Preprocess$toMediaRule(mediaQueries),
						_p3._1));
			case 'DocumentRule':
				return A5(_rtfeldman$elm_css$Css_Structure$DocumentRule, _p3._0, _p3._1, _p3._2, _p3._3, _p3._4);
			case 'PageRule':
				return declaration;
			case 'FontFace':
				return declaration;
			case 'Keyframes':
				return declaration;
			case 'Viewport':
				return declaration;
			case 'CounterStyle':
				return declaration;
			default:
				return declaration;
		}
	});
var _rtfeldman$elm_css$Css_Preprocess$stylesheet = function (snippets) {
	return {
		charset: _elm_lang$core$Maybe$Nothing,
		imports: {ctor: '[]'},
		namespaces: {ctor: '[]'},
		snippets: snippets
	};
};
var _rtfeldman$elm_css$Css_Preprocess$Property = F4(
	function (a, b, c, d) {
		return {key: a, value: b, important: c, warnings: d};
	});
var _rtfeldman$elm_css$Css_Preprocess$Stylesheet = F4(
	function (a, b, c, d) {
		return {charset: a, imports: b, namespaces: c, snippets: d};
	});
var _rtfeldman$elm_css$Css_Preprocess$ApplyMixins = function (a) {
	return {ctor: 'ApplyMixins', _0: a};
};
var _rtfeldman$elm_css$Css_Preprocess$WithMedia = F2(
	function (a, b) {
		return {ctor: 'WithMedia', _0: a, _1: b};
	});
var _rtfeldman$elm_css$Css_Preprocess$WithPseudoElement = F2(
	function (a, b) {
		return {ctor: 'WithPseudoElement', _0: a, _1: b};
	});
var _rtfeldman$elm_css$Css_Preprocess$NestSnippet = F2(
	function (a, b) {
		return {ctor: 'NestSnippet', _0: a, _1: b};
	});
var _rtfeldman$elm_css$Css_Preprocess$ExtendSelector = F2(
	function (a, b) {
		return {ctor: 'ExtendSelector', _0: a, _1: b};
	});
var _rtfeldman$elm_css$Css_Preprocess$AppendProperty = function (a) {
	return {ctor: 'AppendProperty', _0: a};
};
var _rtfeldman$elm_css$Css_Preprocess$mapLastProperty = F2(
	function (update, mixin) {
		var _p4 = mixin;
		switch (_p4.ctor) {
			case 'AppendProperty':
				return _rtfeldman$elm_css$Css_Preprocess$AppendProperty(
					update(_p4._0));
			case 'ExtendSelector':
				return A2(
					_rtfeldman$elm_css$Css_Preprocess$ExtendSelector,
					_p4._0,
					A2(_rtfeldman$elm_css$Css_Preprocess$mapAllLastProperty, update, _p4._1));
			case 'NestSnippet':
				return mixin;
			case 'WithPseudoElement':
				return mixin;
			case 'WithMedia':
				return mixin;
			default:
				return _rtfeldman$elm_css$Css_Preprocess$ApplyMixins(
					A2(
						_rtfeldman$elm_css$Css_Structure$mapLast,
						_rtfeldman$elm_css$Css_Preprocess$mapLastProperty(update),
						_p4._0));
		}
	});
var _rtfeldman$elm_css$Css_Preprocess$mapAllLastProperty = F2(
	function (update, mixins) {
		var _p5 = mixins;
		if (_p5.ctor === '[]') {
			return mixins;
		} else {
			if (_p5._1.ctor === '[]') {
				return {
					ctor: '::',
					_0: A2(_rtfeldman$elm_css$Css_Preprocess$mapLastProperty, update, _p5._0),
					_1: {ctor: '[]'}
				};
			} else {
				return {
					ctor: '::',
					_0: _p5._0,
					_1: A2(_rtfeldman$elm_css$Css_Preprocess$mapAllLastProperty, update, _p5._1)
				};
			}
		}
	});
var _rtfeldman$elm_css$Css_Preprocess$Snippet = function (a) {
	return {ctor: 'Snippet', _0: a};
};
var _rtfeldman$elm_css$Css_Preprocess$FontFeatureValues = function (a) {
	return {ctor: 'FontFeatureValues', _0: a};
};
var _rtfeldman$elm_css$Css_Preprocess$CounterStyle = function (a) {
	return {ctor: 'CounterStyle', _0: a};
};
var _rtfeldman$elm_css$Css_Preprocess$Viewport = function (a) {
	return {ctor: 'Viewport', _0: a};
};
var _rtfeldman$elm_css$Css_Preprocess$Keyframes = F2(
	function (a, b) {
		return {ctor: 'Keyframes', _0: a, _1: b};
	});
var _rtfeldman$elm_css$Css_Preprocess$FontFace = function (a) {
	return {ctor: 'FontFace', _0: a};
};
var _rtfeldman$elm_css$Css_Preprocess$PageRule = F2(
	function (a, b) {
		return {ctor: 'PageRule', _0: a, _1: b};
	});
var _rtfeldman$elm_css$Css_Preprocess$DocumentRule = F5(
	function (a, b, c, d, e) {
		return {ctor: 'DocumentRule', _0: a, _1: b, _2: c, _3: d, _4: e};
	});
var _rtfeldman$elm_css$Css_Preprocess$SupportsRule = F2(
	function (a, b) {
		return {ctor: 'SupportsRule', _0: a, _1: b};
	});
var _rtfeldman$elm_css$Css_Preprocess$MediaRule = F2(
	function (a, b) {
		return {ctor: 'MediaRule', _0: a, _1: b};
	});
var _rtfeldman$elm_css$Css_Preprocess$StyleBlockDeclaration = function (a) {
	return {ctor: 'StyleBlockDeclaration', _0: a};
};
var _rtfeldman$elm_css$Css_Preprocess$StyleBlock = F3(
	function (a, b, c) {
		return {ctor: 'StyleBlock', _0: a, _1: b, _2: c};
	});

var _rtfeldman$elm_css$Css_Structure_Output$indent = function (str) {
	return A2(_elm_lang$core$Basics_ops['++'], '    ', str);
};
var _rtfeldman$elm_css$Css_Structure_Output$prettyPrintProperty = function (_p0) {
	var _p1 = _p0;
	var suffix = _p1.important ? ' !important;' : ';';
	return A2(
		_elm_lang$core$Basics_ops['++'],
		_p1.key,
		A2(
			_elm_lang$core$Basics_ops['++'],
			': ',
			A2(_elm_lang$core$Basics_ops['++'], _p1.value, suffix)));
};
var _rtfeldman$elm_css$Css_Structure_Output$prettyPrintProperties = function (properties) {
	return A2(
		_elm_lang$core$String$join,
		'\n',
		A2(
			_elm_lang$core$List$map,
			function (_p2) {
				return _rtfeldman$elm_css$Css_Structure_Output$indent(
					_rtfeldman$elm_css$Css_Structure_Output$prettyPrintProperty(_p2));
			},
			properties));
};
var _rtfeldman$elm_css$Css_Structure_Output$combinatorToString = function (combinator) {
	var _p3 = combinator;
	switch (_p3.ctor) {
		case 'AdjacentSibling':
			return '+';
		case 'GeneralSibling':
			return '~';
		case 'Child':
			return '>';
		default:
			return '';
	}
};
var _rtfeldman$elm_css$Css_Structure_Output$pseudoElementToString = function (_p4) {
	var _p5 = _p4;
	return A2(_elm_lang$core$Basics_ops['++'], '::', _p5._0);
};
var _rtfeldman$elm_css$Css_Structure_Output$repeatableSimpleSelectorToString = function (repeatableSimpleSelector) {
	var _p6 = repeatableSimpleSelector;
	switch (_p6.ctor) {
		case 'ClassSelector':
			return A2(_elm_lang$core$Basics_ops['++'], '.', _p6._0);
		case 'IdSelector':
			return A2(_elm_lang$core$Basics_ops['++'], '#', _p6._0);
		default:
			return A2(_elm_lang$core$Basics_ops['++'], ':', _p6._0);
	}
};
var _rtfeldman$elm_css$Css_Structure_Output$simpleSelectorSequenceToString = function (simpleSelectorSequence) {
	var _p7 = simpleSelectorSequence;
	switch (_p7.ctor) {
		case 'TypeSelectorSequence':
			return A2(
				_elm_lang$core$String$join,
				'',
				{
					ctor: '::',
					_0: _p7._0._0,
					_1: A2(_elm_lang$core$List$map, _rtfeldman$elm_css$Css_Structure_Output$repeatableSimpleSelectorToString, _p7._1)
				});
		case 'UniversalSelectorSequence':
			var _p8 = _p7._0;
			return _elm_lang$core$List$isEmpty(_p8) ? '*' : A2(
				_elm_lang$core$String$join,
				'',
				A2(_elm_lang$core$List$map, _rtfeldman$elm_css$Css_Structure_Output$repeatableSimpleSelectorToString, _p8));
		default:
			return A2(
				_elm_lang$core$String$join,
				'',
				{
					ctor: '::',
					_0: _p7._0,
					_1: A2(_elm_lang$core$List$map, _rtfeldman$elm_css$Css_Structure_Output$repeatableSimpleSelectorToString, _p7._1)
				});
	}
};
var _rtfeldman$elm_css$Css_Structure_Output$selectorChainToString = function (_p9) {
	var _p10 = _p9;
	return A2(
		_elm_lang$core$String$join,
		' ',
		{
			ctor: '::',
			_0: _rtfeldman$elm_css$Css_Structure_Output$combinatorToString(_p10._0),
			_1: {
				ctor: '::',
				_0: _rtfeldman$elm_css$Css_Structure_Output$simpleSelectorSequenceToString(_p10._1),
				_1: {ctor: '[]'}
			}
		});
};
var _rtfeldman$elm_css$Css_Structure_Output$selectorToString = function (_p11) {
	var _p12 = _p11;
	var pseudoElementsString = A2(
		_elm_lang$core$String$join,
		'',
		{
			ctor: '::',
			_0: A2(
				_elm_lang$core$Maybe$withDefault,
				'',
				A2(_elm_lang$core$Maybe$map, _rtfeldman$elm_css$Css_Structure_Output$pseudoElementToString, _p12._2)),
			_1: {ctor: '[]'}
		});
	var segments = A2(
		_elm_lang$core$Basics_ops['++'],
		{
			ctor: '::',
			_0: _rtfeldman$elm_css$Css_Structure_Output$simpleSelectorSequenceToString(_p12._0),
			_1: {ctor: '[]'}
		},
		A2(_elm_lang$core$List$map, _rtfeldman$elm_css$Css_Structure_Output$selectorChainToString, _p12._1));
	return A3(
		_elm_lang$core$Basics$flip,
		F2(
			function (x, y) {
				return A2(_elm_lang$core$Basics_ops['++'], x, y);
			}),
		pseudoElementsString,
		A2(
			_elm_lang$core$String$join,
			' ',
			A2(
				_elm_lang$core$List$filter,
				function (_p13) {
					return !_elm_lang$core$String$isEmpty(_p13);
				},
				segments)));
};
var _rtfeldman$elm_css$Css_Structure_Output$prettyPrintStyleBlock = function (_p14) {
	var _p15 = _p14;
	var selectorStr = A2(
		_elm_lang$core$String$join,
		', ',
		A2(
			_elm_lang$core$List$map,
			_rtfeldman$elm_css$Css_Structure_Output$selectorToString,
			{ctor: '::', _0: _p15._0, _1: _p15._1}));
	return A2(
		_elm_lang$core$Basics_ops['++'],
		selectorStr,
		A2(
			_elm_lang$core$Basics_ops['++'],
			' {\n',
			A2(
				_elm_lang$core$Basics_ops['++'],
				_rtfeldman$elm_css$Css_Structure_Output$prettyPrintProperties(_p15._2),
				'\n}')));
};
var _rtfeldman$elm_css$Css_Structure_Output$prettyPrintDeclaration = function (declaration) {
	var _p16 = declaration;
	switch (_p16.ctor) {
		case 'StyleBlockDeclaration':
			return _rtfeldman$elm_css$Css_Structure_Output$prettyPrintStyleBlock(_p16._0);
		case 'MediaRule':
			var query = A2(
				_elm_lang$core$String$join,
				' ',
				A2(
					_elm_lang$core$List$map,
					function (_p17) {
						var _p18 = _p17;
						return _p18._0;
					},
					_p16._0));
			var blocks = A2(
				_elm_lang$core$String$join,
				'\n\n',
				A2(
					_elm_lang$core$List$map,
					function (_p19) {
						return _rtfeldman$elm_css$Css_Structure_Output$indent(
							_rtfeldman$elm_css$Css_Structure_Output$prettyPrintStyleBlock(_p19));
					},
					_p16._1));
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'@media ',
				A2(
					_elm_lang$core$Basics_ops['++'],
					query,
					A2(
						_elm_lang$core$Basics_ops['++'],
						' {\n',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_rtfeldman$elm_css$Css_Structure_Output$indent(blocks),
							'\n}'))));
		default:
			return _elm_lang$core$Native_Utils.crashCase(
				'Css.Structure.Output',
				{
					start: {line: 56, column: 5},
					end: {line: 73, column: 49}
				},
				_p16)('not yet implemented :x');
	}
};
var _rtfeldman$elm_css$Css_Structure_Output$namespaceToString = function (_p21) {
	var _p22 = _p21;
	return A2(
		_elm_lang$core$Basics_ops['++'],
		'@namespace ',
		A2(
			_elm_lang$core$Basics_ops['++'],
			_p22._0,
			A2(
				_elm_lang$core$Basics_ops['++'],
				'\"',
				A2(_elm_lang$core$Basics_ops['++'], _p22._1, '\"'))));
};
var _rtfeldman$elm_css$Css_Structure_Output$importToString = function (_p23) {
	var _p24 = _p23;
	return A2(
		_elm_lang$core$Basics_ops['++'],
		'@import \"',
		A2(
			_elm_lang$core$Basics_ops['++'],
			_p24._0,
			A2(
				_elm_lang$core$Basics_ops['++'],
				_elm_lang$core$Basics$toString(_p24._1),
				'\"')));
};
var _rtfeldman$elm_css$Css_Structure_Output$charsetToString = function (charset) {
	return A2(
		_elm_lang$core$Maybe$withDefault,
		'',
		A2(
			_elm_lang$core$Maybe$map,
			function (str) {
				return A2(
					_elm_lang$core$Basics_ops['++'],
					'@charset \"',
					A2(_elm_lang$core$Basics_ops['++'], str, '\"'));
			},
			charset));
};
var _rtfeldman$elm_css$Css_Structure_Output$prettyPrint = function (_p25) {
	var _p26 = _p25;
	return A2(
		_elm_lang$core$String$join,
		'\n\n',
		A2(
			_elm_lang$core$List$filter,
			function (_p27) {
				return !_elm_lang$core$String$isEmpty(_p27);
			},
			{
				ctor: '::',
				_0: _rtfeldman$elm_css$Css_Structure_Output$charsetToString(_p26.charset),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$core$String$join,
						'\n',
						A2(_elm_lang$core$List$map, _rtfeldman$elm_css$Css_Structure_Output$importToString, _p26.imports)),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$core$String$join,
							'\n',
							A2(_elm_lang$core$List$map, _rtfeldman$elm_css$Css_Structure_Output$namespaceToString, _p26.namespaces)),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$core$String$join,
								'\n\n',
								A2(_elm_lang$core$List$map, _rtfeldman$elm_css$Css_Structure_Output$prettyPrintDeclaration, _p26.declarations)),
							_1: {ctor: '[]'}
						}
					}
				}
			}));
};

var _rtfeldman$elm_css$Css_Preprocess_Resolve$oneOf = function (maybes) {
	oneOf:
	while (true) {
		var _p0 = maybes;
		if (_p0.ctor === '[]') {
			return _elm_lang$core$Maybe$Nothing;
		} else {
			var _p2 = _p0._0;
			var _p1 = _p2;
			if (_p1.ctor === 'Nothing') {
				var _v2 = _p0._1;
				maybes = _v2;
				continue oneOf;
			} else {
				return _p2;
			}
		}
	}
};
var _rtfeldman$elm_css$Css_Preprocess_Resolve$collectSelectors = function (declarations) {
	collectSelectors:
	while (true) {
		var _p3 = declarations;
		if (_p3.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			if (_p3._0.ctor === 'StyleBlockDeclaration') {
				return A2(
					_elm_lang$core$Basics_ops['++'],
					{ctor: '::', _0: _p3._0._0._0, _1: _p3._0._0._1},
					_rtfeldman$elm_css$Css_Preprocess_Resolve$collectSelectors(_p3._1));
			} else {
				var _v4 = _p3._1;
				declarations = _v4;
				continue collectSelectors;
			}
		}
	}
};
var _rtfeldman$elm_css$Css_Preprocess_Resolve$extractWarning = function (_p4) {
	var _p5 = _p4;
	return {
		ctor: '_Tuple2',
		_0: _p5.warnings,
		_1: {key: _p5.key, value: _p5.value, important: _p5.important}
	};
};
var _rtfeldman$elm_css$Css_Preprocess_Resolve$extractWarnings = function (properties) {
	return {
		ctor: '_Tuple2',
		_0: A2(
			_elm_lang$core$List$concatMap,
			function (_) {
				return _.warnings;
			},
			properties),
		_1: A2(
			_elm_lang$core$List$map,
			function (prop) {
				return _elm_lang$core$Tuple$second(
					_rtfeldman$elm_css$Css_Preprocess_Resolve$extractWarning(prop));
			},
			properties)
	};
};
var _rtfeldman$elm_css$Css_Preprocess_Resolve$toDocumentRule = F5(
	function (str1, str2, str3, str4, declaration) {
		var _p6 = declaration;
		if (_p6.ctor === 'StyleBlockDeclaration') {
			return A5(_rtfeldman$elm_css$Css_Structure$DocumentRule, str1, str2, str3, str4, _p6._0);
		} else {
			return declaration;
		}
	});
var _rtfeldman$elm_css$Css_Preprocess_Resolve$lastDeclaration = function (declarations) {
	lastDeclaration:
	while (true) {
		var _p7 = declarations;
		if (_p7.ctor === '[]') {
			return _elm_lang$core$Maybe$Nothing;
		} else {
			if (_p7._1.ctor === '[]') {
				return _elm_lang$core$Maybe$Just(
					{
						ctor: '::',
						_0: _p7._0,
						_1: {ctor: '[]'}
					});
			} else {
				var _v8 = _p7._1;
				declarations = _v8;
				continue lastDeclaration;
			}
		}
	}
};
var _rtfeldman$elm_css$Css_Preprocess_Resolve$concatDeclarationsAndWarnings = function (declarationsAndWarnings) {
	var _p8 = declarationsAndWarnings;
	if (_p8.ctor === '[]') {
		return {
			declarations: {ctor: '[]'},
			warnings: {ctor: '[]'}
		};
	} else {
		var result = _rtfeldman$elm_css$Css_Preprocess_Resolve$concatDeclarationsAndWarnings(_p8._1);
		return {
			declarations: A2(_elm_lang$core$Basics_ops['++'], _p8._0.declarations, result.declarations),
			warnings: A2(_elm_lang$core$Basics_ops['++'], _p8._0.warnings, result.warnings)
		};
	}
};
var _rtfeldman$elm_css$Css_Preprocess_Resolve$resolveFontFeatureValues = function (tuples) {
	var expandTuples = function (tuplesToExpand) {
		var _p9 = tuplesToExpand;
		if (_p9.ctor === '[]') {
			return {
				ctor: '_Tuple2',
				_0: {ctor: '[]'},
				_1: {ctor: '[]'}
			};
		} else {
			var _p10 = expandTuples(_p9._1);
			var nextWarnings = _p10._0;
			var nextTuples = _p10._1;
			var _p11 = _rtfeldman$elm_css$Css_Preprocess_Resolve$extractWarnings(_p9._0._1);
			var warnings = _p11._0;
			var properties = _p11._1;
			return {
				ctor: '_Tuple2',
				_0: A2(_elm_lang$core$Basics_ops['++'], warnings, nextWarnings),
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: _p9._0._0, _1: properties},
					_1: nextTuples
				}
			};
		}
	};
	var _p12 = expandTuples(tuples);
	var warnings = _p12._0;
	var newTuples = _p12._1;
	return {
		declarations: {
			ctor: '::',
			_0: _rtfeldman$elm_css$Css_Structure$FontFeatureValues(newTuples),
			_1: {ctor: '[]'}
		},
		warnings: warnings
	};
};
var _rtfeldman$elm_css$Css_Preprocess_Resolve$resolveCounterStyle = function (counterStyleProperties) {
	var _p13 = _rtfeldman$elm_css$Css_Preprocess_Resolve$extractWarnings(counterStyleProperties);
	var warnings = _p13._0;
	var properties = _p13._1;
	return {
		declarations: {
			ctor: '::',
			_0: _rtfeldman$elm_css$Css_Structure$Viewport(properties),
			_1: {ctor: '[]'}
		},
		warnings: warnings
	};
};
var _rtfeldman$elm_css$Css_Preprocess_Resolve$resolveViewport = function (viewportProperties) {
	var _p14 = _rtfeldman$elm_css$Css_Preprocess_Resolve$extractWarnings(viewportProperties);
	var warnings = _p14._0;
	var properties = _p14._1;
	return {
		declarations: {
			ctor: '::',
			_0: _rtfeldman$elm_css$Css_Structure$Viewport(properties),
			_1: {ctor: '[]'}
		},
		warnings: warnings
	};
};
var _rtfeldman$elm_css$Css_Preprocess_Resolve$resolveKeyframes = F2(
	function (str, properties) {
		return {
			declarations: {
				ctor: '::',
				_0: A2(_rtfeldman$elm_css$Css_Structure$Keyframes, str, properties),
				_1: {ctor: '[]'}
			},
			warnings: {ctor: '[]'}
		};
	});
var _rtfeldman$elm_css$Css_Preprocess_Resolve$resolveFontFace = function (fontFaceProperties) {
	var _p15 = _rtfeldman$elm_css$Css_Preprocess_Resolve$extractWarnings(fontFaceProperties);
	var warnings = _p15._0;
	var properties = _p15._1;
	return {
		declarations: {
			ctor: '::',
			_0: _rtfeldman$elm_css$Css_Structure$FontFace(properties),
			_1: {ctor: '[]'}
		},
		warnings: warnings
	};
};
var _rtfeldman$elm_css$Css_Preprocess_Resolve$resolvePageRule = F2(
	function (str, pageRuleProperties) {
		var _p16 = _rtfeldman$elm_css$Css_Preprocess_Resolve$extractWarnings(pageRuleProperties);
		var warnings = _p16._0;
		var properties = _p16._1;
		return {
			declarations: {
				ctor: '::',
				_0: A2(_rtfeldman$elm_css$Css_Structure$PageRule, str, properties),
				_1: {ctor: '[]'}
			},
			warnings: warnings
		};
	});
var _rtfeldman$elm_css$Css_Preprocess_Resolve$toMediaRule = F2(
	function (mediaQueries, declaration) {
		var _p17 = declaration;
		switch (_p17.ctor) {
			case 'StyleBlockDeclaration':
				return A2(
					_rtfeldman$elm_css$Css_Structure$MediaRule,
					mediaQueries,
					{
						ctor: '::',
						_0: _p17._0,
						_1: {ctor: '[]'}
					});
			case 'MediaRule':
				return A2(
					_rtfeldman$elm_css$Css_Structure$MediaRule,
					A2(_elm_lang$core$Basics_ops['++'], mediaQueries, _p17._0),
					_p17._1);
			case 'SupportsRule':
				return A2(
					_rtfeldman$elm_css$Css_Structure$SupportsRule,
					_p17._0,
					A2(
						_elm_lang$core$List$map,
						_rtfeldman$elm_css$Css_Preprocess_Resolve$toMediaRule(mediaQueries),
						_p17._1));
			case 'DocumentRule':
				return A5(_rtfeldman$elm_css$Css_Structure$DocumentRule, _p17._0, _p17._1, _p17._2, _p17._3, _p17._4);
			case 'PageRule':
				return declaration;
			case 'FontFace':
				return declaration;
			case 'Keyframes':
				return declaration;
			case 'Viewport':
				return declaration;
			case 'CounterStyle':
				return declaration;
			default:
				return declaration;
		}
	});
var _rtfeldman$elm_css$Css_Preprocess_Resolve$resolveMediaRule = F2(
	function (mediaQueries, styleBlocks) {
		var handleStyleBlock = function (styleBlock) {
			var _p18 = _rtfeldman$elm_css$Css_Preprocess_Resolve$expandStyleBlock(styleBlock);
			var declarations = _p18.declarations;
			var warnings = _p18.warnings;
			return {
				declarations: A2(
					_elm_lang$core$List$map,
					_rtfeldman$elm_css$Css_Preprocess_Resolve$toMediaRule(mediaQueries),
					declarations),
				warnings: warnings
			};
		};
		var results = A2(_elm_lang$core$List$map, handleStyleBlock, styleBlocks);
		return {
			warnings: A2(
				_elm_lang$core$List$concatMap,
				function (_) {
					return _.warnings;
				},
				results),
			declarations: A2(
				_elm_lang$core$List$concatMap,
				function (_) {
					return _.declarations;
				},
				results)
		};
	});
var _rtfeldman$elm_css$Css_Preprocess_Resolve$expandStyleBlock = function (_p19) {
	var _p20 = _p19;
	return A2(
		_rtfeldman$elm_css$Css_Preprocess_Resolve$applyMixins,
		_p20._2,
		{
			ctor: '::',
			_0: _rtfeldman$elm_css$Css_Structure$StyleBlockDeclaration(
				A3(
					_rtfeldman$elm_css$Css_Structure$StyleBlock,
					_p20._0,
					_p20._1,
					{ctor: '[]'})),
			_1: {ctor: '[]'}
		});
};
var _rtfeldman$elm_css$Css_Preprocess_Resolve$applyMixins = F2(
	function (mixins, declarations) {
		applyMixins:
		while (true) {
			var _p21 = mixins;
			if (_p21.ctor === '[]') {
				return {
					declarations: declarations,
					warnings: {ctor: '[]'}
				};
			} else {
				switch (_p21._0.ctor) {
					case 'AppendProperty':
						var _p22 = _rtfeldman$elm_css$Css_Preprocess_Resolve$extractWarning(_p21._0._0);
						var warnings = _p22._0;
						var property = _p22._1;
						var result = A2(
							_rtfeldman$elm_css$Css_Preprocess_Resolve$applyMixins,
							_p21._1,
							A2(_rtfeldman$elm_css$Css_Structure$appendProperty, property, declarations));
						return {
							declarations: result.declarations,
							warnings: A2(_elm_lang$core$Basics_ops['++'], warnings, result.warnings)
						};
					case 'ExtendSelector':
						return A4(
							_rtfeldman$elm_css$Css_Preprocess_Resolve$applyNestedMixinsToLast,
							_p21._0._1,
							_p21._1,
							_rtfeldman$elm_css$Css_Structure$appendRepeatableToLastSelector(_p21._0._0),
							declarations);
					case 'NestSnippet':
						var chain = F2(
							function (_p24, _p23) {
								var _p25 = _p24;
								var _p26 = _p23;
								return A3(
									_rtfeldman$elm_css$Css_Structure$Selector,
									_p25._0,
									A2(
										_elm_lang$core$Basics_ops['++'],
										_p25._1,
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: _p21._0._0, _1: _p26._0},
											_1: _p26._1
										}),
									_rtfeldman$elm_css$Css_Preprocess_Resolve$oneOf(
										{
											ctor: '::',
											_0: _p26._2,
											_1: {
												ctor: '::',
												_0: _p25._2,
												_1: {ctor: '[]'}
											}
										}));
							});
						var expandDeclaration = function (declaration) {
							var _p27 = declaration;
							switch (_p27.ctor) {
								case 'StyleBlockDeclaration':
									var newSelectors = A2(
										_elm_lang$core$List$concatMap,
										function (originalSelector) {
											return A2(
												_elm_lang$core$List$map,
												chain(originalSelector),
												{ctor: '::', _0: _p27._0._0, _1: _p27._0._1});
										},
										_rtfeldman$elm_css$Css_Preprocess_Resolve$collectSelectors(declarations));
									var newDeclarations = function () {
										var _p28 = newSelectors;
										if (_p28.ctor === '[]') {
											return {ctor: '[]'};
										} else {
											return {
												ctor: '::',
												_0: _rtfeldman$elm_css$Css_Structure$StyleBlockDeclaration(
													A3(
														_rtfeldman$elm_css$Css_Structure$StyleBlock,
														_p28._0,
														_p28._1,
														{ctor: '[]'})),
												_1: {ctor: '[]'}
											};
										}
									}();
									return _rtfeldman$elm_css$Css_Preprocess_Resolve$concatDeclarationsAndWarnings(
										{
											ctor: '::',
											_0: A2(_rtfeldman$elm_css$Css_Preprocess_Resolve$applyMixins, _p27._0._2, newDeclarations),
											_1: {ctor: '[]'}
										});
								case 'MediaRule':
									return A2(_rtfeldman$elm_css$Css_Preprocess_Resolve$resolveMediaRule, _p27._0, _p27._1);
								case 'SupportsRule':
									return A2(_rtfeldman$elm_css$Css_Preprocess_Resolve$resolveSupportsRule, _p27._0, _p27._1);
								case 'DocumentRule':
									return A5(_rtfeldman$elm_css$Css_Preprocess_Resolve$resolveDocumentRule, _p27._0, _p27._1, _p27._2, _p27._3, _p27._4);
								case 'PageRule':
									return A2(_rtfeldman$elm_css$Css_Preprocess_Resolve$resolvePageRule, _p27._0, _p27._1);
								case 'FontFace':
									return _rtfeldman$elm_css$Css_Preprocess_Resolve$resolveFontFace(_p27._0);
								case 'Keyframes':
									return A2(_rtfeldman$elm_css$Css_Preprocess_Resolve$resolveKeyframes, _p27._0, _p27._1);
								case 'Viewport':
									return _rtfeldman$elm_css$Css_Preprocess_Resolve$resolveViewport(_p27._0);
								case 'CounterStyle':
									return _rtfeldman$elm_css$Css_Preprocess_Resolve$resolveCounterStyle(_p27._0);
								default:
									return _rtfeldman$elm_css$Css_Preprocess_Resolve$resolveFontFeatureValues(_p27._0);
							}
						};
						return _rtfeldman$elm_css$Css_Preprocess_Resolve$concatDeclarationsAndWarnings(
							A2(
								F2(
									function (x, y) {
										return A2(_elm_lang$core$Basics_ops['++'], x, y);
									}),
								{
									ctor: '::',
									_0: A2(_rtfeldman$elm_css$Css_Preprocess_Resolve$applyMixins, _p21._1, declarations),
									_1: {ctor: '[]'}
								},
								A2(
									_elm_lang$core$List$map,
									expandDeclaration,
									A2(_elm_lang$core$List$concatMap, _rtfeldman$elm_css$Css_Preprocess$unwrapSnippet, _p21._0._1))));
					case 'WithPseudoElement':
						return A4(
							_rtfeldman$elm_css$Css_Preprocess_Resolve$applyNestedMixinsToLast,
							_p21._0._1,
							_p21._1,
							_rtfeldman$elm_css$Css_Structure$appendPseudoElementToLastSelector(_p21._0._0),
							declarations);
					case 'WithMedia':
						var newDeclarations = function () {
							var _p29 = _rtfeldman$elm_css$Css_Preprocess_Resolve$collectSelectors(declarations);
							if (_p29.ctor === '[]') {
								return {ctor: '[]'};
							} else {
								return {
									ctor: '::',
									_0: A2(
										_rtfeldman$elm_css$Css_Structure$MediaRule,
										_p21._0._0,
										{
											ctor: '::',
											_0: A3(
												_rtfeldman$elm_css$Css_Structure$StyleBlock,
												_p29._0,
												_p29._1,
												{ctor: '[]'}),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								};
							}
						}();
						return _rtfeldman$elm_css$Css_Preprocess_Resolve$concatDeclarationsAndWarnings(
							{
								ctor: '::',
								_0: A2(_rtfeldman$elm_css$Css_Preprocess_Resolve$applyMixins, _p21._1, declarations),
								_1: {
									ctor: '::',
									_0: A2(_rtfeldman$elm_css$Css_Preprocess_Resolve$applyMixins, _p21._0._1, newDeclarations),
									_1: {ctor: '[]'}
								}
							});
					default:
						var _v19 = A2(_elm_lang$core$Basics_ops['++'], _p21._0._0, _p21._1),
							_v20 = declarations;
						mixins = _v19;
						declarations = _v20;
						continue applyMixins;
				}
			}
		}
	});
var _rtfeldman$elm_css$Css_Preprocess_Resolve$applyNestedMixinsToLast = F4(
	function (nestedMixins, rest, f, declarations) {
		var withoutParent = function (decls) {
			return A2(
				_elm_lang$core$Maybe$withDefault,
				{ctor: '[]'},
				_elm_lang$core$List$tail(decls));
		};
		var nextResult = A2(
			_rtfeldman$elm_css$Css_Preprocess_Resolve$applyMixins,
			rest,
			A2(
				_elm_lang$core$Maybe$withDefault,
				{ctor: '[]'},
				_rtfeldman$elm_css$Css_Preprocess_Resolve$lastDeclaration(declarations)));
		var newDeclarations = function () {
			var _p30 = {
				ctor: '_Tuple2',
				_0: _elm_lang$core$List$head(nextResult.declarations),
				_1: _elm_lang$core$List$head(
					_elm_lang$core$List$reverse(declarations))
			};
			if (((_p30.ctor === '_Tuple2') && (_p30._0.ctor === 'Just')) && (_p30._1.ctor === 'Just')) {
				var _p32 = _p30._1._0;
				var _p31 = _p30._0._0;
				return A2(
					_elm_lang$core$Basics_ops['++'],
					A2(
						_elm_lang$core$List$take,
						_elm_lang$core$List$length(declarations) - 1,
						declarations),
					{
						ctor: '::',
						_0: (!_elm_lang$core$Native_Utils.eq(_p32, _p31)) ? _p31 : _p32,
						_1: {ctor: '[]'}
					});
			} else {
				return declarations;
			}
		}();
		var handleInitial = function (declarationsAndWarnings) {
			var result = A2(_rtfeldman$elm_css$Css_Preprocess_Resolve$applyMixins, nestedMixins, declarationsAndWarnings.declarations);
			return {
				warnings: A2(_elm_lang$core$Basics_ops['++'], declarationsAndWarnings.warnings, result.warnings),
				declarations: result.declarations
			};
		};
		var insertMixinsToNestedDecl = function (lastDecl) {
			return _rtfeldman$elm_css$Css_Preprocess_Resolve$concatDeclarationsAndWarnings(
				A2(
					_rtfeldman$elm_css$Css_Structure$mapLast,
					handleInitial,
					A2(
						_elm_lang$core$List$map,
						function (declaration) {
							return {
								declarations: {
									ctor: '::',
									_0: declaration,
									_1: {ctor: '[]'}
								},
								warnings: {ctor: '[]'}
							};
						},
						A2(_rtfeldman$elm_css$Css_Structure$concatMapLastStyleBlock, f, lastDecl))));
		};
		var initialResult = A2(
			_elm_lang$core$Maybe$withDefault,
			{
				warnings: {ctor: '[]'},
				declarations: {ctor: '[]'}
			},
			A2(
				_elm_lang$core$Maybe$map,
				insertMixinsToNestedDecl,
				_rtfeldman$elm_css$Css_Preprocess_Resolve$lastDeclaration(declarations)));
		return {
			warnings: A2(_elm_lang$core$Basics_ops['++'], initialResult.warnings, nextResult.warnings),
			declarations: A2(
				_elm_lang$core$Basics_ops['++'],
				newDeclarations,
				A2(
					_elm_lang$core$Basics_ops['++'],
					withoutParent(initialResult.declarations),
					withoutParent(nextResult.declarations)))
		};
	});
var _rtfeldman$elm_css$Css_Preprocess_Resolve$resolveDocumentRule = F5(
	function (str1, str2, str3, str4, styleBlock) {
		var _p33 = _rtfeldman$elm_css$Css_Preprocess_Resolve$expandStyleBlock(styleBlock);
		var declarations = _p33.declarations;
		var warnings = _p33.warnings;
		return {
			declarations: A2(
				_elm_lang$core$List$map,
				A4(_rtfeldman$elm_css$Css_Preprocess_Resolve$toDocumentRule, str1, str2, str3, str4),
				declarations),
			warnings: warnings
		};
	});
var _rtfeldman$elm_css$Css_Preprocess_Resolve$resolveSupportsRule = F2(
	function (str, snippets) {
		var _p34 = _rtfeldman$elm_css$Css_Preprocess_Resolve$extract(
			A2(_elm_lang$core$List$concatMap, _rtfeldman$elm_css$Css_Preprocess$unwrapSnippet, snippets));
		var declarations = _p34.declarations;
		var warnings = _p34.warnings;
		return {
			declarations: {
				ctor: '::',
				_0: A2(_rtfeldman$elm_css$Css_Structure$SupportsRule, str, declarations),
				_1: {ctor: '[]'}
			},
			warnings: warnings
		};
	});
var _rtfeldman$elm_css$Css_Preprocess_Resolve$extract = function (snippetDeclarations) {
	var _p35 = snippetDeclarations;
	if (_p35.ctor === '[]') {
		return {
			declarations: {ctor: '[]'},
			warnings: {ctor: '[]'}
		};
	} else {
		var _p36 = _rtfeldman$elm_css$Css_Preprocess_Resolve$toDeclarations(_p35._0);
		var declarations = _p36.declarations;
		var warnings = _p36.warnings;
		var nextResult = _rtfeldman$elm_css$Css_Preprocess_Resolve$extract(_p35._1);
		return {
			declarations: A2(_elm_lang$core$Basics_ops['++'], declarations, nextResult.declarations),
			warnings: A2(_elm_lang$core$Basics_ops['++'], warnings, nextResult.warnings)
		};
	}
};
var _rtfeldman$elm_css$Css_Preprocess_Resolve$toDeclarations = function (snippetDeclaration) {
	var _p37 = snippetDeclaration;
	switch (_p37.ctor) {
		case 'StyleBlockDeclaration':
			return _rtfeldman$elm_css$Css_Preprocess_Resolve$expandStyleBlock(_p37._0);
		case 'MediaRule':
			return A2(_rtfeldman$elm_css$Css_Preprocess_Resolve$resolveMediaRule, _p37._0, _p37._1);
		case 'SupportsRule':
			return A2(_rtfeldman$elm_css$Css_Preprocess_Resolve$resolveSupportsRule, _p37._0, _p37._1);
		case 'DocumentRule':
			return A5(_rtfeldman$elm_css$Css_Preprocess_Resolve$resolveDocumentRule, _p37._0, _p37._1, _p37._2, _p37._3, _p37._4);
		case 'PageRule':
			return A2(_rtfeldman$elm_css$Css_Preprocess_Resolve$resolvePageRule, _p37._0, _p37._1);
		case 'FontFace':
			return _rtfeldman$elm_css$Css_Preprocess_Resolve$resolveFontFace(_p37._0);
		case 'Keyframes':
			return A2(_rtfeldman$elm_css$Css_Preprocess_Resolve$resolveKeyframes, _p37._0, _p37._1);
		case 'Viewport':
			return _rtfeldman$elm_css$Css_Preprocess_Resolve$resolveViewport(_p37._0);
		case 'CounterStyle':
			return _rtfeldman$elm_css$Css_Preprocess_Resolve$resolveCounterStyle(_p37._0);
		default:
			return _rtfeldman$elm_css$Css_Preprocess_Resolve$resolveFontFeatureValues(_p37._0);
	}
};
var _rtfeldman$elm_css$Css_Preprocess_Resolve$toStructure = function (_p38) {
	var _p39 = _p38;
	var _p40 = _rtfeldman$elm_css$Css_Preprocess_Resolve$extract(
		A2(_elm_lang$core$List$concatMap, _rtfeldman$elm_css$Css_Preprocess$unwrapSnippet, _p39.snippets));
	var warnings = _p40.warnings;
	var declarations = _p40.declarations;
	return {
		ctor: '_Tuple2',
		_0: {charset: _p39.charset, imports: _p39.imports, namespaces: _p39.namespaces, declarations: declarations},
		_1: warnings
	};
};
var _rtfeldman$elm_css$Css_Preprocess_Resolve$compile1 = function (sheet) {
	var _p41 = _rtfeldman$elm_css$Css_Preprocess_Resolve$toStructure(sheet);
	var structureStylesheet = _p41._0;
	var warnings = _p41._1;
	return {
		warnings: warnings,
		css: _rtfeldman$elm_css$Css_Structure_Output$prettyPrint(
			_rtfeldman$elm_css$Css_Structure$dropEmpty(structureStylesheet))
	};
};
var _rtfeldman$elm_css$Css_Preprocess_Resolve$compile = function (styles) {
	var results = A2(_elm_lang$core$List$map, _rtfeldman$elm_css$Css_Preprocess_Resolve$compile1, styles);
	return {
		warnings: A2(
			_elm_lang$core$List$concatMap,
			function (_) {
				return _.warnings;
			},
			results),
		css: A2(
			_elm_lang$core$String$join,
			'\n\n',
			A2(
				_elm_lang$core$List$map,
				function (_) {
					return _.css;
				},
				results))
	};
};
var _rtfeldman$elm_css$Css_Preprocess_Resolve$DeclarationsAndWarnings = F2(
	function (a, b) {
		return {declarations: a, warnings: b};
	});

var _rtfeldman$hex$Hex$toString = function (num) {
	return _elm_lang$core$String$fromList(
		(_elm_lang$core$Native_Utils.cmp(num, 0) < 0) ? {
			ctor: '::',
			_0: _elm_lang$core$Native_Utils.chr('-'),
			_1: A2(
				_rtfeldman$hex$Hex$unsafePositiveToDigits,
				{ctor: '[]'},
				_elm_lang$core$Basics$negate(num))
		} : A2(
			_rtfeldman$hex$Hex$unsafePositiveToDigits,
			{ctor: '[]'},
			num));
};
var _rtfeldman$hex$Hex$unsafePositiveToDigits = F2(
	function (digits, num) {
		unsafePositiveToDigits:
		while (true) {
			if (_elm_lang$core$Native_Utils.cmp(num, 16) < 0) {
				return {
					ctor: '::',
					_0: _rtfeldman$hex$Hex$unsafeToDigit(num),
					_1: digits
				};
			} else {
				var _v0 = {
					ctor: '::',
					_0: _rtfeldman$hex$Hex$unsafeToDigit(
						A2(_elm_lang$core$Basics_ops['%'], num, 16)),
					_1: digits
				},
					_v1 = (num / 16) | 0;
				digits = _v0;
				num = _v1;
				continue unsafePositiveToDigits;
			}
		}
	});
var _rtfeldman$hex$Hex$unsafeToDigit = function (num) {
	var _p0 = num;
	switch (_p0) {
		case 0:
			return _elm_lang$core$Native_Utils.chr('0');
		case 1:
			return _elm_lang$core$Native_Utils.chr('1');
		case 2:
			return _elm_lang$core$Native_Utils.chr('2');
		case 3:
			return _elm_lang$core$Native_Utils.chr('3');
		case 4:
			return _elm_lang$core$Native_Utils.chr('4');
		case 5:
			return _elm_lang$core$Native_Utils.chr('5');
		case 6:
			return _elm_lang$core$Native_Utils.chr('6');
		case 7:
			return _elm_lang$core$Native_Utils.chr('7');
		case 8:
			return _elm_lang$core$Native_Utils.chr('8');
		case 9:
			return _elm_lang$core$Native_Utils.chr('9');
		case 10:
			return _elm_lang$core$Native_Utils.chr('a');
		case 11:
			return _elm_lang$core$Native_Utils.chr('b');
		case 12:
			return _elm_lang$core$Native_Utils.chr('c');
		case 13:
			return _elm_lang$core$Native_Utils.chr('d');
		case 14:
			return _elm_lang$core$Native_Utils.chr('e');
		case 15:
			return _elm_lang$core$Native_Utils.chr('f');
		default:
			return _elm_lang$core$Native_Utils.crashCase(
				'Hex',
				{
					start: {line: 138, column: 5},
					end: {line: 188, column: 84}
				},
				_p0)(
				A2(
					_elm_lang$core$Basics_ops['++'],
					'Tried to convert ',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_rtfeldman$hex$Hex$toString(num),
						' to hexadecimal.')));
	}
};
var _rtfeldman$hex$Hex$fromStringHelp = F3(
	function (position, chars, accumulated) {
		var _p2 = chars;
		if (_p2.ctor === '[]') {
			return _elm_lang$core$Result$Ok(accumulated);
		} else {
			var recurse = function (additional) {
				return A3(
					_rtfeldman$hex$Hex$fromStringHelp,
					position - 1,
					_p2._1,
					accumulated + (additional * Math.pow(16, position)));
			};
			var _p3 = _p2._0;
			switch (_p3.valueOf()) {
				case '0':
					return recurse(0);
				case '1':
					return recurse(1);
				case '2':
					return recurse(2);
				case '3':
					return recurse(3);
				case '4':
					return recurse(4);
				case '5':
					return recurse(5);
				case '6':
					return recurse(6);
				case '7':
					return recurse(7);
				case '8':
					return recurse(8);
				case '9':
					return recurse(9);
				case 'a':
					return recurse(10);
				case 'b':
					return recurse(11);
				case 'c':
					return recurse(12);
				case 'd':
					return recurse(13);
				case 'e':
					return recurse(14);
				case 'f':
					return recurse(15);
				default:
					return _elm_lang$core$Result$Err(
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$Basics$toString(_p3),
							' is not a valid hexadecimal character.'));
			}
		}
	});
var _rtfeldman$hex$Hex$fromString = function (str) {
	if (_elm_lang$core$String$isEmpty(str)) {
		return _elm_lang$core$Result$Err('Empty strings are not valid hexadecimal strings.');
	} else {
		var formatError = function (err) {
			return A2(
				_elm_lang$core$String$join,
				' ',
				{
					ctor: '::',
					_0: _elm_lang$core$Basics$toString(str),
					_1: {
						ctor: '::',
						_0: 'is not a valid hexadecimal string because',
						_1: {
							ctor: '::',
							_0: err,
							_1: {ctor: '[]'}
						}
					}
				});
		};
		var result = function () {
			if (A2(_elm_lang$core$String$startsWith, '-', str)) {
				var list = A2(
					_elm_lang$core$Maybe$withDefault,
					{ctor: '[]'},
					_elm_lang$core$List$tail(
						_elm_lang$core$String$toList(str)));
				return A2(
					_elm_lang$core$Result$map,
					_elm_lang$core$Basics$negate,
					A3(
						_rtfeldman$hex$Hex$fromStringHelp,
						_elm_lang$core$List$length(list) - 1,
						list,
						0));
			} else {
				return A3(
					_rtfeldman$hex$Hex$fromStringHelp,
					_elm_lang$core$String$length(str) - 1,
					_elm_lang$core$String$toList(str),
					0);
			}
		}();
		return A2(_elm_lang$core$Result$mapError, formatError, result);
	}
};

var _elm_lang$core$Color$fmod = F2(
	function (f, n) {
		var integer = _elm_lang$core$Basics$floor(f);
		return (_elm_lang$core$Basics$toFloat(
			A2(_elm_lang$core$Basics_ops['%'], integer, n)) + f) - _elm_lang$core$Basics$toFloat(integer);
	});
var _elm_lang$core$Color$rgbToHsl = F3(
	function (red, green, blue) {
		var b = _elm_lang$core$Basics$toFloat(blue) / 255;
		var g = _elm_lang$core$Basics$toFloat(green) / 255;
		var r = _elm_lang$core$Basics$toFloat(red) / 255;
		var cMax = A2(
			_elm_lang$core$Basics$max,
			A2(_elm_lang$core$Basics$max, r, g),
			b);
		var cMin = A2(
			_elm_lang$core$Basics$min,
			A2(_elm_lang$core$Basics$min, r, g),
			b);
		var c = cMax - cMin;
		var lightness = (cMax + cMin) / 2;
		var saturation = _elm_lang$core$Native_Utils.eq(lightness, 0) ? 0 : (c / (1 - _elm_lang$core$Basics$abs((2 * lightness) - 1)));
		var hue = _elm_lang$core$Basics$degrees(60) * (_elm_lang$core$Native_Utils.eq(cMax, r) ? A2(_elm_lang$core$Color$fmod, (g - b) / c, 6) : (_elm_lang$core$Native_Utils.eq(cMax, g) ? (((b - r) / c) + 2) : (((r - g) / c) + 4)));
		return {ctor: '_Tuple3', _0: hue, _1: saturation, _2: lightness};
	});
var _elm_lang$core$Color$hslToRgb = F3(
	function (hue, saturation, lightness) {
		var normHue = hue / _elm_lang$core$Basics$degrees(60);
		var chroma = (1 - _elm_lang$core$Basics$abs((2 * lightness) - 1)) * saturation;
		var x = chroma * (1 - _elm_lang$core$Basics$abs(
			A2(_elm_lang$core$Color$fmod, normHue, 2) - 1));
		var _p0 = (_elm_lang$core$Native_Utils.cmp(normHue, 0) < 0) ? {ctor: '_Tuple3', _0: 0, _1: 0, _2: 0} : ((_elm_lang$core$Native_Utils.cmp(normHue, 1) < 0) ? {ctor: '_Tuple3', _0: chroma, _1: x, _2: 0} : ((_elm_lang$core$Native_Utils.cmp(normHue, 2) < 0) ? {ctor: '_Tuple3', _0: x, _1: chroma, _2: 0} : ((_elm_lang$core$Native_Utils.cmp(normHue, 3) < 0) ? {ctor: '_Tuple3', _0: 0, _1: chroma, _2: x} : ((_elm_lang$core$Native_Utils.cmp(normHue, 4) < 0) ? {ctor: '_Tuple3', _0: 0, _1: x, _2: chroma} : ((_elm_lang$core$Native_Utils.cmp(normHue, 5) < 0) ? {ctor: '_Tuple3', _0: x, _1: 0, _2: chroma} : ((_elm_lang$core$Native_Utils.cmp(normHue, 6) < 0) ? {ctor: '_Tuple3', _0: chroma, _1: 0, _2: x} : {ctor: '_Tuple3', _0: 0, _1: 0, _2: 0}))))));
		var r = _p0._0;
		var g = _p0._1;
		var b = _p0._2;
		var m = lightness - (chroma / 2);
		return {ctor: '_Tuple3', _0: r + m, _1: g + m, _2: b + m};
	});
var _elm_lang$core$Color$toRgb = function (color) {
	var _p1 = color;
	if (_p1.ctor === 'RGBA') {
		return {red: _p1._0, green: _p1._1, blue: _p1._2, alpha: _p1._3};
	} else {
		var _p2 = A3(_elm_lang$core$Color$hslToRgb, _p1._0, _p1._1, _p1._2);
		var r = _p2._0;
		var g = _p2._1;
		var b = _p2._2;
		return {
			red: _elm_lang$core$Basics$round(255 * r),
			green: _elm_lang$core$Basics$round(255 * g),
			blue: _elm_lang$core$Basics$round(255 * b),
			alpha: _p1._3
		};
	}
};
var _elm_lang$core$Color$toHsl = function (color) {
	var _p3 = color;
	if (_p3.ctor === 'HSLA') {
		return {hue: _p3._0, saturation: _p3._1, lightness: _p3._2, alpha: _p3._3};
	} else {
		var _p4 = A3(_elm_lang$core$Color$rgbToHsl, _p3._0, _p3._1, _p3._2);
		var h = _p4._0;
		var s = _p4._1;
		var l = _p4._2;
		return {hue: h, saturation: s, lightness: l, alpha: _p3._3};
	}
};
var _elm_lang$core$Color$HSLA = F4(
	function (a, b, c, d) {
		return {ctor: 'HSLA', _0: a, _1: b, _2: c, _3: d};
	});
var _elm_lang$core$Color$hsla = F4(
	function (hue, saturation, lightness, alpha) {
		return A4(
			_elm_lang$core$Color$HSLA,
			hue - _elm_lang$core$Basics$turns(
				_elm_lang$core$Basics$toFloat(
					_elm_lang$core$Basics$floor(hue / (2 * _elm_lang$core$Basics$pi)))),
			saturation,
			lightness,
			alpha);
	});
var _elm_lang$core$Color$hsl = F3(
	function (hue, saturation, lightness) {
		return A4(_elm_lang$core$Color$hsla, hue, saturation, lightness, 1);
	});
var _elm_lang$core$Color$complement = function (color) {
	var _p5 = color;
	if (_p5.ctor === 'HSLA') {
		return A4(
			_elm_lang$core$Color$hsla,
			_p5._0 + _elm_lang$core$Basics$degrees(180),
			_p5._1,
			_p5._2,
			_p5._3);
	} else {
		var _p6 = A3(_elm_lang$core$Color$rgbToHsl, _p5._0, _p5._1, _p5._2);
		var h = _p6._0;
		var s = _p6._1;
		var l = _p6._2;
		return A4(
			_elm_lang$core$Color$hsla,
			h + _elm_lang$core$Basics$degrees(180),
			s,
			l,
			_p5._3);
	}
};
var _elm_lang$core$Color$grayscale = function (p) {
	return A4(_elm_lang$core$Color$HSLA, 0, 0, 1 - p, 1);
};
var _elm_lang$core$Color$greyscale = function (p) {
	return A4(_elm_lang$core$Color$HSLA, 0, 0, 1 - p, 1);
};
var _elm_lang$core$Color$RGBA = F4(
	function (a, b, c, d) {
		return {ctor: 'RGBA', _0: a, _1: b, _2: c, _3: d};
	});
var _elm_lang$core$Color$rgba = _elm_lang$core$Color$RGBA;
var _elm_lang$core$Color$rgb = F3(
	function (r, g, b) {
		return A4(_elm_lang$core$Color$RGBA, r, g, b, 1);
	});
var _elm_lang$core$Color$lightRed = A4(_elm_lang$core$Color$RGBA, 239, 41, 41, 1);
var _elm_lang$core$Color$red = A4(_elm_lang$core$Color$RGBA, 204, 0, 0, 1);
var _elm_lang$core$Color$darkRed = A4(_elm_lang$core$Color$RGBA, 164, 0, 0, 1);
var _elm_lang$core$Color$lightOrange = A4(_elm_lang$core$Color$RGBA, 252, 175, 62, 1);
var _elm_lang$core$Color$orange = A4(_elm_lang$core$Color$RGBA, 245, 121, 0, 1);
var _elm_lang$core$Color$darkOrange = A4(_elm_lang$core$Color$RGBA, 206, 92, 0, 1);
var _elm_lang$core$Color$lightYellow = A4(_elm_lang$core$Color$RGBA, 255, 233, 79, 1);
var _elm_lang$core$Color$yellow = A4(_elm_lang$core$Color$RGBA, 237, 212, 0, 1);
var _elm_lang$core$Color$darkYellow = A4(_elm_lang$core$Color$RGBA, 196, 160, 0, 1);
var _elm_lang$core$Color$lightGreen = A4(_elm_lang$core$Color$RGBA, 138, 226, 52, 1);
var _elm_lang$core$Color$green = A4(_elm_lang$core$Color$RGBA, 115, 210, 22, 1);
var _elm_lang$core$Color$darkGreen = A4(_elm_lang$core$Color$RGBA, 78, 154, 6, 1);
var _elm_lang$core$Color$lightBlue = A4(_elm_lang$core$Color$RGBA, 114, 159, 207, 1);
var _elm_lang$core$Color$blue = A4(_elm_lang$core$Color$RGBA, 52, 101, 164, 1);
var _elm_lang$core$Color$darkBlue = A4(_elm_lang$core$Color$RGBA, 32, 74, 135, 1);
var _elm_lang$core$Color$lightPurple = A4(_elm_lang$core$Color$RGBA, 173, 127, 168, 1);
var _elm_lang$core$Color$purple = A4(_elm_lang$core$Color$RGBA, 117, 80, 123, 1);
var _elm_lang$core$Color$darkPurple = A4(_elm_lang$core$Color$RGBA, 92, 53, 102, 1);
var _elm_lang$core$Color$lightBrown = A4(_elm_lang$core$Color$RGBA, 233, 185, 110, 1);
var _elm_lang$core$Color$brown = A4(_elm_lang$core$Color$RGBA, 193, 125, 17, 1);
var _elm_lang$core$Color$darkBrown = A4(_elm_lang$core$Color$RGBA, 143, 89, 2, 1);
var _elm_lang$core$Color$black = A4(_elm_lang$core$Color$RGBA, 0, 0, 0, 1);
var _elm_lang$core$Color$white = A4(_elm_lang$core$Color$RGBA, 255, 255, 255, 1);
var _elm_lang$core$Color$lightGrey = A4(_elm_lang$core$Color$RGBA, 238, 238, 236, 1);
var _elm_lang$core$Color$grey = A4(_elm_lang$core$Color$RGBA, 211, 215, 207, 1);
var _elm_lang$core$Color$darkGrey = A4(_elm_lang$core$Color$RGBA, 186, 189, 182, 1);
var _elm_lang$core$Color$lightGray = A4(_elm_lang$core$Color$RGBA, 238, 238, 236, 1);
var _elm_lang$core$Color$gray = A4(_elm_lang$core$Color$RGBA, 211, 215, 207, 1);
var _elm_lang$core$Color$darkGray = A4(_elm_lang$core$Color$RGBA, 186, 189, 182, 1);
var _elm_lang$core$Color$lightCharcoal = A4(_elm_lang$core$Color$RGBA, 136, 138, 133, 1);
var _elm_lang$core$Color$charcoal = A4(_elm_lang$core$Color$RGBA, 85, 87, 83, 1);
var _elm_lang$core$Color$darkCharcoal = A4(_elm_lang$core$Color$RGBA, 46, 52, 54, 1);
var _elm_lang$core$Color$Radial = F5(
	function (a, b, c, d, e) {
		return {ctor: 'Radial', _0: a, _1: b, _2: c, _3: d, _4: e};
	});
var _elm_lang$core$Color$radial = _elm_lang$core$Color$Radial;
var _elm_lang$core$Color$Linear = F3(
	function (a, b, c) {
		return {ctor: 'Linear', _0: a, _1: b, _2: c};
	});
var _elm_lang$core$Color$linear = _elm_lang$core$Color$Linear;

var _rtfeldman$elm_css$Css$asPairs = _rtfeldman$elm_css$Css_Preprocess$toPropertyPairs;
var _rtfeldman$elm_css$Css$collectSelectors = function (declarations) {
	collectSelectors:
	while (true) {
		var _p0 = declarations;
		if (_p0.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			if (_p0._0.ctor === 'StyleBlockDeclaration') {
				return A2(
					_elm_lang$core$Basics_ops['++'],
					{ctor: '::', _0: _p0._0._0._0, _1: _p0._0._0._1},
					_rtfeldman$elm_css$Css$collectSelectors(_p0._1));
			} else {
				var _v1 = _p0._1;
				declarations = _v1;
				continue collectSelectors;
			}
		}
	}
};
var _rtfeldman$elm_css$Css$compile = _rtfeldman$elm_css$Css_Preprocess_Resolve$compile;
var _rtfeldman$elm_css$Css$stringsToValue = function (list) {
	return _elm_lang$core$List$isEmpty(list) ? {value: 'none'} : {
		value: A2(
			_elm_lang$core$String$join,
			', ',
			A2(
				_elm_lang$core$List$map,
				function (s) {
					return s;
				},
				list))
	};
};
var _rtfeldman$elm_css$Css$valuesOrNone = function (list) {
	return _elm_lang$core$List$isEmpty(list) ? {value: 'none'} : {
		value: A2(
			_elm_lang$core$String$join,
			' ',
			A2(
				_elm_lang$core$List$map,
				function (_) {
					return _.value;
				},
				list))
	};
};
var _rtfeldman$elm_css$Css$stringToInt = function (str) {
	return A2(
		_elm_lang$core$Result$withDefault,
		0,
		_elm_lang$core$String$toInt(str));
};
var _rtfeldman$elm_css$Css$numberToString = function (num) {
	return _elm_lang$core$Basics$toString(num + 0);
};
var _rtfeldman$elm_css$Css$numericalPercentageToString = function (value) {
	return A3(
		_elm_lang$core$Basics$flip,
		F2(
			function (x, y) {
				return A2(_elm_lang$core$Basics_ops['++'], x, y);
			}),
		'%',
		_rtfeldman$elm_css$Css$numberToString(
			A2(
				F2(
					function (x, y) {
						return x * y;
					}),
				100,
				value)));
};
var _rtfeldman$elm_css$Css$each = F2(
	function (snippetCreators, mixins) {
		var selectorsToSnippet = function (selectors) {
			var _p1 = selectors;
			if (_p1.ctor === '[]') {
				return _rtfeldman$elm_css$Css_Preprocess$Snippet(
					{ctor: '[]'});
			} else {
				return _rtfeldman$elm_css$Css_Preprocess$Snippet(
					{
						ctor: '::',
						_0: _rtfeldman$elm_css$Css_Preprocess$StyleBlockDeclaration(
							A3(_rtfeldman$elm_css$Css_Preprocess$StyleBlock, _p1._0, _p1._1, mixins)),
						_1: {ctor: '[]'}
					});
			}
		};
		return selectorsToSnippet(
			_rtfeldman$elm_css$Css$collectSelectors(
				A2(
					_elm_lang$core$List$concatMap,
					_rtfeldman$elm_css$Css_Preprocess$unwrapSnippet,
					A2(
						_elm_lang$core$List$map,
						F2(
							function (x, y) {
								return y(x);
							})(
							{ctor: '[]'}),
						snippetCreators))));
	});
var _rtfeldman$elm_css$Css$generalSiblings = _rtfeldman$elm_css$Css_Preprocess$NestSnippet(_rtfeldman$elm_css$Css_Structure$GeneralSibling);
var _rtfeldman$elm_css$Css$adjacentSiblings = _rtfeldman$elm_css$Css_Preprocess$NestSnippet(_rtfeldman$elm_css$Css_Structure$AdjacentSibling);
var _rtfeldman$elm_css$Css$descendants = _rtfeldman$elm_css$Css_Preprocess$NestSnippet(_rtfeldman$elm_css$Css_Structure$Descendant);
var _rtfeldman$elm_css$Css$withClass = function ($class) {
	return _rtfeldman$elm_css$Css_Preprocess$ExtendSelector(
		_rtfeldman$elm_css$Css_Structure$ClassSelector(
			A2(_rtfeldman$elm_css_util$Css_Helpers$identifierToString, '', $class)));
};
var _rtfeldman$elm_css$Css$children = _rtfeldman$elm_css$Css_Preprocess$NestSnippet(_rtfeldman$elm_css$Css_Structure$Child);
var _rtfeldman$elm_css$Css$pseudoElement = function (element) {
	return _rtfeldman$elm_css$Css_Preprocess$WithPseudoElement(
		_rtfeldman$elm_css$Css_Structure$PseudoElement(element));
};
var _rtfeldman$elm_css$Css$after = _rtfeldman$elm_css$Css$pseudoElement('after');
var _rtfeldman$elm_css$Css$before = _rtfeldman$elm_css$Css$pseudoElement('before');
var _rtfeldman$elm_css$Css$firstLetter = _rtfeldman$elm_css$Css$pseudoElement('first-letter');
var _rtfeldman$elm_css$Css$firstLine = _rtfeldman$elm_css$Css$pseudoElement('first-line');
var _rtfeldman$elm_css$Css$selection = _rtfeldman$elm_css$Css$pseudoElement('selection');
var _rtfeldman$elm_css$Css$pseudoClass = function ($class) {
	return _rtfeldman$elm_css$Css_Preprocess$ExtendSelector(
		_rtfeldman$elm_css$Css_Structure$PseudoClassSelector($class));
};
var _rtfeldman$elm_css$Css$active = _rtfeldman$elm_css$Css$pseudoClass('active');
var _rtfeldman$elm_css$Css$any = function (str) {
	return _rtfeldman$elm_css$Css$pseudoClass(
		A2(
			_elm_lang$core$Basics_ops['++'],
			'any(',
			A2(_elm_lang$core$Basics_ops['++'], str, ')')));
};
var _rtfeldman$elm_css$Css$checked = _rtfeldman$elm_css$Css$pseudoClass('checked');
var _rtfeldman$elm_css$Css$disabled = _rtfeldman$elm_css$Css$pseudoClass('disabled');
var _rtfeldman$elm_css$Css$empty = _rtfeldman$elm_css$Css$pseudoClass('empty');
var _rtfeldman$elm_css$Css$enabled = _rtfeldman$elm_css$Css$pseudoClass('enabled');
var _rtfeldman$elm_css$Css$first = _rtfeldman$elm_css$Css$pseudoClass('first');
var _rtfeldman$elm_css$Css$firstChild = _rtfeldman$elm_css$Css$pseudoClass('first-child');
var _rtfeldman$elm_css$Css$firstOfType = _rtfeldman$elm_css$Css$pseudoClass('first-of-type');
var _rtfeldman$elm_css$Css$fullscreen = _rtfeldman$elm_css$Css$pseudoClass('fullscreen');
var _rtfeldman$elm_css$Css$focus = _rtfeldman$elm_css$Css$pseudoClass('focus');
var _rtfeldman$elm_css$Css$hover = _rtfeldman$elm_css$Css$pseudoClass('hover');
var _rtfeldman$elm_css$Css$visited = _rtfeldman$elm_css$Css$pseudoClass('visited');
var _rtfeldman$elm_css$Css$indeterminate = _rtfeldman$elm_css$Css$pseudoClass('indeterminate');
var _rtfeldman$elm_css$Css$invalid = _rtfeldman$elm_css$Css$pseudoClass('invalid');
var _rtfeldman$elm_css$Css$lang = function (str) {
	return _rtfeldman$elm_css$Css$pseudoClass(
		A2(
			_elm_lang$core$Basics_ops['++'],
			'lang(',
			A2(_elm_lang$core$Basics_ops['++'], str, ')')));
};
var _rtfeldman$elm_css$Css$lastChild = _rtfeldman$elm_css$Css$pseudoClass('last-child');
var _rtfeldman$elm_css$Css$lastOfType = _rtfeldman$elm_css$Css$pseudoClass('last-of-type');
var _rtfeldman$elm_css$Css$link = _rtfeldman$elm_css$Css$pseudoClass('link');
var _rtfeldman$elm_css$Css$nthChild = function (str) {
	return _rtfeldman$elm_css$Css$pseudoClass(
		A2(
			_elm_lang$core$Basics_ops['++'],
			'nth-child(',
			A2(_elm_lang$core$Basics_ops['++'], str, ')')));
};
var _rtfeldman$elm_css$Css$nthLastChild = function (str) {
	return _rtfeldman$elm_css$Css$pseudoClass(
		A2(
			_elm_lang$core$Basics_ops['++'],
			'nth-last-child(',
			A2(_elm_lang$core$Basics_ops['++'], str, ')')));
};
var _rtfeldman$elm_css$Css$nthLastOfType = function (str) {
	return _rtfeldman$elm_css$Css$pseudoClass(
		A2(
			_elm_lang$core$Basics_ops['++'],
			'nth-last-of-type(',
			A2(_elm_lang$core$Basics_ops['++'], str, ')')));
};
var _rtfeldman$elm_css$Css$nthOfType = function (str) {
	return _rtfeldman$elm_css$Css$pseudoClass(
		A2(
			_elm_lang$core$Basics_ops['++'],
			'nth-of-type(',
			A2(_elm_lang$core$Basics_ops['++'], str, ')')));
};
var _rtfeldman$elm_css$Css$onlyChild = _rtfeldman$elm_css$Css$pseudoClass('only-child');
var _rtfeldman$elm_css$Css$onlyOfType = _rtfeldman$elm_css$Css$pseudoClass('only-of-type');
var _rtfeldman$elm_css$Css$optional = _rtfeldman$elm_css$Css$pseudoClass('optional');
var _rtfeldman$elm_css$Css$outOfRange = _rtfeldman$elm_css$Css$pseudoClass('out-of-range');
var _rtfeldman$elm_css$Css$readWrite = _rtfeldman$elm_css$Css$pseudoClass('read-write');
var _rtfeldman$elm_css$Css$required = _rtfeldman$elm_css$Css$pseudoClass('required');
var _rtfeldman$elm_css$Css$root = _rtfeldman$elm_css$Css$pseudoClass('root');
var _rtfeldman$elm_css$Css$scope = _rtfeldman$elm_css$Css$pseudoClass('scope');
var _rtfeldman$elm_css$Css$target = _rtfeldman$elm_css$Css$pseudoClass('target');
var _rtfeldman$elm_css$Css$valid = _rtfeldman$elm_css$Css$pseudoClass('valid');
var _rtfeldman$elm_css$Css$directionalityToString = function (directionality) {
	var _p2 = directionality;
	if (_p2.ctor === 'Ltr') {
		return 'ltr';
	} else {
		return 'rtl';
	}
};
var _rtfeldman$elm_css$Css$dir = function (directionality) {
	return _rtfeldman$elm_css$Css$pseudoClass(
		A2(
			_elm_lang$core$Basics_ops['++'],
			'dir(',
			A2(
				_elm_lang$core$Basics_ops['++'],
				_rtfeldman$elm_css$Css$directionalityToString(directionality),
				')')));
};
var _rtfeldman$elm_css$Css$propertyWithWarnings = F3(
	function (warnings, key, value) {
		return _rtfeldman$elm_css$Css_Preprocess$AppendProperty(
			{key: key, value: value, important: false, warnings: warnings});
	});
var _rtfeldman$elm_css$Css$property = _rtfeldman$elm_css$Css$propertyWithWarnings(
	{ctor: '[]'});
var _rtfeldman$elm_css$Css$makeSnippet = F2(
	function (mixins, sequence) {
		var selector = A3(
			_rtfeldman$elm_css$Css_Structure$Selector,
			sequence,
			{ctor: '[]'},
			_elm_lang$core$Maybe$Nothing);
		return _rtfeldman$elm_css$Css_Preprocess$Snippet(
			{
				ctor: '::',
				_0: _rtfeldman$elm_css$Css_Preprocess$StyleBlockDeclaration(
					A3(
						_rtfeldman$elm_css$Css_Preprocess$StyleBlock,
						selector,
						{ctor: '[]'},
						mixins)),
				_1: {ctor: '[]'}
			});
	});
var _rtfeldman$elm_css$Css$class = F2(
	function ($class, mixins) {
		return A2(
			_rtfeldman$elm_css$Css$makeSnippet,
			mixins,
			_rtfeldman$elm_css$Css_Structure$UniversalSelectorSequence(
				{
					ctor: '::',
					_0: _rtfeldman$elm_css$Css_Structure$ClassSelector(
						A2(_rtfeldman$elm_css_util$Css_Helpers$identifierToString, '', $class)),
					_1: {ctor: '[]'}
				}));
	});
var _rtfeldman$elm_css$Css$selector = F2(
	function (selectorStr, mixins) {
		return A2(
			_rtfeldman$elm_css$Css$makeSnippet,
			mixins,
			A2(
				_rtfeldman$elm_css$Css_Structure$CustomSelector,
				selectorStr,
				{ctor: '[]'}));
	});
var _rtfeldman$elm_css$Css$everything = function (mixins) {
	return A2(
		_rtfeldman$elm_css$Css$makeSnippet,
		mixins,
		_rtfeldman$elm_css$Css_Structure$UniversalSelectorSequence(
			{ctor: '[]'}));
};
var _rtfeldman$elm_css$Css$id = F2(
	function (identifier, mixins) {
		return A2(
			_rtfeldman$elm_css$Css$makeSnippet,
			mixins,
			_rtfeldman$elm_css$Css_Structure$UniversalSelectorSequence(
				{
					ctor: '::',
					_0: _rtfeldman$elm_css$Css_Structure$IdSelector(
						A2(_rtfeldman$elm_css_util$Css_Helpers$identifierToString, '', identifier)),
					_1: {ctor: '[]'}
				}));
	});
var _rtfeldman$elm_css$Css$mixin = _rtfeldman$elm_css$Css_Preprocess$ApplyMixins;
var _rtfeldman$elm_css$Css$stylesheet = _rtfeldman$elm_css$Css_Preprocess$stylesheet;
var _rtfeldman$elm_css$Css$animationNames = function (identifiers) {
	var value = A2(
		_elm_lang$core$String$join,
		', ',
		A2(
			_elm_lang$core$List$map,
			_rtfeldman$elm_css_util$Css_Helpers$identifierToString(''),
			identifiers));
	return A2(_rtfeldman$elm_css$Css$property, 'animation-name', value);
};
var _rtfeldman$elm_css$Css$animationName = function (identifier) {
	return _rtfeldman$elm_css$Css$animationNames(
		{
			ctor: '::',
			_0: identifier,
			_1: {ctor: '[]'}
		});
};
var _rtfeldman$elm_css$Css$fontWeight = function (_p3) {
	var _p4 = _p3;
	var _p5 = _p4.value;
	var validWeight = function (weight) {
		return (!_elm_lang$core$Native_Utils.eq(
			_p5,
			_elm_lang$core$Basics$toString(weight))) ? true : A2(
			_elm_lang$core$List$member,
			weight,
			A2(
				_elm_lang$core$List$map,
				F2(
					function (x, y) {
						return x * y;
					})(100),
				A2(_elm_lang$core$List$range, 1, 9)));
	};
	var warnings = validWeight(
		_rtfeldman$elm_css$Css$stringToInt(_p5)) ? {ctor: '[]'} : {
		ctor: '::',
		_0: A2(
			_elm_lang$core$Basics_ops['++'],
			'fontWeight ',
			A2(_elm_lang$core$Basics_ops['++'], _p5, ' is invalid. Valid weights are: 100, 200, 300, 400, 500, 600, 700, 800, 900. Please see https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight#Values')),
		_1: {ctor: '[]'}
	};
	return A3(_rtfeldman$elm_css$Css$propertyWithWarnings, warnings, 'font-weight', _p5);
};
var _rtfeldman$elm_css$Css$fontFeatureSettingsList = function (featureTagValues) {
	var warnings = _elm_lang$core$List$concat(
		A2(
			_elm_lang$core$List$map,
			function (_) {
				return _.warnings;
			},
			featureTagValues));
	var value = A2(
		_elm_lang$core$String$join,
		', ',
		A2(
			_elm_lang$core$List$map,
			function (_) {
				return _.value;
			},
			featureTagValues));
	return A3(_rtfeldman$elm_css$Css$propertyWithWarnings, warnings, 'font-feature-settings', value);
};
var _rtfeldman$elm_css$Css$fontFeatureSettings = function (_p6) {
	var _p7 = _p6;
	return A3(_rtfeldman$elm_css$Css$propertyWithWarnings, _p7.warnings, 'font-feature-settings', _p7.value);
};
var _rtfeldman$elm_css$Css$qt = function (str) {
	return _elm_lang$core$Basics$toString(str);
};
var _rtfeldman$elm_css$Css$fontFace = function (value) {
	return A2(_elm_lang$core$Basics_ops['++'], 'font-face ', value);
};
var _rtfeldman$elm_css$Css$src = function (value) {
	return _elm_lang$core$Basics$toString(value.value);
};
var _rtfeldman$elm_css$Css$withMedia = _rtfeldman$elm_css$Css_Preprocess$WithMedia;
var _rtfeldman$elm_css$Css$media = F2(
	function (mediaQueries, snippets) {
		var nestedMediaRules = function (declarations) {
			nestedMediaRules:
			while (true) {
				var _p8 = declarations;
				if (_p8.ctor === '[]') {
					return {ctor: '[]'};
				} else {
					switch (_p8._0.ctor) {
						case 'StyleBlockDeclaration':
							var _v7 = _p8._1;
							declarations = _v7;
							continue nestedMediaRules;
						case 'MediaRule':
							return {
								ctor: '::',
								_0: A2(
									_rtfeldman$elm_css$Css_Preprocess$MediaRule,
									A2(_elm_lang$core$Basics_ops['++'], mediaQueries, _p8._0._0),
									_p8._0._1),
								_1: nestedMediaRules(_p8._1)
							};
						default:
							return {
								ctor: '::',
								_0: _p8._0,
								_1: nestedMediaRules(_p8._1)
							};
					}
				}
			}
		};
		var extractStyleBlocks = function (declarations) {
			extractStyleBlocks:
			while (true) {
				var _p9 = declarations;
				if (_p9.ctor === '[]') {
					return {ctor: '[]'};
				} else {
					if (_p9._0.ctor === 'StyleBlockDeclaration') {
						return {
							ctor: '::',
							_0: _p9._0._0,
							_1: extractStyleBlocks(_p9._1)
						};
					} else {
						var _v9 = _p9._1;
						declarations = _v9;
						continue extractStyleBlocks;
					}
				}
			}
		};
		var snippetDeclarations = A2(_elm_lang$core$List$concatMap, _rtfeldman$elm_css$Css_Preprocess$unwrapSnippet, snippets);
		var mediaRuleFromStyleBlocks = A2(
			_rtfeldman$elm_css$Css_Preprocess$MediaRule,
			mediaQueries,
			extractStyleBlocks(snippetDeclarations));
		return _rtfeldman$elm_css$Css_Preprocess$Snippet(
			{
				ctor: '::',
				_0: mediaRuleFromStyleBlocks,
				_1: nestedMediaRules(snippetDeclarations)
			});
	});
var _rtfeldman$elm_css$Css$mediaQuery = F2(
	function (queryString, snippets) {
		return A2(
			_rtfeldman$elm_css$Css$media,
			{
				ctor: '::',
				_0: _rtfeldman$elm_css$Css_Structure$MediaQuery(queryString),
				_1: {ctor: '[]'}
			},
			snippets);
	});
var _rtfeldman$elm_css$Css$color = function (c) {
	return A3(_rtfeldman$elm_css$Css$propertyWithWarnings, c.warnings, 'color', c.value);
};
var _rtfeldman$elm_css$Css$backgroundColor = function (c) {
	return A3(_rtfeldman$elm_css$Css$propertyWithWarnings, c.warnings, 'background-color', c.value);
};
var _rtfeldman$elm_css$Css$outlineColor = function (c) {
	return A3(_rtfeldman$elm_css$Css$propertyWithWarnings, c.warnings, 'outline-color', c.value);
};
var _rtfeldman$elm_css$Css$borderColor4 = F4(
	function (c1, c2, c3, c4) {
		var value = A2(
			_elm_lang$core$String$join,
			' ',
			{
				ctor: '::',
				_0: c1.value,
				_1: {
					ctor: '::',
					_0: c2.value,
					_1: {
						ctor: '::',
						_0: c3.value,
						_1: {
							ctor: '::',
							_0: c4.value,
							_1: {ctor: '[]'}
						}
					}
				}
			});
		var warnings = A2(
			_elm_lang$core$Basics_ops['++'],
			c1.warnings,
			A2(
				_elm_lang$core$Basics_ops['++'],
				c2.warnings,
				A2(_elm_lang$core$Basics_ops['++'], c3.warnings, c4.warnings)));
		return A3(_rtfeldman$elm_css$Css$propertyWithWarnings, warnings, 'border-color', value);
	});
var _rtfeldman$elm_css$Css$borderColor3 = F3(
	function (c1, c2, c3) {
		var value = A2(
			_elm_lang$core$String$join,
			' ',
			{
				ctor: '::',
				_0: c1.value,
				_1: {
					ctor: '::',
					_0: c2.value,
					_1: {
						ctor: '::',
						_0: c3.value,
						_1: {ctor: '[]'}
					}
				}
			});
		var warnings = A2(
			_elm_lang$core$Basics_ops['++'],
			c1.warnings,
			A2(_elm_lang$core$Basics_ops['++'], c2.warnings, c3.warnings));
		return A3(_rtfeldman$elm_css$Css$propertyWithWarnings, warnings, 'border-color', value);
	});
var _rtfeldman$elm_css$Css$borderColor2 = F2(
	function (c1, c2) {
		var value = A2(
			_elm_lang$core$String$join,
			' ',
			{
				ctor: '::',
				_0: c1.value,
				_1: {
					ctor: '::',
					_0: c2.value,
					_1: {ctor: '[]'}
				}
			});
		var warnings = A2(_elm_lang$core$Basics_ops['++'], c1.warnings, c2.warnings);
		return A3(_rtfeldman$elm_css$Css$propertyWithWarnings, warnings, 'border-color', value);
	});
var _rtfeldman$elm_css$Css$borderColor = function (c) {
	return A3(_rtfeldman$elm_css$Css$propertyWithWarnings, c.warnings, 'border-color', c.value);
};
var _rtfeldman$elm_css$Css$borderBlockEndColor = function (c) {
	return A3(_rtfeldman$elm_css$Css$propertyWithWarnings, c.warnings, 'border-block-end-color', c.value);
};
var _rtfeldman$elm_css$Css$borderTopColor = function (c) {
	return A3(_rtfeldman$elm_css$Css$propertyWithWarnings, c.warnings, 'border-top-color', c.value);
};
var _rtfeldman$elm_css$Css$borderRightColor = function (c) {
	return A3(_rtfeldman$elm_css$Css$propertyWithWarnings, c.warnings, 'border-right-color', c.value);
};
var _rtfeldman$elm_css$Css$borderLeftColor = function (c) {
	return A3(_rtfeldman$elm_css$Css$propertyWithWarnings, c.warnings, 'border-left-color', c.value);
};
var _rtfeldman$elm_css$Css$borderInlineEndColor = function (c) {
	return A3(_rtfeldman$elm_css$Css$propertyWithWarnings, c.warnings, 'border-inline-end-color', c.value);
};
var _rtfeldman$elm_css$Css$borderInlineStartColor = function (c) {
	return A3(_rtfeldman$elm_css$Css$propertyWithWarnings, c.warnings, 'border-inline-start-color', c.value);
};
var _rtfeldman$elm_css$Css$borderBottomColor = function (c) {
	return A3(_rtfeldman$elm_css$Css$propertyWithWarnings, c.warnings, 'border-bottom-color', c.value);
};
var _rtfeldman$elm_css$Css$borderBlockStartColor = function (c) {
	return A3(_rtfeldman$elm_css$Css$propertyWithWarnings, c.warnings, 'border-block-start-color', c.value);
};
var _rtfeldman$elm_css$Css$featureOff = 0;
var _rtfeldman$elm_css$Css$featureOn = 1;
var _rtfeldman$elm_css$Css$displayFlex = A2(_rtfeldman$elm_css$Css$property, 'display', 'flex');
var _rtfeldman$elm_css$Css$textEmphasisColor = function (c) {
	return A3(_rtfeldman$elm_css$Css$propertyWithWarnings, c.warnings, 'text-emphasis-color', c.value);
};
var _rtfeldman$elm_css$Css$textDecorationColor = function (c) {
	return A3(_rtfeldman$elm_css$Css$propertyWithWarnings, c.warnings, 'text-decoration-color', c.value);
};
var _rtfeldman$elm_css$Css$prop6 = F7(
	function (key, argA, argB, argC, argD, argE, argF) {
		return A2(
			_rtfeldman$elm_css$Css$property,
			key,
			A2(
				_elm_lang$core$String$join,
				' ',
				{
					ctor: '::',
					_0: argA.value,
					_1: {
						ctor: '::',
						_0: argB.value,
						_1: {
							ctor: '::',
							_0: argC.value,
							_1: {
								ctor: '::',
								_0: argD.value,
								_1: {
									ctor: '::',
									_0: argE.value,
									_1: {
										ctor: '::',
										_0: argF.value,
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				}));
	});
var _rtfeldman$elm_css$Css$boxShadow6 = _rtfeldman$elm_css$Css$prop6('box-shadow');
var _rtfeldman$elm_css$Css$prop5 = F6(
	function (key, argA, argB, argC, argD, argE) {
		return A2(
			_rtfeldman$elm_css$Css$property,
			key,
			A2(
				_elm_lang$core$String$join,
				' ',
				{
					ctor: '::',
					_0: argA.value,
					_1: {
						ctor: '::',
						_0: argB.value,
						_1: {
							ctor: '::',
							_0: argC.value,
							_1: {
								ctor: '::',
								_0: argD.value,
								_1: {
									ctor: '::',
									_0: argE.value,
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}));
	});
var _rtfeldman$elm_css$Css$boxShadow5 = _rtfeldman$elm_css$Css$prop5('box-shadow');
var _rtfeldman$elm_css$Css$prop4 = F5(
	function (key, argA, argB, argC, argD) {
		return A2(
			_rtfeldman$elm_css$Css$property,
			key,
			A2(
				_elm_lang$core$String$join,
				' ',
				{
					ctor: '::',
					_0: argA.value,
					_1: {
						ctor: '::',
						_0: argB.value,
						_1: {
							ctor: '::',
							_0: argC.value,
							_1: {
								ctor: '::',
								_0: argD.value,
								_1: {ctor: '[]'}
							}
						}
					}
				}));
	});
var _rtfeldman$elm_css$Css$textShadow4 = _rtfeldman$elm_css$Css$prop4('text-shadow');
var _rtfeldman$elm_css$Css$boxShadow4 = _rtfeldman$elm_css$Css$prop4('box-shadow');
var _rtfeldman$elm_css$Css$padding4 = _rtfeldman$elm_css$Css$prop4('padding');
var _rtfeldman$elm_css$Css$margin4 = _rtfeldman$elm_css$Css$prop4('margin');
var _rtfeldman$elm_css$Css$borderImageOutset4 = _rtfeldman$elm_css$Css$prop4('border-image-outset');
var _rtfeldman$elm_css$Css$borderImageWidth4 = _rtfeldman$elm_css$Css$prop4('border-image-width');
var _rtfeldman$elm_css$Css$borderRadius4 = _rtfeldman$elm_css$Css$prop4('border-radius');
var _rtfeldman$elm_css$Css$prop3 = F4(
	function (key, argA, argB, argC) {
		return A2(
			_rtfeldman$elm_css$Css$property,
			key,
			A2(
				_elm_lang$core$String$join,
				' ',
				{
					ctor: '::',
					_0: argA.value,
					_1: {
						ctor: '::',
						_0: argB.value,
						_1: {
							ctor: '::',
							_0: argC.value,
							_1: {ctor: '[]'}
						}
					}
				}));
	});
var _rtfeldman$elm_css$Css$textShadow3 = _rtfeldman$elm_css$Css$prop3('text-shadow');
var _rtfeldman$elm_css$Css$boxShadow3 = _rtfeldman$elm_css$Css$prop3('box-shadow');
var _rtfeldman$elm_css$Css$textIndent3 = _rtfeldman$elm_css$Css$prop3('text-indent');
var _rtfeldman$elm_css$Css$padding3 = _rtfeldman$elm_css$Css$prop3('padding');
var _rtfeldman$elm_css$Css$margin3 = _rtfeldman$elm_css$Css$prop3('margin');
var _rtfeldman$elm_css$Css$border3 = _rtfeldman$elm_css$Css$prop3('border');
var _rtfeldman$elm_css$Css$borderTop3 = _rtfeldman$elm_css$Css$prop3('border-top');
var _rtfeldman$elm_css$Css$borderBottom3 = _rtfeldman$elm_css$Css$prop3('border-bottom');
var _rtfeldman$elm_css$Css$borderLeft3 = _rtfeldman$elm_css$Css$prop3('border-left');
var _rtfeldman$elm_css$Css$borderRight3 = _rtfeldman$elm_css$Css$prop3('border-right');
var _rtfeldman$elm_css$Css$borderBlockStart3 = _rtfeldman$elm_css$Css$prop3('border-block-start');
var _rtfeldman$elm_css$Css$borderBlockEnd3 = _rtfeldman$elm_css$Css$prop3('border-block-end');
var _rtfeldman$elm_css$Css$borderInlineStart3 = _rtfeldman$elm_css$Css$prop3('border-block-start');
var _rtfeldman$elm_css$Css$borderInlineEnd3 = _rtfeldman$elm_css$Css$prop3('border-block-end');
var _rtfeldman$elm_css$Css$borderImageOutset3 = _rtfeldman$elm_css$Css$prop3('border-image-outset');
var _rtfeldman$elm_css$Css$borderImageWidth3 = _rtfeldman$elm_css$Css$prop3('border-image-width');
var _rtfeldman$elm_css$Css$borderRadius3 = _rtfeldman$elm_css$Css$prop3('border-radius');
var _rtfeldman$elm_css$Css$outline3 = _rtfeldman$elm_css$Css$prop3('outline');
var _rtfeldman$elm_css$Css$fontVariant3 = _rtfeldman$elm_css$Css$prop3('font-variant');
var _rtfeldman$elm_css$Css$fontVariantNumeric3 = _rtfeldman$elm_css$Css$prop3('font-variant-numeric');
var _rtfeldman$elm_css$Css$textDecoration3 = _rtfeldman$elm_css$Css$prop3('text-decoration');
var _rtfeldman$elm_css$Css$textDecorations3 = function (_p10) {
	return A2(
		_rtfeldman$elm_css$Css$prop3,
		'text-decoration',
		_rtfeldman$elm_css$Css$valuesOrNone(_p10));
};
var _rtfeldman$elm_css$Css$prop2 = F3(
	function (key, argA, argB) {
		return A2(
			_rtfeldman$elm_css$Css$property,
			key,
			A2(
				_elm_lang$core$String$join,
				' ',
				{
					ctor: '::',
					_0: argA.value,
					_1: {
						ctor: '::',
						_0: argB.value,
						_1: {ctor: '[]'}
					}
				}));
	});
var _rtfeldman$elm_css$Css$textShadow2 = _rtfeldman$elm_css$Css$prop2('text-shadow');
var _rtfeldman$elm_css$Css$boxShadow2 = _rtfeldman$elm_css$Css$prop2('box-shadow');
var _rtfeldman$elm_css$Css$textIndent2 = _rtfeldman$elm_css$Css$prop2('text-indent');
var _rtfeldman$elm_css$Css$padding2 = _rtfeldman$elm_css$Css$prop2('padding');
var _rtfeldman$elm_css$Css$margin2 = _rtfeldman$elm_css$Css$prop2('margin');
var _rtfeldman$elm_css$Css$border2 = _rtfeldman$elm_css$Css$prop2('border');
var _rtfeldman$elm_css$Css$borderTop2 = _rtfeldman$elm_css$Css$prop2('border-top');
var _rtfeldman$elm_css$Css$borderBottom2 = _rtfeldman$elm_css$Css$prop2('border-bottom');
var _rtfeldman$elm_css$Css$borderLeft2 = _rtfeldman$elm_css$Css$prop2('border-left');
var _rtfeldman$elm_css$Css$borderRight2 = _rtfeldman$elm_css$Css$prop2('border-right');
var _rtfeldman$elm_css$Css$borderBlockStart2 = _rtfeldman$elm_css$Css$prop2('border-block-start');
var _rtfeldman$elm_css$Css$borderBlockEnd2 = _rtfeldman$elm_css$Css$prop2('border-block-end');
var _rtfeldman$elm_css$Css$borderInlineStart2 = _rtfeldman$elm_css$Css$prop2('border-block-start');
var _rtfeldman$elm_css$Css$borderInlineEnd2 = _rtfeldman$elm_css$Css$prop2('border-block-end');
var _rtfeldman$elm_css$Css$borderImageOutset2 = _rtfeldman$elm_css$Css$prop2('border-image-outset');
var _rtfeldman$elm_css$Css$borderImageWidth2 = _rtfeldman$elm_css$Css$prop2('border-image-width');
var _rtfeldman$elm_css$Css$borderTopWidth2 = _rtfeldman$elm_css$Css$prop2('border-top-width');
var _rtfeldman$elm_css$Css$borderBottomLeftRadius2 = _rtfeldman$elm_css$Css$prop2('border-bottom-left-radius');
var _rtfeldman$elm_css$Css$borderBottomRightRadius2 = _rtfeldman$elm_css$Css$prop2('border-bottom-right-radius');
var _rtfeldman$elm_css$Css$borderTopLeftRadius2 = _rtfeldman$elm_css$Css$prop2('border-top-left-radius');
var _rtfeldman$elm_css$Css$borderTopRightRadius2 = _rtfeldman$elm_css$Css$prop2('border-top-right-radius');
var _rtfeldman$elm_css$Css$borderRadius2 = _rtfeldman$elm_css$Css$prop2('border-radius');
var _rtfeldman$elm_css$Css$borderSpacing2 = _rtfeldman$elm_css$Css$prop2('border-spacing');
var _rtfeldman$elm_css$Css$backgroundRepeat2 = _rtfeldman$elm_css$Css$prop2('background-repeat');
var _rtfeldman$elm_css$Css$backgroundPosition2 = _rtfeldman$elm_css$Css$prop2('background-position');
var _rtfeldman$elm_css$Css$backgroundSize2 = _rtfeldman$elm_css$Css$prop2('background-size');
var _rtfeldman$elm_css$Css$fontVariant2 = _rtfeldman$elm_css$Css$prop2('font-variant');
var _rtfeldman$elm_css$Css$fontVariantNumeric2 = _rtfeldman$elm_css$Css$prop2('font-variant-numeric');
var _rtfeldman$elm_css$Css$textDecoration2 = _rtfeldman$elm_css$Css$prop2('text-decoration');
var _rtfeldman$elm_css$Css$textDecorations2 = function (_p11) {
	return A2(
		_rtfeldman$elm_css$Css$prop2,
		'text-decoration',
		_rtfeldman$elm_css$Css$valuesOrNone(_p11));
};
var _rtfeldman$elm_css$Css$prop1 = F2(
	function (key, arg) {
		return A2(_rtfeldman$elm_css$Css$property, key, arg.value);
	});
var _rtfeldman$elm_css$Css$textRendering = _rtfeldman$elm_css$Css$prop1('text-rendering');
var _rtfeldman$elm_css$Css$textOrientation = _rtfeldman$elm_css$Css$prop1('text-orientation');
var _rtfeldman$elm_css$Css$textOverflow = _rtfeldman$elm_css$Css$prop1('text-overflow');
var _rtfeldman$elm_css$Css$textShadow = _rtfeldman$elm_css$Css$prop1('text-shadow');
var _rtfeldman$elm_css$Css$boxShadow = _rtfeldman$elm_css$Css$prop1('box-shadow');
var _rtfeldman$elm_css$Css$textIndent = _rtfeldman$elm_css$Css$prop1('text-indent');
var _rtfeldman$elm_css$Css$textTransform = _rtfeldman$elm_css$Css$prop1('text-transform');
var _rtfeldman$elm_css$Css$display = _rtfeldman$elm_css$Css$prop1('display');
var _rtfeldman$elm_css$Css$opacity = _rtfeldman$elm_css$Css$prop1('opacity');
var _rtfeldman$elm_css$Css$width = _rtfeldman$elm_css$Css$prop1('width');
var _rtfeldman$elm_css$Css$maxWidth = _rtfeldman$elm_css$Css$prop1('max-width');
var _rtfeldman$elm_css$Css$minWidth = _rtfeldman$elm_css$Css$prop1('min-width');
var _rtfeldman$elm_css$Css$height = _rtfeldman$elm_css$Css$prop1('height');
var _rtfeldman$elm_css$Css$minHeight = _rtfeldman$elm_css$Css$prop1('min-height');
var _rtfeldman$elm_css$Css$maxHeight = _rtfeldman$elm_css$Css$prop1('max-height');
var _rtfeldman$elm_css$Css$padding = _rtfeldman$elm_css$Css$prop1('padding');
var _rtfeldman$elm_css$Css$paddingBlockStart = _rtfeldman$elm_css$Css$prop1('padding-block-start');
var _rtfeldman$elm_css$Css$paddingBlockEnd = _rtfeldman$elm_css$Css$prop1('padding-block-end');
var _rtfeldman$elm_css$Css$paddingInlineStart = _rtfeldman$elm_css$Css$prop1('padding-inline-start');
var _rtfeldman$elm_css$Css$paddingInlineEnd = _rtfeldman$elm_css$Css$prop1('padding-inline-end');
var _rtfeldman$elm_css$Css$paddingTop = _rtfeldman$elm_css$Css$prop1('padding-top');
var _rtfeldman$elm_css$Css$paddingBottom = _rtfeldman$elm_css$Css$prop1('padding-bottom');
var _rtfeldman$elm_css$Css$paddingRight = _rtfeldman$elm_css$Css$prop1('padding-right');
var _rtfeldman$elm_css$Css$paddingLeft = _rtfeldman$elm_css$Css$prop1('padding-left');
var _rtfeldman$elm_css$Css$margin = _rtfeldman$elm_css$Css$prop1('margin');
var _rtfeldman$elm_css$Css$marginTop = _rtfeldman$elm_css$Css$prop1('margin-top');
var _rtfeldman$elm_css$Css$marginBottom = _rtfeldman$elm_css$Css$prop1('margin-bottom');
var _rtfeldman$elm_css$Css$marginRight = _rtfeldman$elm_css$Css$prop1('margin-right');
var _rtfeldman$elm_css$Css$marginLeft = _rtfeldman$elm_css$Css$prop1('margin-left');
var _rtfeldman$elm_css$Css$marginBlockStart = _rtfeldman$elm_css$Css$prop1('margin-block-start');
var _rtfeldman$elm_css$Css$marginBlockEnd = _rtfeldman$elm_css$Css$prop1('margin-block-end');
var _rtfeldman$elm_css$Css$marginInlineStart = _rtfeldman$elm_css$Css$prop1('margin-inline-start');
var _rtfeldman$elm_css$Css$marginInlineEnd = _rtfeldman$elm_css$Css$prop1('margin-inline-end');
var _rtfeldman$elm_css$Css$top = _rtfeldman$elm_css$Css$prop1('top');
var _rtfeldman$elm_css$Css$bottom = _rtfeldman$elm_css$Css$prop1('bottom');
var _rtfeldman$elm_css$Css$left = _rtfeldman$elm_css$Css$prop1('left');
var _rtfeldman$elm_css$Css$right = _rtfeldman$elm_css$Css$prop1('right');
var _rtfeldman$elm_css$Css$border = _rtfeldman$elm_css$Css$prop1('border');
var _rtfeldman$elm_css$Css$borderTop = _rtfeldman$elm_css$Css$prop1('border-top');
var _rtfeldman$elm_css$Css$borderBottom = _rtfeldman$elm_css$Css$prop1('border-bottom');
var _rtfeldman$elm_css$Css$borderLeft = _rtfeldman$elm_css$Css$prop1('border-left');
var _rtfeldman$elm_css$Css$borderRight = _rtfeldman$elm_css$Css$prop1('border-right');
var _rtfeldman$elm_css$Css$borderBlockStart = _rtfeldman$elm_css$Css$prop1('border-block-start');
var _rtfeldman$elm_css$Css$borderBlockEnd = _rtfeldman$elm_css$Css$prop1('border-block-end');
var _rtfeldman$elm_css$Css$borderInlineStart = _rtfeldman$elm_css$Css$prop1('border-block-start');
var _rtfeldman$elm_css$Css$borderInlineEnd = _rtfeldman$elm_css$Css$prop1('border-block-end');
var _rtfeldman$elm_css$Css$borderImageOutset = _rtfeldman$elm_css$Css$prop1('border-image-outset');
var _rtfeldman$elm_css$Css$borderImageWidth = _rtfeldman$elm_css$Css$prop1('border-image-width');
var _rtfeldman$elm_css$Css$borderBlockEndStyle = _rtfeldman$elm_css$Css$prop1('border-block-end-style');
var _rtfeldman$elm_css$Css$borderBlockStartStyle = _rtfeldman$elm_css$Css$prop1('border-block-start-style');
var _rtfeldman$elm_css$Css$borderInlineEndStyle = _rtfeldman$elm_css$Css$prop1('border-inline-end-style');
var _rtfeldman$elm_css$Css$borderBottomStyle = _rtfeldman$elm_css$Css$prop1('border-bottom-style');
var _rtfeldman$elm_css$Css$borderInlineStartStyle = _rtfeldman$elm_css$Css$prop1('border-inline-start-style');
var _rtfeldman$elm_css$Css$borderLeftStyle = _rtfeldman$elm_css$Css$prop1('border-left-style');
var _rtfeldman$elm_css$Css$borderRightStyle = _rtfeldman$elm_css$Css$prop1('border-right-style');
var _rtfeldman$elm_css$Css$borderTopStyle = _rtfeldman$elm_css$Css$prop1('border-top-style');
var _rtfeldman$elm_css$Css$borderStyle = _rtfeldman$elm_css$Css$prop1('border-style');
var _rtfeldman$elm_css$Css$borderCollapse = _rtfeldman$elm_css$Css$prop1('border-collapse');
var _rtfeldman$elm_css$Css$borderBottomWidth = _rtfeldman$elm_css$Css$prop1('border-bottom-width');
var _rtfeldman$elm_css$Css$borderInlineEndWidth = _rtfeldman$elm_css$Css$prop1('border-inline-end-width');
var _rtfeldman$elm_css$Css$borderLeftWidth = _rtfeldman$elm_css$Css$prop1('border-left-width');
var _rtfeldman$elm_css$Css$borderRightWidth = _rtfeldman$elm_css$Css$prop1('border-right-width');
var _rtfeldman$elm_css$Css$borderTopWidth = _rtfeldman$elm_css$Css$prop1('border-top-width');
var _rtfeldman$elm_css$Css$borderBottomLeftRadius = _rtfeldman$elm_css$Css$prop1('border-bottom-left-radius');
var _rtfeldman$elm_css$Css$borderBottomRightRadius = _rtfeldman$elm_css$Css$prop1('border-bottom-right-radius');
var _rtfeldman$elm_css$Css$borderTopLeftRadius = _rtfeldman$elm_css$Css$prop1('border-top-left-radius');
var _rtfeldman$elm_css$Css$borderTopRightRadius = _rtfeldman$elm_css$Css$prop1('border-top-right-radius');
var _rtfeldman$elm_css$Css$borderRadius = _rtfeldman$elm_css$Css$prop1('border-radius');
var _rtfeldman$elm_css$Css$borderSpacing = _rtfeldman$elm_css$Css$prop1('border-spacing');
var _rtfeldman$elm_css$Css$outline = _rtfeldman$elm_css$Css$prop1('outline');
var _rtfeldman$elm_css$Css$outlineWidth = _rtfeldman$elm_css$Css$prop1('outline-width');
var _rtfeldman$elm_css$Css$outlineStyle = _rtfeldman$elm_css$Css$prop1('outline-style');
var _rtfeldman$elm_css$Css$outlineOffset = _rtfeldman$elm_css$Css$prop1('outline-offset');
var _rtfeldman$elm_css$Css$resize = _rtfeldman$elm_css$Css$prop1('resize');
var _rtfeldman$elm_css$Css$fill = _rtfeldman$elm_css$Css$prop1('fill');
var _rtfeldman$elm_css$Css$overflow = _rtfeldman$elm_css$Css$prop1('overflow');
var _rtfeldman$elm_css$Css$overflowX = _rtfeldman$elm_css$Css$prop1('overflow-x');
var _rtfeldman$elm_css$Css$overflowY = _rtfeldman$elm_css$Css$prop1('overflow-y');
var _rtfeldman$elm_css$Css$overflowWrap = _rtfeldman$elm_css$Css$prop1('overflow-wrap');
var _rtfeldman$elm_css$Css$whiteSpace = _rtfeldman$elm_css$Css$prop1('white-space');
var _rtfeldman$elm_css$Css$backgroundRepeat = _rtfeldman$elm_css$Css$prop1('background-repeat');
var _rtfeldman$elm_css$Css$backgroundAttachment = _rtfeldman$elm_css$Css$prop1('background-attachment');
var _rtfeldman$elm_css$Css$backgroundClip = _rtfeldman$elm_css$Css$prop1('background-clip');
var _rtfeldman$elm_css$Css$backgroundOrigin = _rtfeldman$elm_css$Css$prop1('background-origin');
var _rtfeldman$elm_css$Css$backgroundImage = _rtfeldman$elm_css$Css$prop1('background-image');
var _rtfeldman$elm_css$Css$backgroundSize = _rtfeldman$elm_css$Css$prop1('background-size');
var _rtfeldman$elm_css$Css$lineHeight = _rtfeldman$elm_css$Css$prop1('line-height');
var _rtfeldman$elm_css$Css$letterSpacing = _rtfeldman$elm_css$Css$prop1('letter-spacing');
var _rtfeldman$elm_css$Css$fontFamily = _rtfeldman$elm_css$Css$prop1('font-family');
var _rtfeldman$elm_css$Css$fontFamilies = function (_p12) {
	return A2(
		_rtfeldman$elm_css$Css$prop1,
		'font-family',
		_rtfeldman$elm_css$Css$stringsToValue(_p12));
};
var _rtfeldman$elm_css$Css$fontSize = _rtfeldman$elm_css$Css$prop1('font-size');
var _rtfeldman$elm_css$Css$fontStyle = _rtfeldman$elm_css$Css$prop1('font-style');
var _rtfeldman$elm_css$Css$fontVariant = _rtfeldman$elm_css$Css$prop1('font-variant');
var _rtfeldman$elm_css$Css$fontVariantLigatures = _rtfeldman$elm_css$Css$prop1('font-variant-ligatures');
var _rtfeldman$elm_css$Css$fontVariantCaps = _rtfeldman$elm_css$Css$prop1('font-variant-caps');
var _rtfeldman$elm_css$Css$fontVariantNumeric = _rtfeldman$elm_css$Css$prop1('font-variant-numeric');
var _rtfeldman$elm_css$Css$fontVariantNumerics = function (_p13) {
	return A2(
		_rtfeldman$elm_css$Css$prop1,
		'font-variant-numeric',
		_rtfeldman$elm_css$Css$valuesOrNone(_p13));
};
var _rtfeldman$elm_css$Css$cursor = _rtfeldman$elm_css$Css$prop1('cursor');
var _rtfeldman$elm_css$Css$textDecoration = _rtfeldman$elm_css$Css$prop1('text-decoration');
var _rtfeldman$elm_css$Css$textDecorations = function (_p14) {
	return A2(
		_rtfeldman$elm_css$Css$prop1,
		'text-decoration',
		_rtfeldman$elm_css$Css$valuesOrNone(_p14));
};
var _rtfeldman$elm_css$Css$textDecorationLine = _rtfeldman$elm_css$Css$prop1('text-decoration-line');
var _rtfeldman$elm_css$Css$textDecorationLines = function (_p15) {
	return A2(
		_rtfeldman$elm_css$Css$prop1,
		'text-decoration-line',
		_rtfeldman$elm_css$Css$valuesOrNone(_p15));
};
var _rtfeldman$elm_css$Css$textDecorationStyle = _rtfeldman$elm_css$Css$prop1('text-decoration-style');
var _rtfeldman$elm_css$Css$zIndex = _rtfeldman$elm_css$Css$prop1('z-index');
var _rtfeldman$elm_css$Css$position = _rtfeldman$elm_css$Css$prop1('position');
var _rtfeldman$elm_css$Css$textBottom = _rtfeldman$elm_css$Css$prop1('text-bottom');
var _rtfeldman$elm_css$Css$textTop = _rtfeldman$elm_css$Css$prop1('text-top');
var _rtfeldman$elm_css$Css$super = _rtfeldman$elm_css$Css$prop1('super');
var _rtfeldman$elm_css$Css$sub = _rtfeldman$elm_css$Css$prop1('sub');
var _rtfeldman$elm_css$Css$baseline = _rtfeldman$elm_css$Css$prop1('baseline');
var _rtfeldman$elm_css$Css$middle = _rtfeldman$elm_css$Css$prop1('middle');
var _rtfeldman$elm_css$Css$stretch = _rtfeldman$elm_css$Css$prop1('stretch');
var _rtfeldman$elm_css$Css$spaceBetween = _rtfeldman$elm_css$Css$prop1('space-between');
var _rtfeldman$elm_css$Css$spaceAround = _rtfeldman$elm_css$Css$prop1('space-around');
var _rtfeldman$elm_css$Css$flexEnd = _rtfeldman$elm_css$Css$prop1('flex-end');
var _rtfeldman$elm_css$Css$flexStart = _rtfeldman$elm_css$Css$prop1('flex-start');
var _rtfeldman$elm_css$Css$order = _rtfeldman$elm_css$Css$prop1('order');
var _rtfeldman$elm_css$Css$flexFlow2 = _rtfeldman$elm_css$Css$prop2('flex-flow');
var _rtfeldman$elm_css$Css$flexFlow1 = _rtfeldman$elm_css$Css$prop1('flex-flow');
var _rtfeldman$elm_css$Css$flexDirection = _rtfeldman$elm_css$Css$prop1('flex-direction');
var _rtfeldman$elm_css$Css$flexWrap = _rtfeldman$elm_css$Css$prop1('flex-wrap');
var _rtfeldman$elm_css$Css$flexShrink = _rtfeldman$elm_css$Css$prop1('flex-shrink');
var _rtfeldman$elm_css$Css$flexGrow = _rtfeldman$elm_css$Css$prop1('flex-grow');
var _rtfeldman$elm_css$Css$flexBasis = _rtfeldman$elm_css$Css$prop1('flex-basis');
var _rtfeldman$elm_css$Css$flex3 = _rtfeldman$elm_css$Css$prop3('flex');
var _rtfeldman$elm_css$Css$flex2 = _rtfeldman$elm_css$Css$prop2('flex');
var _rtfeldman$elm_css$Css$flex = _rtfeldman$elm_css$Css$prop1('flex');
var _rtfeldman$elm_css$Css$listStyle3 = _rtfeldman$elm_css$Css$prop3('list-style');
var _rtfeldman$elm_css$Css$listStyle2 = _rtfeldman$elm_css$Css$prop2('list-style');
var _rtfeldman$elm_css$Css$listStyle = _rtfeldman$elm_css$Css$prop1('list-style');
var _rtfeldman$elm_css$Css$listStyleType = _rtfeldman$elm_css$Css$prop1('list-style-type');
var _rtfeldman$elm_css$Css$listStylePosition = _rtfeldman$elm_css$Css$prop1('list-style-position');
var _rtfeldman$elm_css$Css$transformStyle = _rtfeldman$elm_css$Css$prop1('transform-style');
var _rtfeldman$elm_css$Css$boxSizing = _rtfeldman$elm_css$Css$prop1('box-sizing');
var _rtfeldman$elm_css$Css$transformBox = _rtfeldman$elm_css$Css$prop1('transform-box');
var _rtfeldman$elm_css$Css$transforms = function (_p16) {
	return A2(
		_rtfeldman$elm_css$Css$prop1,
		'transform',
		_rtfeldman$elm_css$Css$valuesOrNone(_p16));
};
var _rtfeldman$elm_css$Css$transform = function (only) {
	return _rtfeldman$elm_css$Css$transforms(
		{
			ctor: '::',
			_0: only,
			_1: {ctor: '[]'}
		});
};
var _rtfeldman$elm_css$Css$true = _rtfeldman$elm_css$Css$prop1('true');
var _rtfeldman$elm_css$Css$matchParent = _rtfeldman$elm_css$Css$prop1('match-parent');
var _rtfeldman$elm_css$Css$end = _rtfeldman$elm_css$Css$prop1('end');
var _rtfeldman$elm_css$Css$start = _rtfeldman$elm_css$Css$prop1('start');
var _rtfeldman$elm_css$Css$justifyAll = _rtfeldman$elm_css$Css$prop1('justify-all');
var _rtfeldman$elm_css$Css$textJustify = _rtfeldman$elm_css$Css$prop1('text-justify');
var _rtfeldman$elm_css$Css$center = _rtfeldman$elm_css$Css$prop1('center');
var _rtfeldman$elm_css$Css$withPrecedingHash = function (str) {
	return A2(_elm_lang$core$String$startsWith, '#', str) ? str : A2(
		_elm_lang$core$String$cons,
		_elm_lang$core$Native_Utils.chr('#'),
		str);
};
var _rtfeldman$elm_css$Css$luminosity = _rtfeldman$elm_css$Css$prop1('luminosity');
var _rtfeldman$elm_css$Css$saturation = _rtfeldman$elm_css$Css$prop1('saturation');
var _rtfeldman$elm_css$Css$hue = _rtfeldman$elm_css$Css$prop1('hue');
var _rtfeldman$elm_css$Css$exclusion = _rtfeldman$elm_css$Css$prop1('exclusion');
var _rtfeldman$elm_css$Css$difference = _rtfeldman$elm_css$Css$prop1('difference');
var _rtfeldman$elm_css$Css$softLight = _rtfeldman$elm_css$Css$prop1('soft-light');
var _rtfeldman$elm_css$Css$hardLight = _rtfeldman$elm_css$Css$prop1('hard-light');
var _rtfeldman$elm_css$Css$colorBurn = _rtfeldman$elm_css$Css$prop1('color-burn');
var _rtfeldman$elm_css$Css$colorDodge = _rtfeldman$elm_css$Css$prop1('color-dodge');
var _rtfeldman$elm_css$Css$lighten = _rtfeldman$elm_css$Css$prop1('lighten');
var _rtfeldman$elm_css$Css$darken = _rtfeldman$elm_css$Css$prop1('darken');
var _rtfeldman$elm_css$Css$overlay = _rtfeldman$elm_css$Css$prop1('overlay');
var _rtfeldman$elm_css$Css$screenBlendMode = _rtfeldman$elm_css$Css$prop1('screen');
var _rtfeldman$elm_css$Css$multiply = _rtfeldman$elm_css$Css$prop1('multiply');
var _rtfeldman$elm_css$Css$important = _rtfeldman$elm_css$Css_Preprocess$mapLastProperty(
	function (property) {
		return _elm_lang$core$Native_Utils.update(
			property,
			{important: true});
	});
var _rtfeldman$elm_css$Css$all = _rtfeldman$elm_css$Css$prop1('all');
var _rtfeldman$elm_css$Css$combineLengths = F3(
	function (operation, first, second) {
		var numericValue = A2(operation, first.numericValue, second.numericValue);
		var value = A2(
			_elm_lang$core$String$join,
			'',
			A2(
				_elm_lang$core$List$filter,
				function (_p17) {
					return !_elm_lang$core$String$isEmpty(_p17);
				},
				{
					ctor: '::',
					_0: _elm_lang$core$Basics$toString(numericValue),
					_1: {
						ctor: '::',
						_0: first.unitLabel,
						_1: {ctor: '[]'}
					}
				}));
		return _elm_lang$core$Native_Utils.update(
			first,
			{value: value, numericValue: numericValue});
	});
var _rtfeldman$elm_css$Css_ops = _rtfeldman$elm_css$Css_ops || {};
_rtfeldman$elm_css$Css_ops['|*|'] = _rtfeldman$elm_css$Css$combineLengths(
	F2(
		function (x, y) {
			return x * y;
		}));
var _rtfeldman$elm_css$Css_ops = _rtfeldman$elm_css$Css_ops || {};
_rtfeldman$elm_css$Css_ops['|/|'] = _rtfeldman$elm_css$Css$combineLengths(
	F2(
		function (x, y) {
			return x / y;
		}));
var _rtfeldman$elm_css$Css_ops = _rtfeldman$elm_css$Css_ops || {};
_rtfeldman$elm_css$Css_ops['|-|'] = _rtfeldman$elm_css$Css$combineLengths(
	F2(
		function (x, y) {
			return x - y;
		}));
var _rtfeldman$elm_css$Css_ops = _rtfeldman$elm_css$Css_ops || {};
_rtfeldman$elm_css$Css_ops['|+|'] = _rtfeldman$elm_css$Css$combineLengths(
	F2(
		function (x, y) {
			return x + y;
		}));
var _rtfeldman$elm_css$Css$getOverloadedProperty = F3(
	function (functionName, desiredKey, mixin) {
		getOverloadedProperty:
		while (true) {
			var _p18 = mixin;
			switch (_p18.ctor) {
				case 'AppendProperty':
					return A2(_rtfeldman$elm_css$Css$property, desiredKey, _p18._0.key);
				case 'ExtendSelector':
					return A3(
						_rtfeldman$elm_css$Css$propertyWithWarnings,
						{
							ctor: '::',
							_0: A2(
								_elm_lang$core$Basics_ops['++'],
								'Cannot apply ',
								A2(
									_elm_lang$core$Basics_ops['++'],
									functionName,
									A2(
										_elm_lang$core$Basics_ops['++'],
										' with inapplicable mixin for selector ',
										_elm_lang$core$Basics$toString(_p18._0)))),
							_1: {ctor: '[]'}
						},
						desiredKey,
						'');
				case 'NestSnippet':
					return A3(
						_rtfeldman$elm_css$Css$propertyWithWarnings,
						{
							ctor: '::',
							_0: A2(
								_elm_lang$core$Basics_ops['++'],
								'Cannot apply ',
								A2(
									_elm_lang$core$Basics_ops['++'],
									functionName,
									A2(
										_elm_lang$core$Basics_ops['++'],
										' with inapplicable mixin for combinator ',
										_elm_lang$core$Basics$toString(_p18._0)))),
							_1: {ctor: '[]'}
						},
						desiredKey,
						'');
				case 'WithPseudoElement':
					return A3(
						_rtfeldman$elm_css$Css$propertyWithWarnings,
						{
							ctor: '::',
							_0: A2(
								_elm_lang$core$Basics_ops['++'],
								'Cannot apply ',
								A2(
									_elm_lang$core$Basics_ops['++'],
									functionName,
									A2(
										_elm_lang$core$Basics_ops['++'],
										' with inapplicable mixin for pseudo-element setter ',
										_elm_lang$core$Basics$toString(_p18._0)))),
							_1: {ctor: '[]'}
						},
						desiredKey,
						'');
				case 'WithMedia':
					return A3(
						_rtfeldman$elm_css$Css$propertyWithWarnings,
						{
							ctor: '::',
							_0: A2(
								_elm_lang$core$Basics_ops['++'],
								'Cannot apply ',
								A2(
									_elm_lang$core$Basics_ops['++'],
									functionName,
									A2(
										_elm_lang$core$Basics_ops['++'],
										' with inapplicable mixin for media query ',
										_elm_lang$core$Basics$toString(_p18._0)))),
							_1: {ctor: '[]'}
						},
						desiredKey,
						'');
				default:
					if (_p18._0.ctor === '[]') {
						return A3(
							_rtfeldman$elm_css$Css$propertyWithWarnings,
							{
								ctor: '::',
								_0: A2(
									_elm_lang$core$Basics_ops['++'],
									'Cannot apply ',
									A2(_elm_lang$core$Basics_ops['++'], functionName, ' with empty mixin. ')),
								_1: {ctor: '[]'}
							},
							desiredKey,
							'');
					} else {
						if (_p18._0._1.ctor === '[]') {
							var _v11 = functionName,
								_v12 = desiredKey,
								_v13 = _p18._0._0;
							functionName = _v11;
							desiredKey = _v12;
							mixin = _v13;
							continue getOverloadedProperty;
						} else {
							var _v14 = functionName,
								_v15 = desiredKey,
								_v16 = _rtfeldman$elm_css$Css_Preprocess$ApplyMixins(_p18._0._1);
							functionName = _v14;
							desiredKey = _v15;
							mixin = _v16;
							continue getOverloadedProperty;
						}
					}
			}
		}
	});
var _rtfeldman$elm_css$Css$cssFunction = F2(
	function (funcName, args) {
		return A2(
			_elm_lang$core$Basics_ops['++'],
			funcName,
			A2(
				_elm_lang$core$Basics_ops['++'],
				'(',
				A2(
					_elm_lang$core$Basics_ops['++'],
					A2(_elm_lang$core$String$join, ', ', args),
					')')));
	});
var _rtfeldman$elm_css$Css$tv = _rtfeldman$elm_css$Css_Structure$MediaQuery('tv');
var _rtfeldman$elm_css$Css$projection = _rtfeldman$elm_css$Css_Structure$MediaQuery('projection');
var _rtfeldman$elm_css$Css$print = _rtfeldman$elm_css$Css_Structure$MediaQuery('print');
var _rtfeldman$elm_css$Css$screen = _rtfeldman$elm_css$Css_Structure$MediaQuery('screen');
var _rtfeldman$elm_css$Css$ExplicitLength = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return function (l) {
												return function (m) {
													return function (n) {
														return function (o) {
															return {value: a, numericValue: b, units: c, unitLabel: d, length: e, lengthOrAuto: f, lengthOrNumber: g, lengthOrNone: h, lengthOrMinMaxDimension: i, lengthOrNoneOrMinMaxDimension: j, textIndent: k, flexBasis: l, lengthOrNumberOrAutoOrNoneOrContent: m, fontSize: n, lengthOrAutoOrCoverOrContain: o};
														};
													};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _rtfeldman$elm_css$Css$NonMixable = {};
var _rtfeldman$elm_css$Css$BasicProperty = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return function (l) {
												return function (m) {
													return function (n) {
														return function (o) {
															return function (p) {
																return function (q) {
																	return function (r) {
																		return function (s) {
																			return function (t) {
																				return function (u) {
																					return function (v) {
																						return function (w) {
																							return function (x) {
																								return function (y) {
																									return function (z) {
																										return function (_1) {
																											return function (_2) {
																												return function (_3) {
																													return function (_4) {
																														return function (_5) {
																															return function (_6) {
																																return function (_7) {
																																	return function (_8) {
																																		return function (_9) {
																																			return function (_10) {
																																				return function (_11) {
																																					return function (_12) {
																																						return function (_13) {
																																							return function (_14) {
																																								return function (_15) {
																																									return function (_16) {
																																										return function (_17) {
																																											return function (_18) {
																																												return function (_19) {
																																													return function (_20) {
																																														return function (_21) {
																																															return function (_22) {
																																																return {value: a, all: b, alignItems: c, borderStyle: d, boxSizing: e, color: f, cursor: g, display: h, flexBasis: i, flexWrap: j, flexDirection: k, flexDirectionOrWrap: l, justifyContent: m, none: n, number: o, outline: p, overflow: q, textDecorationLine: r, textRendering: s, textIndent: t, textDecorationStyle: u, length: v, lengthOrAuto: w, lengthOrNone: x, lengthOrNumber: y, lengthOrMinMaxDimension: z, lengthOrNoneOrMinMaxDimension: _1, lengthOrNumberOrAutoOrNoneOrContent: _2, listStyleType: _3, listStylePosition: _4, listStyleTypeOrPositionOrImage: _5, fontFamily: _6, fontSize: _7, fontStyle: _8, fontWeight: _9, fontVariant: _10, units: _11, numericValue: _12, unitLabel: _13, warnings: _14, backgroundRepeat: _15, backgroundRepeatShorthand: _16, backgroundAttachment: _17, backgroundBlendMode: _18, backgroundOrigin: _19, backgroundImage: _20, lengthOrAutoOrCoverOrContain: _21, intOrAuto: _22};
																																															};
																																														};
																																													};
																																												};
																																											};
																																										};
																																									};
																																								};
																																							};
																																						};
																																					};
																																				};
																																			};
																																		};
																																	};
																																};
																															};
																														};
																													};
																												};
																											};
																										};
																									};
																								};
																							};
																						};
																					};
																				};
																			};
																		};
																	};
																};
															};
														};
													};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _rtfeldman$elm_css$Css$Compatible = {ctor: 'Compatible'};
var _rtfeldman$elm_css$Css$transparent = {
	value: 'transparent',
	color: _rtfeldman$elm_css$Css$Compatible,
	warnings: {ctor: '[]'}
};
var _rtfeldman$elm_css$Css$colorValueForOverloadedProperty = _rtfeldman$elm_css$Css$transparent;
var _rtfeldman$elm_css$Css$backgroundBlendMode = function (fn) {
	return A3(
		_rtfeldman$elm_css$Css$getOverloadedProperty,
		'backgroundBlendMode',
		'background-blend-mode',
		fn(_rtfeldman$elm_css$Css$colorValueForOverloadedProperty));
};
var _rtfeldman$elm_css$Css$currentColor = {
	value: 'currentColor',
	color: _rtfeldman$elm_css$Css$Compatible,
	warnings: {ctor: '[]'}
};
var _rtfeldman$elm_css$Css$visible = {value: 'visible', overflow: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$scroll = {value: 'scroll', overflow: _rtfeldman$elm_css$Css$Compatible, backgroundAttachment: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$breakWord = {value: 'break-word', overflowWrap: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$both = {value: 'both', resize: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$horizontal = {value: 'horizontal', resize: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$vertical = {value: 'vertical', resize: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$paddingBox = {value: 'padding-box', backgroundClip: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$url = function (urlValue) {
	return {
		value: A2(
			_elm_lang$core$Basics_ops['++'],
			'url(',
			A2(_elm_lang$core$Basics_ops['++'], urlValue, ')')),
		backgroundImage: _rtfeldman$elm_css$Css$Compatible
	};
};
var _rtfeldman$elm_css$Css$cover = {value: 'cover', lengthOrAutoOrCoverOrContain: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$contain = {value: 'contain', lengthOrAutoOrCoverOrContain: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$hidden = {value: 'hidden', overflow: _rtfeldman$elm_css$Css$Compatible, borderStyle: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$rgb = F3(
	function (red, green, blue) {
		var warnings = ((_elm_lang$core$Native_Utils.cmp(red, 0) < 0) || ((_elm_lang$core$Native_Utils.cmp(red, 255) > 0) || ((_elm_lang$core$Native_Utils.cmp(green, 0) < 0) || ((_elm_lang$core$Native_Utils.cmp(green, 255) > 0) || ((_elm_lang$core$Native_Utils.cmp(blue, 0) < 0) || (_elm_lang$core$Native_Utils.cmp(blue, 255) > 0)))))) ? {
			ctor: '::',
			_0: A2(
				_elm_lang$core$Basics_ops['++'],
				'RGB color values must be between 0 and 255. rgb(',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString(red),
					A2(
						_elm_lang$core$Basics_ops['++'],
						', ',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$Basics$toString(green),
							A2(
								_elm_lang$core$Basics_ops['++'],
								', ',
								A2(
									_elm_lang$core$Basics_ops['++'],
									_elm_lang$core$Basics$toString(blue),
									') is not valid.')))))),
			_1: {ctor: '[]'}
		} : {ctor: '[]'};
		return {
			value: A2(
				_rtfeldman$elm_css$Css$cssFunction,
				'rgb',
				A2(
					_elm_lang$core$List$map,
					_rtfeldman$elm_css$Css$numberToString,
					{
						ctor: '::',
						_0: red,
						_1: {
							ctor: '::',
							_0: green,
							_1: {
								ctor: '::',
								_0: blue,
								_1: {ctor: '[]'}
							}
						}
					})),
			color: _rtfeldman$elm_css$Css$Compatible,
			warnings: warnings,
			red: red,
			green: green,
			blue: blue,
			alpha: 1
		};
	});
var _rtfeldman$elm_css$Css$rgba = F4(
	function (red, green, blue, alpha) {
		var warnings = ((_elm_lang$core$Native_Utils.cmp(red, 0) < 0) || ((_elm_lang$core$Native_Utils.cmp(red, 255) > 0) || ((_elm_lang$core$Native_Utils.cmp(green, 0) < 0) || ((_elm_lang$core$Native_Utils.cmp(green, 255) > 0) || ((_elm_lang$core$Native_Utils.cmp(blue, 0) < 0) || ((_elm_lang$core$Native_Utils.cmp(blue, 255) > 0) || ((_elm_lang$core$Native_Utils.cmp(alpha, 0) < 0) || (_elm_lang$core$Native_Utils.cmp(alpha, 1) > 0)))))))) ? {
			ctor: '::',
			_0: A2(
				_elm_lang$core$Basics_ops['++'],
				'RGB color values must be between 0 and 255, and the alpha in RGBA must be between 0 and 1. rgba(',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString(red),
					A2(
						_elm_lang$core$Basics_ops['++'],
						', ',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$Basics$toString(green),
							A2(
								_elm_lang$core$Basics_ops['++'],
								', ',
								A2(
									_elm_lang$core$Basics_ops['++'],
									_elm_lang$core$Basics$toString(blue),
									A2(
										_elm_lang$core$Basics_ops['++'],
										', ',
										A2(
											_elm_lang$core$Basics_ops['++'],
											_elm_lang$core$Basics$toString(alpha),
											') is not valid.')))))))),
			_1: {ctor: '[]'}
		} : {ctor: '[]'};
		return {
			value: A2(
				_rtfeldman$elm_css$Css$cssFunction,
				'rgba',
				A2(
					_elm_lang$core$Basics_ops['++'],
					A2(
						_elm_lang$core$List$map,
						_rtfeldman$elm_css$Css$numberToString,
						{
							ctor: '::',
							_0: red,
							_1: {
								ctor: '::',
								_0: green,
								_1: {
									ctor: '::',
									_0: blue,
									_1: {ctor: '[]'}
								}
							}
						}),
					{
						ctor: '::',
						_0: _rtfeldman$elm_css$Css$numberToString(alpha),
						_1: {ctor: '[]'}
					})),
			color: _rtfeldman$elm_css$Css$Compatible,
			warnings: warnings,
			red: red,
			green: green,
			blue: blue,
			alpha: alpha
		};
	});
var _rtfeldman$elm_css$Css$erroneousHex = function (str) {
	return {
		value: _rtfeldman$elm_css$Css$withPrecedingHash(str),
		color: _rtfeldman$elm_css$Css$Compatible,
		red: 0,
		green: 0,
		blue: 0,
		alpha: 1,
		warnings: _elm_lang$core$List$singleton(
			A2(
				_elm_lang$core$String$join,
				' ',
				{
					ctor: '::',
					_0: 'Hex color strings must contain exactly 3, 4, 6, or 8 hexadecimal digits, optionally preceded by \"#\".',
					_1: {
						ctor: '::',
						_0: _elm_lang$core$Basics$toString(str),
						_1: {
							ctor: '::',
							_0: 'is an invalid hex color string.',
							_1: {
								ctor: '::',
								_0: 'Please see: https://drafts.csswg.org/css-color/#hex-notation',
								_1: {ctor: '[]'}
							}
						}
					}
				}))
	};
};
var _rtfeldman$elm_css$Css$validHex = F5(
	function (str, _p22, _p21, _p20, _p19) {
		var _p23 = _p22;
		var _p24 = _p21;
		var _p25 = _p20;
		var _p26 = _p19;
		var toResult = function (_p27) {
			return _rtfeldman$hex$Hex$fromString(
				_elm_lang$core$String$toLower(
					_elm_lang$core$String$fromList(_p27)));
		};
		var results = {
			ctor: '_Tuple4',
			_0: toResult(
				{
					ctor: '::',
					_0: _p23._0,
					_1: {
						ctor: '::',
						_0: _p23._1,
						_1: {ctor: '[]'}
					}
				}),
			_1: toResult(
				{
					ctor: '::',
					_0: _p24._0,
					_1: {
						ctor: '::',
						_0: _p24._1,
						_1: {ctor: '[]'}
					}
				}),
			_2: toResult(
				{
					ctor: '::',
					_0: _p25._0,
					_1: {
						ctor: '::',
						_0: _p25._1,
						_1: {ctor: '[]'}
					}
				}),
			_3: toResult(
				{
					ctor: '::',
					_0: _p26._0,
					_1: {
						ctor: '::',
						_0: _p26._1,
						_1: {ctor: '[]'}
					}
				})
		};
		var _p28 = results;
		if (((((_p28.ctor === '_Tuple4') && (_p28._0.ctor === 'Ok')) && (_p28._1.ctor === 'Ok')) && (_p28._2.ctor === 'Ok')) && (_p28._3.ctor === 'Ok')) {
			return {
				value: _rtfeldman$elm_css$Css$withPrecedingHash(str),
				color: _rtfeldman$elm_css$Css$Compatible,
				red: _p28._0._0,
				green: _p28._1._0,
				blue: _p28._2._0,
				alpha: _elm_lang$core$Basics$toFloat(_p28._3._0) / 255,
				warnings: {ctor: '[]'}
			};
		} else {
			return _rtfeldman$elm_css$Css$erroneousHex(str);
		}
	});
var _rtfeldman$elm_css$Css$hex = function (str) {
	var withoutHash = A2(_elm_lang$core$String$startsWith, '#', str) ? A2(_elm_lang$core$String$dropLeft, 1, str) : str;
	var _p29 = _elm_lang$core$String$toList(withoutHash);
	_v22_4:
	do {
		if (((_p29.ctor === '::') && (_p29._1.ctor === '::')) && (_p29._1._1.ctor === '::')) {
			if (_p29._1._1._1.ctor === '[]') {
				var _p32 = _p29._0;
				var _p31 = _p29._1._0;
				var _p30 = _p29._1._1._0;
				return A5(
					_rtfeldman$elm_css$Css$validHex,
					str,
					{ctor: '_Tuple2', _0: _p32, _1: _p32},
					{ctor: '_Tuple2', _0: _p31, _1: _p31},
					{ctor: '_Tuple2', _0: _p30, _1: _p30},
					{
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.chr('f'),
						_1: _elm_lang$core$Native_Utils.chr('f')
					});
			} else {
				if (_p29._1._1._1._1.ctor === '[]') {
					var _p36 = _p29._0;
					var _p35 = _p29._1._0;
					var _p34 = _p29._1._1._0;
					var _p33 = _p29._1._1._1._0;
					return A5(
						_rtfeldman$elm_css$Css$validHex,
						str,
						{ctor: '_Tuple2', _0: _p36, _1: _p36},
						{ctor: '_Tuple2', _0: _p35, _1: _p35},
						{ctor: '_Tuple2', _0: _p34, _1: _p34},
						{ctor: '_Tuple2', _0: _p33, _1: _p33});
				} else {
					if (_p29._1._1._1._1._1.ctor === '::') {
						if (_p29._1._1._1._1._1._1.ctor === '[]') {
							return A5(
								_rtfeldman$elm_css$Css$validHex,
								str,
								{ctor: '_Tuple2', _0: _p29._0, _1: _p29._1._0},
								{ctor: '_Tuple2', _0: _p29._1._1._0, _1: _p29._1._1._1._0},
								{ctor: '_Tuple2', _0: _p29._1._1._1._1._0, _1: _p29._1._1._1._1._1._0},
								{
									ctor: '_Tuple2',
									_0: _elm_lang$core$Native_Utils.chr('f'),
									_1: _elm_lang$core$Native_Utils.chr('f')
								});
						} else {
							if ((_p29._1._1._1._1._1._1._1.ctor === '::') && (_p29._1._1._1._1._1._1._1._1.ctor === '[]')) {
								return A5(
									_rtfeldman$elm_css$Css$validHex,
									str,
									{ctor: '_Tuple2', _0: _p29._0, _1: _p29._1._0},
									{ctor: '_Tuple2', _0: _p29._1._1._0, _1: _p29._1._1._1._0},
									{ctor: '_Tuple2', _0: _p29._1._1._1._1._0, _1: _p29._1._1._1._1._1._0},
									{ctor: '_Tuple2', _0: _p29._1._1._1._1._1._1._0, _1: _p29._1._1._1._1._1._1._1._0});
							} else {
								break _v22_4;
							}
						}
					} else {
						break _v22_4;
					}
				}
			}
		} else {
			break _v22_4;
		}
	} while(false);
	return _rtfeldman$elm_css$Css$erroneousHex(str);
};
var _rtfeldman$elm_css$Css$hslaToRgba = F6(
	function (value, warnings, hue, saturation, lightness, hslAlpha) {
		var _p37 = _elm_lang$core$Color$toRgb(
			A4(_elm_lang$core$Color$hsla, hue, saturation, lightness, hslAlpha));
		var red = _p37.red;
		var green = _p37.green;
		var blue = _p37.blue;
		var alpha = _p37.alpha;
		return {value: value, color: _rtfeldman$elm_css$Css$Compatible, red: red, green: green, blue: blue, alpha: alpha, warnings: warnings};
	});
var _rtfeldman$elm_css$Css$hsl = F3(
	function (hue, saturation, lightness) {
		var valuesList = {
			ctor: '::',
			_0: _rtfeldman$elm_css$Css$numberToString(hue),
			_1: {
				ctor: '::',
				_0: _rtfeldman$elm_css$Css$numericalPercentageToString(saturation),
				_1: {
					ctor: '::',
					_0: _rtfeldman$elm_css$Css$numericalPercentageToString(lightness),
					_1: {ctor: '[]'}
				}
			}
		};
		var value = A2(_rtfeldman$elm_css$Css$cssFunction, 'hsl', valuesList);
		var warnings = ((_elm_lang$core$Native_Utils.cmp(hue, 360) > 0) || ((_elm_lang$core$Native_Utils.cmp(hue, 0) < 0) || ((_elm_lang$core$Native_Utils.cmp(saturation, 1) > 0) || ((_elm_lang$core$Native_Utils.cmp(saturation, 0) < 0) || ((_elm_lang$core$Native_Utils.cmp(lightness, 1) > 0) || (_elm_lang$core$Native_Utils.cmp(lightness, 0) < 0)))))) ? {
			ctor: '::',
			_0: A2(
				_elm_lang$core$Basics_ops['++'],
				'HSL color values must have an H value between 0 and 360 (as in degrees) and S and L values between 0 and 1. ',
				A2(_elm_lang$core$Basics_ops['++'], value, ' is not valid.')),
			_1: {ctor: '[]'}
		} : {ctor: '[]'};
		return A6(_rtfeldman$elm_css$Css$hslaToRgba, value, warnings, hue, saturation, lightness, 1);
	});
var _rtfeldman$elm_css$Css$hsla = F4(
	function (hue, saturation, lightness, alpha) {
		var valuesList = {
			ctor: '::',
			_0: _rtfeldman$elm_css$Css$numberToString(hue),
			_1: {
				ctor: '::',
				_0: _rtfeldman$elm_css$Css$numericalPercentageToString(saturation),
				_1: {
					ctor: '::',
					_0: _rtfeldman$elm_css$Css$numericalPercentageToString(lightness),
					_1: {
						ctor: '::',
						_0: _rtfeldman$elm_css$Css$numberToString(alpha),
						_1: {ctor: '[]'}
					}
				}
			}
		};
		var value = A2(_rtfeldman$elm_css$Css$cssFunction, 'hsla', valuesList);
		var warnings = ((_elm_lang$core$Native_Utils.cmp(hue, 360) > 0) || ((_elm_lang$core$Native_Utils.cmp(hue, 0) < 0) || ((_elm_lang$core$Native_Utils.cmp(saturation, 1) > 0) || ((_elm_lang$core$Native_Utils.cmp(saturation, 0) < 0) || ((_elm_lang$core$Native_Utils.cmp(lightness, 1) > 0) || ((_elm_lang$core$Native_Utils.cmp(lightness, 0) < 0) || ((_elm_lang$core$Native_Utils.cmp(alpha, 1) > 0) || (_elm_lang$core$Native_Utils.cmp(alpha, 0) < 0)))))))) ? {
			ctor: '::',
			_0: A2(
				_elm_lang$core$Basics_ops['++'],
				'HSLA color values must have an H value between 0 and 360 (as in degrees) and S, L, and A values between 0 and 1. ',
				A2(_elm_lang$core$Basics_ops['++'], value, ' is not valid.')),
			_1: {ctor: '[]'}
		} : {ctor: '[]'};
		return A6(_rtfeldman$elm_css$Css$hslaToRgba, value, warnings, hue, saturation, lightness, alpha);
	});
var _rtfeldman$elm_css$Css$optimizeSpeed = {value: 'optimizeSpeed', textRendering: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$optimizeLegibility = {value: 'optimizeLegibility', textRendering: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$geometricPrecision = {value: 'geometricPrecision', textRendering: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$hanging = {value: 'hanging', textIndent: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$eachLine = {value: 'each-line', textIndent: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$mixed = {value: 'mixed', textOrientation: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$upright = {value: 'upright', textOrientation: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$sideways = {value: 'sideways', textOrientation: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$capitalize = {value: 'capitalize', textTransform: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$uppercase = {value: 'uppercase', textTransform: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$lowercase = {value: 'lowercase', textTransform: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$fullWidth = {value: 'full-width', textTransform: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$ellipsis = {value: 'ellipsis', textOverflow: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$clip = {value: 'clip', textOverflow: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$wavy = {value: 'wavy', textDecorationStyle: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$dotted = {value: 'dotted', borderStyle: _rtfeldman$elm_css$Css$Compatible, textDecorationStyle: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$dashed = {value: 'dashed', borderStyle: _rtfeldman$elm_css$Css$Compatible, textDecorationStyle: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$solid = {value: 'solid', borderStyle: _rtfeldman$elm_css$Css$Compatible, textDecorationStyle: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$double = {value: 'double', borderStyle: _rtfeldman$elm_css$Css$Compatible, textDecorationStyle: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$groove = {value: 'groove', borderStyle: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$ridge = {value: 'ridge', borderStyle: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$inset = {value: 'inset', borderStyle: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$outset = {value: 'outset', borderStyle: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$separate = {value: 'separate', borderCollapse: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$collapse = {value: 'collapse', borderCollapse: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$lengthConverter = F3(
	function (units, unitLabel, numericValue) {
		return {
			value: A2(
				_elm_lang$core$Basics_ops['++'],
				_rtfeldman$elm_css$Css$numberToString(numericValue),
				unitLabel),
			numericValue: numericValue,
			units: units,
			unitLabel: unitLabel,
			length: _rtfeldman$elm_css$Css$Compatible,
			lengthOrAuto: _rtfeldman$elm_css$Css$Compatible,
			lengthOrNumber: _rtfeldman$elm_css$Css$Compatible,
			lengthOrNone: _rtfeldman$elm_css$Css$Compatible,
			lengthOrMinMaxDimension: _rtfeldman$elm_css$Css$Compatible,
			lengthOrNoneOrMinMaxDimension: _rtfeldman$elm_css$Css$Compatible,
			textIndent: _rtfeldman$elm_css$Css$Compatible,
			flexBasis: _rtfeldman$elm_css$Css$Compatible,
			lengthOrNumberOrAutoOrNoneOrContent: _rtfeldman$elm_css$Css$Compatible,
			fontSize: _rtfeldman$elm_css$Css$Compatible,
			lengthOrAutoOrCoverOrContain: _rtfeldman$elm_css$Css$Compatible
		};
	});
var _rtfeldman$elm_css$Css$angleConverter = F2(
	function (suffix, num) {
		return {
			value: A2(
				_elm_lang$core$Basics_ops['++'],
				_rtfeldman$elm_css$Css$numberToString(num),
				suffix),
			angle: _rtfeldman$elm_css$Css$Compatible
		};
	});
var _rtfeldman$elm_css$Css$deg = _rtfeldman$elm_css$Css$angleConverter('deg');
var _rtfeldman$elm_css$Css$grad = _rtfeldman$elm_css$Css$angleConverter('grad');
var _rtfeldman$elm_css$Css$rad = _rtfeldman$elm_css$Css$angleConverter('rad');
var _rtfeldman$elm_css$Css$turn = _rtfeldman$elm_css$Css$angleConverter('turn');
var _rtfeldman$elm_css$Css$matrix = F6(
	function (a, b, c, d, tx, ty) {
		return {
			value: A2(
				_rtfeldman$elm_css$Css$cssFunction,
				'matrix',
				A2(
					_elm_lang$core$List$map,
					_rtfeldman$elm_css$Css$numberToString,
					{
						ctor: '::',
						_0: a,
						_1: {
							ctor: '::',
							_0: b,
							_1: {
								ctor: '::',
								_0: c,
								_1: {
									ctor: '::',
									_0: d,
									_1: {
										ctor: '::',
										_0: tx,
										_1: {
											ctor: '::',
											_0: ty,
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					})),
			transform: _rtfeldman$elm_css$Css$Compatible
		};
	});
var _rtfeldman$elm_css$Css$matrix3d = function (a1) {
	return function (a2) {
		return function (a3) {
			return function (a4) {
				return function (b1) {
					return function (b2) {
						return function (b3) {
							return function (b4) {
								return function (c1) {
									return function (c2) {
										return function (c3) {
											return function (c4) {
												return function (d1) {
													return function (d2) {
														return function (d3) {
															return function (d4) {
																return {
																	value: A2(
																		_rtfeldman$elm_css$Css$cssFunction,
																		'matrix3d',
																		A2(
																			_elm_lang$core$List$map,
																			_rtfeldman$elm_css$Css$numberToString,
																			{
																				ctor: '::',
																				_0: a1,
																				_1: {
																					ctor: '::',
																					_0: a2,
																					_1: {
																						ctor: '::',
																						_0: a3,
																						_1: {
																							ctor: '::',
																							_0: a4,
																							_1: {
																								ctor: '::',
																								_0: b1,
																								_1: {
																									ctor: '::',
																									_0: b2,
																									_1: {
																										ctor: '::',
																										_0: b3,
																										_1: {
																											ctor: '::',
																											_0: b4,
																											_1: {
																												ctor: '::',
																												_0: c1,
																												_1: {
																													ctor: '::',
																													_0: c2,
																													_1: {
																														ctor: '::',
																														_0: c3,
																														_1: {
																															ctor: '::',
																															_0: c4,
																															_1: {
																																ctor: '::',
																																_0: d1,
																																_1: {
																																	ctor: '::',
																																	_0: d2,
																																	_1: {
																																		ctor: '::',
																																		_0: d3,
																																		_1: {
																																			ctor: '::',
																																			_0: d4,
																																			_1: {ctor: '[]'}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			})),
																	transform: _rtfeldman$elm_css$Css$Compatible
																};
															};
														};
													};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _rtfeldman$elm_css$Css$perspective = function (l) {
	return {
		value: A2(
			_rtfeldman$elm_css$Css$cssFunction,
			'perspective',
			{
				ctor: '::',
				_0: _rtfeldman$elm_css$Css$numberToString(l),
				_1: {ctor: '[]'}
			}),
		transform: _rtfeldman$elm_css$Css$Compatible
	};
};
var _rtfeldman$elm_css$Css$rotate = function (_p38) {
	var _p39 = _p38;
	return {
		value: A2(
			_rtfeldman$elm_css$Css$cssFunction,
			'rotate',
			{
				ctor: '::',
				_0: _p39.value,
				_1: {ctor: '[]'}
			}),
		transform: _rtfeldman$elm_css$Css$Compatible
	};
};
var _rtfeldman$elm_css$Css$rotateX = function (_p40) {
	var _p41 = _p40;
	return {
		value: A2(
			_rtfeldman$elm_css$Css$cssFunction,
			'rotateX',
			{
				ctor: '::',
				_0: _p41.value,
				_1: {ctor: '[]'}
			}),
		transform: _rtfeldman$elm_css$Css$Compatible
	};
};
var _rtfeldman$elm_css$Css$rotateY = function (_p42) {
	var _p43 = _p42;
	return {
		value: A2(
			_rtfeldman$elm_css$Css$cssFunction,
			'rotateY',
			{
				ctor: '::',
				_0: _p43.value,
				_1: {ctor: '[]'}
			}),
		transform: _rtfeldman$elm_css$Css$Compatible
	};
};
var _rtfeldman$elm_css$Css$rotateZ = function (_p44) {
	var _p45 = _p44;
	return {
		value: A2(
			_rtfeldman$elm_css$Css$cssFunction,
			'rotateZ',
			{
				ctor: '::',
				_0: _p45.value,
				_1: {ctor: '[]'}
			}),
		transform: _rtfeldman$elm_css$Css$Compatible
	};
};
var _rtfeldman$elm_css$Css$rotate3d = F4(
	function (x, y, z, _p46) {
		var _p47 = _p46;
		var coordsAsStrings = A2(
			_elm_lang$core$List$map,
			_rtfeldman$elm_css$Css$numberToString,
			{
				ctor: '::',
				_0: x,
				_1: {
					ctor: '::',
					_0: y,
					_1: {
						ctor: '::',
						_0: z,
						_1: {ctor: '[]'}
					}
				}
			});
		return {
			value: A2(
				_rtfeldman$elm_css$Css$cssFunction,
				'rotate3d',
				A2(
					_elm_lang$core$Basics_ops['++'],
					coordsAsStrings,
					{
						ctor: '::',
						_0: _p47.value,
						_1: {ctor: '[]'}
					})),
			transform: _rtfeldman$elm_css$Css$Compatible
		};
	});
var _rtfeldman$elm_css$Css$scale = function (x) {
	return {
		value: A2(
			_rtfeldman$elm_css$Css$cssFunction,
			'scale',
			{
				ctor: '::',
				_0: _rtfeldman$elm_css$Css$numberToString(x),
				_1: {ctor: '[]'}
			}),
		transform: _rtfeldman$elm_css$Css$Compatible
	};
};
var _rtfeldman$elm_css$Css$scale2 = F2(
	function (x, y) {
		return {
			value: A2(
				_rtfeldman$elm_css$Css$cssFunction,
				'scale',
				A2(
					_elm_lang$core$List$map,
					_rtfeldman$elm_css$Css$numberToString,
					{
						ctor: '::',
						_0: x,
						_1: {
							ctor: '::',
							_0: y,
							_1: {ctor: '[]'}
						}
					})),
			transform: _rtfeldman$elm_css$Css$Compatible
		};
	});
var _rtfeldman$elm_css$Css$scaleX = function (x) {
	return {
		value: A2(
			_rtfeldman$elm_css$Css$cssFunction,
			'scaleX',
			{
				ctor: '::',
				_0: _rtfeldman$elm_css$Css$numberToString(x),
				_1: {ctor: '[]'}
			}),
		transform: _rtfeldman$elm_css$Css$Compatible
	};
};
var _rtfeldman$elm_css$Css$scaleY = function (y) {
	return {
		value: A2(
			_rtfeldman$elm_css$Css$cssFunction,
			'scaleY',
			{
				ctor: '::',
				_0: _rtfeldman$elm_css$Css$numberToString(y),
				_1: {ctor: '[]'}
			}),
		transform: _rtfeldman$elm_css$Css$Compatible
	};
};
var _rtfeldman$elm_css$Css$scale3d = F3(
	function (x, y, z) {
		return {
			value: A2(
				_rtfeldman$elm_css$Css$cssFunction,
				'scale3d',
				A2(
					_elm_lang$core$List$map,
					_rtfeldman$elm_css$Css$numberToString,
					{
						ctor: '::',
						_0: x,
						_1: {
							ctor: '::',
							_0: y,
							_1: {
								ctor: '::',
								_0: z,
								_1: {ctor: '[]'}
							}
						}
					})),
			transform: _rtfeldman$elm_css$Css$Compatible
		};
	});
var _rtfeldman$elm_css$Css$skew = function (_p48) {
	var _p49 = _p48;
	return {
		value: A2(
			_rtfeldman$elm_css$Css$cssFunction,
			'skew',
			{
				ctor: '::',
				_0: _p49.value,
				_1: {ctor: '[]'}
			}),
		transform: _rtfeldman$elm_css$Css$Compatible
	};
};
var _rtfeldman$elm_css$Css$skew2 = F2(
	function (ax, ay) {
		return {
			value: A2(
				_rtfeldman$elm_css$Css$cssFunction,
				'skew',
				{
					ctor: '::',
					_0: ax.value,
					_1: {
						ctor: '::',
						_0: ay.value,
						_1: {ctor: '[]'}
					}
				}),
			transform: _rtfeldman$elm_css$Css$Compatible
		};
	});
var _rtfeldman$elm_css$Css$skewX = function (_p50) {
	var _p51 = _p50;
	return {
		value: A2(
			_rtfeldman$elm_css$Css$cssFunction,
			'skewX',
			{
				ctor: '::',
				_0: _p51.value,
				_1: {ctor: '[]'}
			}),
		transform: _rtfeldman$elm_css$Css$Compatible
	};
};
var _rtfeldman$elm_css$Css$skewY = function (_p52) {
	var _p53 = _p52;
	return {
		value: A2(
			_rtfeldman$elm_css$Css$cssFunction,
			'skewY',
			{
				ctor: '::',
				_0: _p53.value,
				_1: {ctor: '[]'}
			}),
		transform: _rtfeldman$elm_css$Css$Compatible
	};
};
var _rtfeldman$elm_css$Css$translate = function (_p54) {
	var _p55 = _p54;
	return {
		value: A2(
			_rtfeldman$elm_css$Css$cssFunction,
			'translate',
			{
				ctor: '::',
				_0: _p55.value,
				_1: {ctor: '[]'}
			}),
		transform: _rtfeldman$elm_css$Css$Compatible
	};
};
var _rtfeldman$elm_css$Css$translate2 = F2(
	function (tx, ty) {
		return {
			value: A2(
				_rtfeldman$elm_css$Css$cssFunction,
				'translate',
				{
					ctor: '::',
					_0: tx.value,
					_1: {
						ctor: '::',
						_0: ty.value,
						_1: {ctor: '[]'}
					}
				}),
			transform: _rtfeldman$elm_css$Css$Compatible
		};
	});
var _rtfeldman$elm_css$Css$translateX = function (_p56) {
	var _p57 = _p56;
	return {
		value: A2(
			_rtfeldman$elm_css$Css$cssFunction,
			'translateX',
			{
				ctor: '::',
				_0: _p57.value,
				_1: {ctor: '[]'}
			}),
		transform: _rtfeldman$elm_css$Css$Compatible
	};
};
var _rtfeldman$elm_css$Css$translateY = function (_p58) {
	var _p59 = _p58;
	return {
		value: A2(
			_rtfeldman$elm_css$Css$cssFunction,
			'translateY',
			{
				ctor: '::',
				_0: _p59.value,
				_1: {ctor: '[]'}
			}),
		transform: _rtfeldman$elm_css$Css$Compatible
	};
};
var _rtfeldman$elm_css$Css$translateZ = function (_p60) {
	var _p61 = _p60;
	return {
		value: A2(
			_rtfeldman$elm_css$Css$cssFunction,
			'translateZ',
			{
				ctor: '::',
				_0: _p61.value,
				_1: {ctor: '[]'}
			}),
		transform: _rtfeldman$elm_css$Css$Compatible
	};
};
var _rtfeldman$elm_css$Css$translate3d = F3(
	function (tx, ty, tz) {
		return {
			value: A2(
				_rtfeldman$elm_css$Css$cssFunction,
				'translate3d',
				{
					ctor: '::',
					_0: tx.value,
					_1: {
						ctor: '::',
						_0: ty.value,
						_1: {
							ctor: '::',
							_0: tz.value,
							_1: {ctor: '[]'}
						}
					}
				}),
			transform: _rtfeldman$elm_css$Css$Compatible
		};
	});
var _rtfeldman$elm_css$Css$fillBox = {value: 'fill-box', transformBox: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$contentBox = {value: 'content-box', boxSizing: _rtfeldman$elm_css$Css$Compatible, backgroundClip: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$borderBox = {value: 'border-box', boxSizing: _rtfeldman$elm_css$Css$Compatible, backgroundClip: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$viewBox = {value: 'view-box', transformBox: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$preserve3d = {value: 'preserve-3d', transformStyle: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$flat = {value: 'flat', transformStyle: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$inside = {value: 'inside', listStylePosition: _rtfeldman$elm_css$Css$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$outside = {value: 'outside', listStylePosition: _rtfeldman$elm_css$Css$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$disc = {value: 'disc', listStyleType: _rtfeldman$elm_css$Css$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$circle = {value: 'circle', listStyleType: _rtfeldman$elm_css$Css$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$square = {value: 'square', listStyleType: _rtfeldman$elm_css$Css$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$decimal = {value: 'decimal', listStyleType: _rtfeldman$elm_css$Css$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$decimalLeadingZero = {value: 'decimal-leading-zero', listStyleType: _rtfeldman$elm_css$Css$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$lowerRoman = {value: 'lower-roman', listStyleType: _rtfeldman$elm_css$Css$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$upperRoman = {value: 'upper-roman', listStyleType: _rtfeldman$elm_css$Css$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$lowerGreek = {value: 'lower-greek', listStyleType: _rtfeldman$elm_css$Css$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$upperGreek = {value: 'upper-greek', listStyleType: _rtfeldman$elm_css$Css$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$lowerAlpha = {value: 'lower-alpha', listStyleType: _rtfeldman$elm_css$Css$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$upperAlpha = {value: 'upper-alpha', listStyleType: _rtfeldman$elm_css$Css$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$lowerLatin = {value: 'lower-latin', listStyleType: _rtfeldman$elm_css$Css$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$upperLatin = {value: 'upper-latin', listStyleType: _rtfeldman$elm_css$Css$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$arabicIndic = {value: 'arabic-indic', listStyleType: _rtfeldman$elm_css$Css$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$armenian = {value: 'armenian', listStyleType: _rtfeldman$elm_css$Css$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$bengali = {value: 'bengali', listStyleType: _rtfeldman$elm_css$Css$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$cjkEarthlyBranch = {value: 'cjk-earthly-branch', listStyleType: _rtfeldman$elm_css$Css$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$cjkHeavenlyStem = {value: 'cjk-heavenly-stem', listStyleType: _rtfeldman$elm_css$Css$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$devanagari = {value: 'devanagari', listStyleType: _rtfeldman$elm_css$Css$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$georgian = {value: 'georgian', listStyleType: _rtfeldman$elm_css$Css$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$gujarati = {value: 'gujarati', listStyleType: _rtfeldman$elm_css$Css$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$gurmukhi = {value: 'gurmukhi', listStyleType: _rtfeldman$elm_css$Css$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$kannada = {value: 'kannada', listStyleType: _rtfeldman$elm_css$Css$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$khmer = {value: 'khmer', listStyleType: _rtfeldman$elm_css$Css$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$lao = {value: 'lao', listStyleType: _rtfeldman$elm_css$Css$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$malayalam = {value: 'malayalam', listStyleType: _rtfeldman$elm_css$Css$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$myanmar = {value: 'myanmar', listStyleType: _rtfeldman$elm_css$Css$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$oriya = {value: 'oriya', listStyleType: _rtfeldman$elm_css$Css$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$telugu = {value: 'telugu', listStyleType: _rtfeldman$elm_css$Css$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$thai = {value: 'thai', listStyleType: _rtfeldman$elm_css$Css$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$content = {value: 'content', flexBasis: _rtfeldman$elm_css$Css$Compatible, lengthOrNumberOrAutoOrNoneOrContent: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$wrap = {value: 'wrap', flexWrap: _rtfeldman$elm_css$Css$Compatible, flexDirectionOrWrap: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$wrapReverse = _elm_lang$core$Native_Utils.update(
	_rtfeldman$elm_css$Css$wrap,
	{value: 'wrap-reverse'});
var _rtfeldman$elm_css$Css$row = {value: 'row', flexDirection: _rtfeldman$elm_css$Css$Compatible, flexDirectionOrWrap: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$rowReverse = _elm_lang$core$Native_Utils.update(
	_rtfeldman$elm_css$Css$row,
	{value: 'row-reverse'});
var _rtfeldman$elm_css$Css$column = _elm_lang$core$Native_Utils.update(
	_rtfeldman$elm_css$Css$row,
	{value: 'column'});
var _rtfeldman$elm_css$Css$columnReverse = _elm_lang$core$Native_Utils.update(
	_rtfeldman$elm_css$Css$row,
	{value: 'column-reverse'});
var _rtfeldman$elm_css$Css$underline = {value: 'underline', textDecorationLine: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$overline = {value: 'overline', textDecorationLine: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$lineThrough = {value: 'line-through', textDecorationLine: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$repeatX = {value: 'repeat-x', backgroundRepeatShorthand: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$repeatY = {value: 'repeat-y', backgroundRepeatShorthand: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$repeat = {value: 'repeat', backgroundRepeat: _rtfeldman$elm_css$Css$Compatible, backgroundRepeatShorthand: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$space = {value: 'space', backgroundRepeat: _rtfeldman$elm_css$Css$Compatible, backgroundRepeatShorthand: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$round = {value: 'round', backgroundRepeat: _rtfeldman$elm_css$Css$Compatible, backgroundRepeatShorthand: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$noRepeat = {value: 'no-repeat', backgroundRepeat: _rtfeldman$elm_css$Css$Compatible, backgroundRepeatShorthand: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$local = {value: 'local', backgroundAttachment: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$block = {value: 'block', display: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$inlineBlock = {value: 'inline-block', display: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$inline = {value: 'inline', display: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$table = {value: 'table', display: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$inlineTable = {value: 'inline-table', display: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$tableRow = {value: 'table-row', display: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$tableCell = {value: 'table-cell', display: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$tableColumn = {value: 'table-column', display: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$tableCaption = {value: 'table-caption', display: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$tableRowGroup = {value: 'table-row-group', display: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$tableColumnGroup = {value: 'table-column-group', display: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$tableHeaderGroup = {value: 'table-header-group', display: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$tableFooterGroup = {value: 'table-footer-group', display: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$listItem = {value: 'list-item', display: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$inlineListItem = {value: 'inline-list-item', display: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$none = {value: 'none', cursor: _rtfeldman$elm_css$Css$Compatible, none: _rtfeldman$elm_css$Css$Compatible, lengthOrNone: _rtfeldman$elm_css$Css$Compatible, lengthOrNoneOrMinMaxDimension: _rtfeldman$elm_css$Css$Compatible, lengthOrNumberOrAutoOrNoneOrContent: _rtfeldman$elm_css$Css$Compatible, textDecorationLine: _rtfeldman$elm_css$Css$Compatible, listStyleType: _rtfeldman$elm_css$Css$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css$Compatible, display: _rtfeldman$elm_css$Css$Compatible, outline: _rtfeldman$elm_css$Css$Compatible, resize: _rtfeldman$elm_css$Css$Compatible, transform: _rtfeldman$elm_css$Css$Compatible, borderStyle: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$auto = {value: 'auto', cursor: _rtfeldman$elm_css$Css$Compatible, flexBasis: _rtfeldman$elm_css$Css$Compatible, overflow: _rtfeldman$elm_css$Css$Compatible, textRendering: _rtfeldman$elm_css$Css$Compatible, lengthOrAuto: _rtfeldman$elm_css$Css$Compatible, lengthOrNumberOrAutoOrNoneOrContent: _rtfeldman$elm_css$Css$Compatible, alignItemsOrAuto: _rtfeldman$elm_css$Css$Compatible, lengthOrAutoOrCoverOrContain: _rtfeldman$elm_css$Css$Compatible, justifyContentOrAuto: _rtfeldman$elm_css$Css$Compatible, intOrAuto: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$noWrap = {value: 'nowrap', whiteSpace: _rtfeldman$elm_css$Css$Compatible, flexWrap: _rtfeldman$elm_css$Css$Compatible, flexDirectionOrWrap: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$fillAvailable = {value: 'fill-available', minMaxDimension: _rtfeldman$elm_css$Css$Compatible, lengthOrMinMaxDimension: _rtfeldman$elm_css$Css$Compatible, lengthOrNoneOrMinMaxDimension: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$maxContent = _elm_lang$core$Native_Utils.update(
	_rtfeldman$elm_css$Css$fillAvailable,
	{value: 'max-content'});
var _rtfeldman$elm_css$Css$minContent = _elm_lang$core$Native_Utils.update(
	_rtfeldman$elm_css$Css$fillAvailable,
	{value: 'min-content'});
var _rtfeldman$elm_css$Css$fitContent = _elm_lang$core$Native_Utils.update(
	_rtfeldman$elm_css$Css$fillAvailable,
	{value: 'fit-content'});
var _rtfeldman$elm_css$Css$static = {value: 'static', position: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$fixed = {value: 'fixed', position: _rtfeldman$elm_css$Css$Compatible, backgroundAttachment: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$sticky = {value: 'sticky', position: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$relative = {value: 'relative', position: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$absolute = {value: 'absolute', position: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$serif = {value: 'serif', fontFamily: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$sansSerif = {value: 'sans-serif', fontFamily: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$monospace = {value: 'monospace', fontFamily: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$cursive = {value: 'cursive', fontFamily: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$fantasy = {value: 'fantasy', fontFamily: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$xxSmall = {value: 'xx-small', fontSize: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$xSmall = {value: 'x-small', fontSize: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$small = {value: 'small', fontSize: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$medium = {value: 'medium', fontSize: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$large = {value: 'large', fontSize: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$xLarge = {value: 'x-large', fontSize: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$xxLarge = {value: 'xx-large', fontSize: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$smaller = {value: 'smaller', fontSize: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$larger = {value: 'larger', fontSize: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$normal = {
	value: 'normal',
	warnings: {ctor: '[]'},
	fontStyle: _rtfeldman$elm_css$Css$Compatible,
	fontWeight: _rtfeldman$elm_css$Css$Compatible,
	featureTagValue: _rtfeldman$elm_css$Css$Compatible,
	overflowWrap: _rtfeldman$elm_css$Css$Compatible
};
var _rtfeldman$elm_css$Css$italic = {value: 'italic', fontStyle: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$oblique = {value: 'oblique', fontStyle: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$bold = {value: 'bold', fontWeight: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$lighter = {value: 'lighter', fontWeight: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$bolder = {value: 'bolder', fontWeight: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$smallCaps = {value: 'small-caps', fontVariant: _rtfeldman$elm_css$Css$Compatible, fontVariantCaps: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$allSmallCaps = {value: 'all-small-caps', fontVariant: _rtfeldman$elm_css$Css$Compatible, fontVariantCaps: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$petiteCaps = {value: 'petite-caps', fontVariant: _rtfeldman$elm_css$Css$Compatible, fontVariantCaps: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$allPetiteCaps = {value: 'all-petite-caps', fontVariant: _rtfeldman$elm_css$Css$Compatible, fontVariantCaps: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$unicase = {value: 'unicase', fontVariant: _rtfeldman$elm_css$Css$Compatible, fontVariantCaps: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$titlingCaps = {value: 'titling-caps', fontVariant: _rtfeldman$elm_css$Css$Compatible, fontVariantCaps: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$commonLigatures = {value: 'common-ligatures', fontVariant: _rtfeldman$elm_css$Css$Compatible, fontVariantLigatures: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$noCommonLigatures = {value: 'no-common-ligatures', fontVariant: _rtfeldman$elm_css$Css$Compatible, fontVariantLigatures: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$discretionaryLigatures = {value: 'discretionary-ligatures', fontVariant: _rtfeldman$elm_css$Css$Compatible, fontVariantLigatures: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$noDiscretionaryLigatures = {value: 'no-discretionary-ligatures', fontVariant: _rtfeldman$elm_css$Css$Compatible, fontVariantLigatures: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$historicalLigatures = {value: 'historical-ligatures', fontVariant: _rtfeldman$elm_css$Css$Compatible, fontVariantLigatures: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$noHistoricalLigatures = {value: 'no-historical-ligatures', fontVariant: _rtfeldman$elm_css$Css$Compatible, fontVariantLigatures: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$contextual = {value: 'context', fontVariant: _rtfeldman$elm_css$Css$Compatible, fontVariantLigatures: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$noContextual = {value: 'no-contextual', fontVariant: _rtfeldman$elm_css$Css$Compatible, fontVariantLigatures: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$liningNums = {value: 'lining-nums', fontVariant: _rtfeldman$elm_css$Css$Compatible, fontVariantNumeric: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$oldstyleNums = {value: 'oldstyle-nums', fontVariant: _rtfeldman$elm_css$Css$Compatible, fontVariantNumeric: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$proportionalNums = {value: 'proportional-nums', fontVariant: _rtfeldman$elm_css$Css$Compatible, fontVariantNumeric: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$tabularNums = {value: 'tabular-nums', fontVariant: _rtfeldman$elm_css$Css$Compatible, fontVariantNumeric: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$diagonalFractions = {value: 'diagonal-fractions', fontVariant: _rtfeldman$elm_css$Css$Compatible, fontVariantNumeric: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$stackedFractions = {value: 'stacked-fractions', fontVariant: _rtfeldman$elm_css$Css$Compatible, fontVariantNumeric: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$ordinal = {value: 'ordinal', fontVariant: _rtfeldman$elm_css$Css$Compatible, fontVariantNumeric: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$slashedZero = {value: 'slashed-zero', fontVariant: _rtfeldman$elm_css$Css$Compatible, fontVariantNumeric: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$featureTag2 = F2(
	function (tag, value) {
		var potentialWarnings = {
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: !_elm_lang$core$Native_Utils.eq(
					_elm_lang$core$String$length(tag),
					4),
				_1: A2(
					_elm_lang$core$Basics_ops['++'],
					'Feature tags must be exactly 4 characters long. ',
					A2(_elm_lang$core$Basics_ops['++'], tag, ' is invalid.'))
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.cmp(value, 0) < 0,
					_1: A2(
						_elm_lang$core$Basics_ops['++'],
						'Feature values cannot be negative. ',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$Basics$toString(value),
							' is invalid.'))
				},
				_1: {ctor: '[]'}
			}
		};
		var warnings = A2(
			_elm_lang$core$List$map,
			_elm_lang$core$Tuple$second,
			A2(_elm_lang$core$List$filter, _elm_lang$core$Tuple$first, potentialWarnings));
		return {
			value: A2(
				_elm_lang$core$Basics_ops['++'],
				_elm_lang$core$Basics$toString(tag),
				A2(
					_elm_lang$core$Basics_ops['++'],
					' ',
					_elm_lang$core$Basics$toString(value))),
			featureTagValue: _rtfeldman$elm_css$Css$Compatible,
			warnings: warnings
		};
	});
var _rtfeldman$elm_css$Css$featureTag = function (tag) {
	return A2(_rtfeldman$elm_css$Css$featureTag2, tag, 1);
};
var _rtfeldman$elm_css$Css$default = {value: 'default', cursor: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$crosshair = {value: 'crosshair', cursor: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$contextMenu = {value: 'context-menu', cursor: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$help = {value: 'help', cursor: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$pointer = {value: 'pointer', cursor: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$progress = {value: 'progress', cursor: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$wait = {value: 'wait', cursor: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$cell = {value: 'cell', cursor: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$text = {value: 'text', cursor: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$verticalText = {value: 'vertical-text', cursor: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$cursorAlias = {value: 'alias', cursor: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$copy = {value: 'copy', cursor: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$move = {value: 'move', cursor: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$noDrop = {value: 'no-drop', cursor: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$notAllowed = {value: 'not-allowed', cursor: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$eResize = {value: 'e-resize', cursor: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$nResize = {value: 'n-resize', cursor: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$neResize = {value: 'ne-resize', cursor: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$nwResize = {value: 'nw-resize', cursor: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$sResize = {value: 's-resize', cursor: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$seResize = {value: 'se-resize', cursor: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$swResize = {value: 'sw-resize', cursor: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$wResize = {value: 'w-resize', cursor: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$ewResize = {value: 'ew-resize', cursor: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$nsResize = {value: 'ns-resize', cursor: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$neswResize = {value: 'nesw-resize', cursor: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$nwseResize = {value: 'nwse-resize', cursor: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$colResize = {value: 'col-resize', cursor: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$rowResize = {value: 'row-resize', cursor: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$allScroll = {value: 'all-scroll', cursor: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$zoomIn = {value: 'zoom-in', cursor: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$zoomOut = {value: 'zoom-out', cursor: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$grab = {value: 'grab', cursor: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$grabbing = {value: 'grabbing', cursor: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$PseudoClass = F2(
	function (a, b) {
		return {ctor: 'PseudoClass', _0: a, _1: b};
	});
var _rtfeldman$elm_css$Css$PseudoElement = F2(
	function (a, b) {
		return {ctor: 'PseudoElement', _0: a, _1: b};
	});
var _rtfeldman$elm_css$Css$PercentageUnits = {ctor: 'PercentageUnits'};
var _rtfeldman$elm_css$Css$pct = A2(_rtfeldman$elm_css$Css$lengthConverter, _rtfeldman$elm_css$Css$PercentageUnits, '%');
var _rtfeldman$elm_css$Css$EmUnits = {ctor: 'EmUnits'};
var _rtfeldman$elm_css$Css$em = A2(_rtfeldman$elm_css$Css$lengthConverter, _rtfeldman$elm_css$Css$EmUnits, 'em');
var _rtfeldman$elm_css$Css$ExUnits = {ctor: 'ExUnits'};
var _rtfeldman$elm_css$Css$ex = A2(_rtfeldman$elm_css$Css$lengthConverter, _rtfeldman$elm_css$Css$ExUnits, 'ex');
var _rtfeldman$elm_css$Css$ChUnits = {ctor: 'ChUnits'};
var _rtfeldman$elm_css$Css$ch = A2(_rtfeldman$elm_css$Css$lengthConverter, _rtfeldman$elm_css$Css$ChUnits, 'ch');
var _rtfeldman$elm_css$Css$RemUnits = {ctor: 'RemUnits'};
var _rtfeldman$elm_css$Css$rem = A2(_rtfeldman$elm_css$Css$lengthConverter, _rtfeldman$elm_css$Css$RemUnits, 'rem');
var _rtfeldman$elm_css$Css$VhUnits = {ctor: 'VhUnits'};
var _rtfeldman$elm_css$Css$vh = A2(_rtfeldman$elm_css$Css$lengthConverter, _rtfeldman$elm_css$Css$VhUnits, 'vh');
var _rtfeldman$elm_css$Css$VwUnits = {ctor: 'VwUnits'};
var _rtfeldman$elm_css$Css$vw = A2(_rtfeldman$elm_css$Css$lengthConverter, _rtfeldman$elm_css$Css$VwUnits, 'vw');
var _rtfeldman$elm_css$Css$VMinUnits = {ctor: 'VMinUnits'};
var _rtfeldman$elm_css$Css$vmin = A2(_rtfeldman$elm_css$Css$lengthConverter, _rtfeldman$elm_css$Css$VMinUnits, 'vmin');
var _rtfeldman$elm_css$Css$VMaxUnits = {ctor: 'VMaxUnits'};
var _rtfeldman$elm_css$Css$vmax = A2(_rtfeldman$elm_css$Css$lengthConverter, _rtfeldman$elm_css$Css$VMaxUnits, 'vmax');
var _rtfeldman$elm_css$Css$PxUnits = {ctor: 'PxUnits'};
var _rtfeldman$elm_css$Css$px = A2(_rtfeldman$elm_css$Css$lengthConverter, _rtfeldman$elm_css$Css$PxUnits, 'px');
var _rtfeldman$elm_css$Css$MMUnits = {ctor: 'MMUnits'};
var _rtfeldman$elm_css$Css$mm = A2(_rtfeldman$elm_css$Css$lengthConverter, _rtfeldman$elm_css$Css$MMUnits, 'mm');
var _rtfeldman$elm_css$Css$CMUnits = {ctor: 'CMUnits'};
var _rtfeldman$elm_css$Css$cm = A2(_rtfeldman$elm_css$Css$lengthConverter, _rtfeldman$elm_css$Css$CMUnits, 'cm');
var _rtfeldman$elm_css$Css$InchUnits = {ctor: 'InchUnits'};
var _rtfeldman$elm_css$Css$inches = A2(_rtfeldman$elm_css$Css$lengthConverter, _rtfeldman$elm_css$Css$InchUnits, 'in');
var _rtfeldman$elm_css$Css$PtUnits = {ctor: 'PtUnits'};
var _rtfeldman$elm_css$Css$pt = A2(_rtfeldman$elm_css$Css$lengthConverter, _rtfeldman$elm_css$Css$PtUnits, 'pt');
var _rtfeldman$elm_css$Css$PcUnits = {ctor: 'PcUnits'};
var _rtfeldman$elm_css$Css$pc = A2(_rtfeldman$elm_css$Css$lengthConverter, _rtfeldman$elm_css$Css$PcUnits, 'pc');
var _rtfeldman$elm_css$Css$UnitlessInteger = {ctor: 'UnitlessInteger'};
var _rtfeldman$elm_css$Css$zero = {value: '0', length: _rtfeldman$elm_css$Css$Compatible, lengthOrNumber: _rtfeldman$elm_css$Css$Compatible, lengthOrNone: _rtfeldman$elm_css$Css$Compatible, lengthOrAuto: _rtfeldman$elm_css$Css$Compatible, lengthOrMinMaxDimension: _rtfeldman$elm_css$Css$Compatible, lengthOrNoneOrMinMaxDimension: _rtfeldman$elm_css$Css$Compatible, number: _rtfeldman$elm_css$Css$Compatible, outline: _rtfeldman$elm_css$Css$Compatible, units: _rtfeldman$elm_css$Css$UnitlessInteger, unitLabel: '', numericValue: 0, lengthOrAutoOrCoverOrContain: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$int = function (val) {
	return {
		value: _rtfeldman$elm_css$Css$numberToString(val),
		lengthOrNumber: _rtfeldman$elm_css$Css$Compatible,
		number: _rtfeldman$elm_css$Css$Compatible,
		fontWeight: _rtfeldman$elm_css$Css$Compatible,
		lengthOrNumberOrAutoOrNoneOrContent: _rtfeldman$elm_css$Css$Compatible,
		intOrAuto: _rtfeldman$elm_css$Css$Compatible,
		numericValue: _elm_lang$core$Basics$toFloat(val),
		unitLabel: '',
		units: _rtfeldman$elm_css$Css$UnitlessInteger
	};
};
var _rtfeldman$elm_css$Css$UnitlessFloat = {ctor: 'UnitlessFloat'};
var _rtfeldman$elm_css$Css$num = function (val) {
	return {
		value: _rtfeldman$elm_css$Css$numberToString(val),
		lengthOrNumber: _rtfeldman$elm_css$Css$Compatible,
		number: _rtfeldman$elm_css$Css$Compatible,
		lengthOrNumberOrAutoOrNoneOrContent: _rtfeldman$elm_css$Css$Compatible,
		numericValue: val,
		unitLabel: '',
		units: _rtfeldman$elm_css$Css$UnitlessFloat
	};
};
var _rtfeldman$elm_css$Css$IncompatibleUnits = {ctor: 'IncompatibleUnits'};
var _rtfeldman$elm_css$Css$initial = {
	value: 'initial',
	overflow: _rtfeldman$elm_css$Css$Compatible,
	none: _rtfeldman$elm_css$Css$Compatible,
	number: _rtfeldman$elm_css$Css$Compatible,
	textDecorationLine: _rtfeldman$elm_css$Css$Compatible,
	textRendering: _rtfeldman$elm_css$Css$Compatible,
	textIndent: _rtfeldman$elm_css$Css$Compatible,
	textDecorationStyle: _rtfeldman$elm_css$Css$Compatible,
	borderStyle: _rtfeldman$elm_css$Css$Compatible,
	boxSizing: _rtfeldman$elm_css$Css$Compatible,
	color: _rtfeldman$elm_css$Css$Compatible,
	cursor: _rtfeldman$elm_css$Css$Compatible,
	display: _rtfeldman$elm_css$Css$Compatible,
	all: _rtfeldman$elm_css$Css$Compatible,
	alignItems: _rtfeldman$elm_css$Css$Compatible,
	justifyContent: _rtfeldman$elm_css$Css$Compatible,
	length: _rtfeldman$elm_css$Css$Compatible,
	lengthOrAuto: _rtfeldman$elm_css$Css$Compatible,
	lengthOrNone: _rtfeldman$elm_css$Css$Compatible,
	lengthOrNumber: _rtfeldman$elm_css$Css$Compatible,
	lengthOrMinMaxDimension: _rtfeldman$elm_css$Css$Compatible,
	lengthOrNoneOrMinMaxDimension: _rtfeldman$elm_css$Css$Compatible,
	listStyleType: _rtfeldman$elm_css$Css$Compatible,
	listStylePosition: _rtfeldman$elm_css$Css$Compatible,
	listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css$Compatible,
	flexBasis: _rtfeldman$elm_css$Css$Compatible,
	flexWrap: _rtfeldman$elm_css$Css$Compatible,
	flexDirection: _rtfeldman$elm_css$Css$Compatible,
	flexDirectionOrWrap: _rtfeldman$elm_css$Css$Compatible,
	lengthOrNumberOrAutoOrNoneOrContent: _rtfeldman$elm_css$Css$Compatible,
	fontFamily: _rtfeldman$elm_css$Css$Compatible,
	fontSize: _rtfeldman$elm_css$Css$Compatible,
	fontStyle: _rtfeldman$elm_css$Css$Compatible,
	fontWeight: _rtfeldman$elm_css$Css$Compatible,
	fontVariant: _rtfeldman$elm_css$Css$Compatible,
	outline: _rtfeldman$elm_css$Css$Compatible,
	units: _rtfeldman$elm_css$Css$IncompatibleUnits,
	numericValue: 0,
	unitLabel: '',
	warnings: {ctor: '[]'},
	backgroundRepeat: _rtfeldman$elm_css$Css$Compatible,
	backgroundRepeatShorthand: _rtfeldman$elm_css$Css$Compatible,
	backgroundAttachment: _rtfeldman$elm_css$Css$Compatible,
	backgroundBlendMode: _rtfeldman$elm_css$Css$Compatible,
	backgroundOrigin: _rtfeldman$elm_css$Css$Compatible,
	backgroundImage: _rtfeldman$elm_css$Css$Compatible,
	lengthOrAutoOrCoverOrContain: _rtfeldman$elm_css$Css$Compatible,
	intOrAuto: _rtfeldman$elm_css$Css$Compatible
};
var _rtfeldman$elm_css$Css$unset = _elm_lang$core$Native_Utils.update(
	_rtfeldman$elm_css$Css$initial,
	{value: 'unset'});
var _rtfeldman$elm_css$Css$inherit = _elm_lang$core$Native_Utils.update(
	_rtfeldman$elm_css$Css$initial,
	{value: 'inherit'});
var _rtfeldman$elm_css$Css$lengthForOverloadedProperty = A3(_rtfeldman$elm_css$Css$lengthConverter, _rtfeldman$elm_css$Css$IncompatibleUnits, '', 0);
var _rtfeldman$elm_css$Css$alignItems = function (fn) {
	return A3(
		_rtfeldman$elm_css$Css$getOverloadedProperty,
		'alignItems',
		'align-items',
		fn(_rtfeldman$elm_css$Css$lengthForOverloadedProperty));
};
var _rtfeldman$elm_css$Css$alignSelf = function (fn) {
	return A3(
		_rtfeldman$elm_css$Css$getOverloadedProperty,
		'alignSelf',
		'align-self',
		fn(_rtfeldman$elm_css$Css$lengthForOverloadedProperty));
};
var _rtfeldman$elm_css$Css$justifyContent = function (fn) {
	return A3(
		_rtfeldman$elm_css$Css$getOverloadedProperty,
		'justifyContent',
		'justify-content',
		fn(_rtfeldman$elm_css$Css$lengthForOverloadedProperty));
};
var _rtfeldman$elm_css$Css$float = function (fn) {
	return A3(
		_rtfeldman$elm_css$Css$getOverloadedProperty,
		'float',
		'float',
		fn(_rtfeldman$elm_css$Css$lengthForOverloadedProperty));
};
var _rtfeldman$elm_css$Css$textAlignLast = function (fn) {
	return A3(
		_rtfeldman$elm_css$Css$getOverloadedProperty,
		'textAlignLast',
		'text-align-last',
		fn(_rtfeldman$elm_css$Css$lengthForOverloadedProperty));
};
var _rtfeldman$elm_css$Css$textAlign = function (fn) {
	return A3(
		_rtfeldman$elm_css$Css$getOverloadedProperty,
		'textAlign',
		'text-align',
		fn(_rtfeldman$elm_css$Css$lengthForOverloadedProperty));
};
var _rtfeldman$elm_css$Css$verticalAlign = function (fn) {
	return A3(
		_rtfeldman$elm_css$Css$getOverloadedProperty,
		'verticalAlign',
		'vertical-align',
		fn(_rtfeldman$elm_css$Css$lengthForOverloadedProperty));
};
var _rtfeldman$elm_css$Css$backgroundPosition = function (fn) {
	return A3(
		_rtfeldman$elm_css$Css$getOverloadedProperty,
		'backgroundPosition',
		'background-position',
		fn(_rtfeldman$elm_css$Css$lengthForOverloadedProperty));
};
var _rtfeldman$elm_css$Css$Rtl = {ctor: 'Rtl'};
var _rtfeldman$elm_css$Css$Ltr = {ctor: 'Ltr'};
var _rtfeldman$elm_css$Css$IntentionallyUnsupportedPleaseSeeDocs = {ctor: 'IntentionallyUnsupportedPleaseSeeDocs'};
var _rtfeldman$elm_css$Css$thin = _rtfeldman$elm_css$Css$IntentionallyUnsupportedPleaseSeeDocs;
var _rtfeldman$elm_css$Css$thick = _rtfeldman$elm_css$Css$IntentionallyUnsupportedPleaseSeeDocs;
var _rtfeldman$elm_css$Css$blink = _rtfeldman$elm_css$Css$IntentionallyUnsupportedPleaseSeeDocs;

var _rtfeldman$elm_css$Css_Elements$typeSelector = F2(
	function (selectorStr, mixins) {
		var sequence = A2(
			_rtfeldman$elm_css$Css_Structure$TypeSelectorSequence,
			_rtfeldman$elm_css$Css_Structure$TypeSelector(selectorStr),
			{ctor: '[]'});
		var selector = A3(
			_rtfeldman$elm_css$Css_Structure$Selector,
			sequence,
			{ctor: '[]'},
			_elm_lang$core$Maybe$Nothing);
		return _rtfeldman$elm_css$Css_Preprocess$Snippet(
			{
				ctor: '::',
				_0: _rtfeldman$elm_css$Css_Preprocess$StyleBlockDeclaration(
					A3(
						_rtfeldman$elm_css$Css_Preprocess$StyleBlock,
						selector,
						{ctor: '[]'},
						mixins)),
				_1: {ctor: '[]'}
			});
	});
var _rtfeldman$elm_css$Css_Elements$html = _rtfeldman$elm_css$Css_Elements$typeSelector('html');
var _rtfeldman$elm_css$Css_Elements$body = _rtfeldman$elm_css$Css_Elements$typeSelector('body');
var _rtfeldman$elm_css$Css_Elements$article = _rtfeldman$elm_css$Css_Elements$typeSelector('article');
var _rtfeldman$elm_css$Css_Elements$header = _rtfeldman$elm_css$Css_Elements$typeSelector('header');
var _rtfeldman$elm_css$Css_Elements$footer = _rtfeldman$elm_css$Css_Elements$typeSelector('footer');
var _rtfeldman$elm_css$Css_Elements$h1 = _rtfeldman$elm_css$Css_Elements$typeSelector('h1');
var _rtfeldman$elm_css$Css_Elements$h2 = _rtfeldman$elm_css$Css_Elements$typeSelector('h2');
var _rtfeldman$elm_css$Css_Elements$h3 = _rtfeldman$elm_css$Css_Elements$typeSelector('h3');
var _rtfeldman$elm_css$Css_Elements$h4 = _rtfeldman$elm_css$Css_Elements$typeSelector('h4');
var _rtfeldman$elm_css$Css_Elements$h5 = _rtfeldman$elm_css$Css_Elements$typeSelector('h5');
var _rtfeldman$elm_css$Css_Elements$h6 = _rtfeldman$elm_css$Css_Elements$typeSelector('h6');
var _rtfeldman$elm_css$Css_Elements$nav = _rtfeldman$elm_css$Css_Elements$typeSelector('nav');
var _rtfeldman$elm_css$Css_Elements$section = _rtfeldman$elm_css$Css_Elements$typeSelector('section');
var _rtfeldman$elm_css$Css_Elements$div = _rtfeldman$elm_css$Css_Elements$typeSelector('div');
var _rtfeldman$elm_css$Css_Elements$hr = _rtfeldman$elm_css$Css_Elements$typeSelector('hr');
var _rtfeldman$elm_css$Css_Elements$li = _rtfeldman$elm_css$Css_Elements$typeSelector('li');
var _rtfeldman$elm_css$Css_Elements$main_ = _rtfeldman$elm_css$Css_Elements$typeSelector('main');
var _rtfeldman$elm_css$Css_Elements$ol = _rtfeldman$elm_css$Css_Elements$typeSelector('ol');
var _rtfeldman$elm_css$Css_Elements$p = _rtfeldman$elm_css$Css_Elements$typeSelector('p');
var _rtfeldman$elm_css$Css_Elements$ul = _rtfeldman$elm_css$Css_Elements$typeSelector('ul');
var _rtfeldman$elm_css$Css_Elements$pre = _rtfeldman$elm_css$Css_Elements$typeSelector('pre');
var _rtfeldman$elm_css$Css_Elements$a = _rtfeldman$elm_css$Css_Elements$typeSelector('a');
var _rtfeldman$elm_css$Css_Elements$code = _rtfeldman$elm_css$Css_Elements$typeSelector('code');
var _rtfeldman$elm_css$Css_Elements$small = _rtfeldman$elm_css$Css_Elements$typeSelector('small');
var _rtfeldman$elm_css$Css_Elements$span = _rtfeldman$elm_css$Css_Elements$typeSelector('span');
var _rtfeldman$elm_css$Css_Elements$strong = _rtfeldman$elm_css$Css_Elements$typeSelector('strong');
var _rtfeldman$elm_css$Css_Elements$i = _rtfeldman$elm_css$Css_Elements$typeSelector('i');
var _rtfeldman$elm_css$Css_Elements$em = _rtfeldman$elm_css$Css_Elements$typeSelector('em');
var _rtfeldman$elm_css$Css_Elements$img = _rtfeldman$elm_css$Css_Elements$typeSelector('img');
var _rtfeldman$elm_css$Css_Elements$audio = _rtfeldman$elm_css$Css_Elements$typeSelector('audio');
var _rtfeldman$elm_css$Css_Elements$video = _rtfeldman$elm_css$Css_Elements$typeSelector('video');
var _rtfeldman$elm_css$Css_Elements$canvas = _rtfeldman$elm_css$Css_Elements$typeSelector('canvas');
var _rtfeldman$elm_css$Css_Elements$caption = _rtfeldman$elm_css$Css_Elements$typeSelector('caption');
var _rtfeldman$elm_css$Css_Elements$col = _rtfeldman$elm_css$Css_Elements$typeSelector('col');
var _rtfeldman$elm_css$Css_Elements$colgroup = _rtfeldman$elm_css$Css_Elements$typeSelector('colgroup');
var _rtfeldman$elm_css$Css_Elements$table = _rtfeldman$elm_css$Css_Elements$typeSelector('table');
var _rtfeldman$elm_css$Css_Elements$tbody = _rtfeldman$elm_css$Css_Elements$typeSelector('tbody');
var _rtfeldman$elm_css$Css_Elements$td = _rtfeldman$elm_css$Css_Elements$typeSelector('td');
var _rtfeldman$elm_css$Css_Elements$tfoot = _rtfeldman$elm_css$Css_Elements$typeSelector('tfoot');
var _rtfeldman$elm_css$Css_Elements$th = _rtfeldman$elm_css$Css_Elements$typeSelector('th');
var _rtfeldman$elm_css$Css_Elements$thead = _rtfeldman$elm_css$Css_Elements$typeSelector('thead');
var _rtfeldman$elm_css$Css_Elements$tr = _rtfeldman$elm_css$Css_Elements$typeSelector('tr');
var _rtfeldman$elm_css$Css_Elements$button = _rtfeldman$elm_css$Css_Elements$typeSelector('button');
var _rtfeldman$elm_css$Css_Elements$fieldset = _rtfeldman$elm_css$Css_Elements$typeSelector('fieldset');
var _rtfeldman$elm_css$Css_Elements$form = _rtfeldman$elm_css$Css_Elements$typeSelector('form');
var _rtfeldman$elm_css$Css_Elements$input = _rtfeldman$elm_css$Css_Elements$typeSelector('input');
var _rtfeldman$elm_css$Css_Elements$label = _rtfeldman$elm_css$Css_Elements$typeSelector('label');
var _rtfeldman$elm_css$Css_Elements$legend = _rtfeldman$elm_css$Css_Elements$typeSelector('legend');
var _rtfeldman$elm_css$Css_Elements$optgroup = _rtfeldman$elm_css$Css_Elements$typeSelector('optgroup');
var _rtfeldman$elm_css$Css_Elements$option = _rtfeldman$elm_css$Css_Elements$typeSelector('option');
var _rtfeldman$elm_css$Css_Elements$progress = _rtfeldman$elm_css$Css_Elements$typeSelector('progress');
var _rtfeldman$elm_css$Css_Elements$select = _rtfeldman$elm_css$Css_Elements$typeSelector('select');
var _rtfeldman$elm_css$Css_Elements$textarea = _rtfeldman$elm_css$Css_Elements$typeSelector('textarea');
var _rtfeldman$elm_css$Css_Elements$blockquote = _rtfeldman$elm_css$Css_Elements$typeSelector('blockquote');
var _rtfeldman$elm_css$Css_Elements$svg = _rtfeldman$elm_css$Css_Elements$typeSelector('svg');
var _rtfeldman$elm_css$Css_Elements$path = _rtfeldman$elm_css$Css_Elements$typeSelector('path');
var _rtfeldman$elm_css$Css_Elements$rect = _rtfeldman$elm_css$Css_Elements$typeSelector('rect');
var _rtfeldman$elm_css$Css_Elements$circle = _rtfeldman$elm_css$Css_Elements$typeSelector('circle');
var _rtfeldman$elm_css$Css_Elements$ellipse = _rtfeldman$elm_css$Css_Elements$typeSelector('ellipse');
var _rtfeldman$elm_css$Css_Elements$line = _rtfeldman$elm_css$Css_Elements$typeSelector('line');
var _rtfeldman$elm_css$Css_Elements$polyline = _rtfeldman$elm_css$Css_Elements$typeSelector('polyline');
var _rtfeldman$elm_css$Css_Elements$polygon = _rtfeldman$elm_css$Css_Elements$typeSelector('polygon');

var _rtfeldman$elm_css$Css_Namespace$applyNamespaceToProperty = F2(
	function (name, property) {
		var _p0 = property.key;
		if (_p0 === 'animation-name') {
			return _elm_lang$core$Native_Utils.update(
				property,
				{
					value: A2(_elm_lang$core$Basics_ops['++'], name, property.value)
				});
		} else {
			return property;
		}
	});
var _rtfeldman$elm_css$Css_Namespace$applyNamespaceToRepeatable = F2(
	function (name, selector) {
		var _p1 = selector;
		switch (_p1.ctor) {
			case 'ClassSelector':
				return _rtfeldman$elm_css$Css_Structure$ClassSelector(
					A2(_elm_lang$core$Basics_ops['++'], name, _p1._0));
			case 'IdSelector':
				return _rtfeldman$elm_css$Css_Structure$IdSelector(_p1._0);
			default:
				return _rtfeldman$elm_css$Css_Structure$PseudoClassSelector(_p1._0);
		}
	});
var _rtfeldman$elm_css$Css_Namespace$applyNamespaceToSequence = F2(
	function (name, sequence) {
		var _p2 = sequence;
		switch (_p2.ctor) {
			case 'TypeSelectorSequence':
				return A2(
					_rtfeldman$elm_css$Css_Structure$TypeSelectorSequence,
					_p2._0,
					A2(
						_elm_lang$core$List$map,
						_rtfeldman$elm_css$Css_Namespace$applyNamespaceToRepeatable(name),
						_p2._1));
			case 'UniversalSelectorSequence':
				return _rtfeldman$elm_css$Css_Structure$UniversalSelectorSequence(
					A2(
						_elm_lang$core$List$map,
						_rtfeldman$elm_css$Css_Namespace$applyNamespaceToRepeatable(name),
						_p2._0));
			default:
				return A2(
					_rtfeldman$elm_css$Css_Structure$CustomSelector,
					_p2._0,
					A2(
						_elm_lang$core$List$map,
						_rtfeldman$elm_css$Css_Namespace$applyNamespaceToRepeatable(name),
						_p2._1));
		}
	});
var _rtfeldman$elm_css$Css_Namespace$applyNamespaceToSelector = F2(
	function (name, _p3) {
		var _p4 = _p3;
		var apply = _rtfeldman$elm_css$Css_Namespace$applyNamespaceToSequence(name);
		return A3(
			_rtfeldman$elm_css$Css_Structure$Selector,
			apply(_p4._0),
			A2(
				_elm_lang$core$List$map,
				function (_p5) {
					var _p6 = _p5;
					return {
						ctor: '_Tuple2',
						_0: _p6._0,
						_1: apply(_p6._1)
					};
				},
				_p4._1),
			_p4._2);
	});
var _rtfeldman$elm_css$Css_Namespace$applyNamespaceToMixin = F2(
	function (name, mixin) {
		var _p7 = mixin;
		switch (_p7.ctor) {
			case 'AppendProperty':
				return _rtfeldman$elm_css$Css_Preprocess$AppendProperty(
					A2(_rtfeldman$elm_css$Css_Namespace$applyNamespaceToProperty, name, _p7._0));
			case 'ExtendSelector':
				return A2(
					_rtfeldman$elm_css$Css_Preprocess$ExtendSelector,
					A2(_rtfeldman$elm_css$Css_Namespace$applyNamespaceToRepeatable, name, _p7._0),
					A2(
						_elm_lang$core$List$map,
						_rtfeldman$elm_css$Css_Namespace$applyNamespaceToMixin(name),
						_p7._1));
			case 'NestSnippet':
				return A2(
					_rtfeldman$elm_css$Css_Preprocess$NestSnippet,
					_p7._0,
					A2(
						_elm_lang$core$List$map,
						_rtfeldman$elm_css$Css_Namespace$applyNamespaceToSnippet(name),
						_p7._1));
			case 'WithPseudoElement':
				return A2(
					_rtfeldman$elm_css$Css_Preprocess$WithPseudoElement,
					_p7._0,
					A2(
						_elm_lang$core$List$map,
						_rtfeldman$elm_css$Css_Namespace$applyNamespaceToMixin(name),
						_p7._1));
			case 'WithMedia':
				return A2(
					_rtfeldman$elm_css$Css_Preprocess$WithMedia,
					_p7._0,
					A2(
						_elm_lang$core$List$map,
						_rtfeldman$elm_css$Css_Namespace$applyNamespaceToMixin(name),
						_p7._1));
			default:
				return _rtfeldman$elm_css$Css_Preprocess$ApplyMixins(
					A2(
						_elm_lang$core$List$map,
						_rtfeldman$elm_css$Css_Namespace$applyNamespaceToMixin(name),
						_p7._0));
		}
	});
var _rtfeldman$elm_css$Css_Namespace$applyNamespaceToSnippet = F2(
	function (name, _p8) {
		var _p9 = _p8;
		return _rtfeldman$elm_css$Css_Preprocess$Snippet(
			A2(
				_elm_lang$core$List$map,
				_rtfeldman$elm_css$Css_Namespace$applyNamespaceToDeclaration(name),
				_p9._0));
	});
var _rtfeldman$elm_css$Css_Namespace$applyNamespaceToDeclaration = F2(
	function (name, declaration) {
		var _p10 = declaration;
		switch (_p10.ctor) {
			case 'StyleBlockDeclaration':
				return _rtfeldman$elm_css$Css_Preprocess$StyleBlockDeclaration(
					A2(_rtfeldman$elm_css$Css_Namespace$applyNamespaceToStyleBlock, name, _p10._0));
			case 'MediaRule':
				return A2(
					_rtfeldman$elm_css$Css_Preprocess$MediaRule,
					_p10._0,
					A2(
						_elm_lang$core$List$map,
						_rtfeldman$elm_css$Css_Namespace$applyNamespaceToStyleBlock(name),
						_p10._1));
			case 'SupportsRule':
				return A2(
					_rtfeldman$elm_css$Css_Preprocess$SupportsRule,
					_p10._0,
					function (declarations) {
						return {
							ctor: '::',
							_0: _rtfeldman$elm_css$Css_Preprocess$Snippet(declarations),
							_1: {ctor: '[]'}
						};
					}(
						A2(
							_elm_lang$core$List$map,
							_rtfeldman$elm_css$Css_Namespace$applyNamespaceToDeclaration(name),
							A2(_elm_lang$core$List$concatMap, _rtfeldman$elm_css$Css_Preprocess$unwrapSnippet, _p10._1))));
			case 'DocumentRule':
				return A5(
					_rtfeldman$elm_css$Css_Preprocess$DocumentRule,
					_p10._0,
					_p10._1,
					_p10._2,
					_p10._3,
					A2(_rtfeldman$elm_css$Css_Namespace$applyNamespaceToStyleBlock, name, _p10._4));
			case 'PageRule':
				return declaration;
			case 'FontFace':
				return declaration;
			case 'Keyframes':
				return A2(
					_rtfeldman$elm_css$Css_Preprocess$Keyframes,
					A2(_elm_lang$core$Basics_ops['++'], name, _p10._0),
					_p10._1);
			case 'Viewport':
				return declaration;
			case 'CounterStyle':
				return declaration;
			default:
				return declaration;
		}
	});
var _rtfeldman$elm_css$Css_Namespace$applyNamespaceToStyleBlock = F2(
	function (name, _p11) {
		var _p12 = _p11;
		return A3(
			_rtfeldman$elm_css$Css_Preprocess$StyleBlock,
			A2(_rtfeldman$elm_css$Css_Namespace$applyNamespaceToSelector, name, _p12._0),
			A2(
				_elm_lang$core$List$map,
				_rtfeldman$elm_css$Css_Namespace$applyNamespaceToSelector(name),
				_p12._1),
			A2(
				_elm_lang$core$List$map,
				_rtfeldman$elm_css$Css_Namespace$applyNamespaceToMixin(name),
				_p12._2));
	});
var _rtfeldman$elm_css$Css_Namespace$namespace = F2(
	function (rawIdentifier, snippets) {
		return A2(
			_elm_lang$core$List$map,
			_rtfeldman$elm_css$Css_Namespace$applyNamespaceToSnippet(
				_rtfeldman$elm_css_util$Css_Helpers$toCssIdentifier(rawIdentifier)),
			snippets);
	});

var _abadi199$intl_phone_input$IntlPhoneInput_Css$focusMixin = _rtfeldman$elm_css$Css$mixin(
	{
		ctor: '::',
		_0: _rtfeldman$elm_css$Css$outline(_rtfeldman$elm_css$Css$none),
		_1: {
			ctor: '::',
			_0: A2(
				_rtfeldman$elm_css$Css$pseudoClass,
				'-moz-focus-inner',
				{
					ctor: '::',
					_0: _rtfeldman$elm_css$Css$border(_rtfeldman$elm_css$Css$zero),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Css$buttonMixin = _rtfeldman$elm_css$Css$mixin(
	{
		ctor: '::',
		_0: _rtfeldman$elm_css$Css$border(_rtfeldman$elm_css$Css$zero),
		_1: {
			ctor: '::',
			_0: _rtfeldman$elm_css$Css$backgroundColor(
				A4(_rtfeldman$elm_css$Css$rgba, 0, 0, 0, 0)),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Css$hoverMixin = _rtfeldman$elm_css$Css$mixin(
	{
		ctor: '::',
		_0: _rtfeldman$elm_css$Css$backgroundColor(
			A4(_rtfeldman$elm_css$Css$rgba, 0, 0, 0, 7.5e-2)),
		_1: {
			ctor: '::',
			_0: _rtfeldman$elm_css$Css$cursor(_rtfeldman$elm_css$Css$pointer),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Css$boxSizingMixin = _rtfeldman$elm_css$Css$mixin(
	{
		ctor: '::',
		_0: _rtfeldman$elm_css$Css$boxSizing(_rtfeldman$elm_css$Css$borderBox),
		_1: {ctor: '[]'}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Css$countryDropdownWidth = 400;
var _abadi199$intl_phone_input$IntlPhoneInput_Css$countryPickerWidth = 54;
var _abadi199$intl_phone_input$IntlPhoneInput_Css$SearchInput = {ctor: 'SearchInput'};
var _abadi199$intl_phone_input$IntlPhoneInput_Css$searchInput = A2(
	_rtfeldman$elm_css$Css$class,
	_abadi199$intl_phone_input$IntlPhoneInput_Css$SearchInput,
	{
		ctor: '::',
		_0: _abadi199$intl_phone_input$IntlPhoneInput_Css$boxSizingMixin,
		_1: {
			ctor: '::',
			_0: _rtfeldman$elm_css$Css$backgroundColor(
				_rtfeldman$elm_css$Css$hex('#fff')),
			_1: {
				ctor: '::',
				_0: _rtfeldman$elm_css$Css$border(_rtfeldman$elm_css$Css$zero),
				_1: {
					ctor: '::',
					_0: _rtfeldman$elm_css$Css$padding(
						_rtfeldman$elm_css$Css$px(10)),
					_1: {
						ctor: '::',
						_0: _rtfeldman$elm_css$Css$margin(_rtfeldman$elm_css$Css$zero),
						_1: {
							ctor: '::',
							_0: A5(
								_rtfeldman$elm_css$Css$boxShadow5,
								_rtfeldman$elm_css$Css$px(0),
								_rtfeldman$elm_css$Css$px(5),
								_rtfeldman$elm_css$Css$px(10),
								_rtfeldman$elm_css$Css$px(-5),
								A4(_rtfeldman$elm_css$Css$rgba, 0, 0, 0, 0.15)),
							_1: {
								ctor: '::',
								_0: _rtfeldman$elm_css$Css$focus(
									{
										ctor: '::',
										_0: _abadi199$intl_phone_input$IntlPhoneInput_Css$focusMixin,
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						}
					}
				}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Css$Highlighted = {ctor: 'Highlighted'};
var _abadi199$intl_phone_input$IntlPhoneInput_Css$CountryName = {ctor: 'CountryName'};
var _abadi199$intl_phone_input$IntlPhoneInput_Css$countryName = A2(
	_rtfeldman$elm_css$Css$class,
	_abadi199$intl_phone_input$IntlPhoneInput_Css$CountryName,
	{
		ctor: '::',
		_0: _abadi199$intl_phone_input$IntlPhoneInput_Css$boxSizingMixin,
		_1: {
			ctor: '::',
			_0: _rtfeldman$elm_css$Css$marginLeft(
				_rtfeldman$elm_css$Css$em(0.5)),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Css$Country = {ctor: 'Country'};
var _abadi199$intl_phone_input$IntlPhoneInput_Css$country = A2(
	_rtfeldman$elm_css$Css$class,
	_abadi199$intl_phone_input$IntlPhoneInput_Css$Country,
	{
		ctor: '::',
		_0: _abadi199$intl_phone_input$IntlPhoneInput_Css$boxSizingMixin,
		_1: {
			ctor: '::',
			_0: _abadi199$intl_phone_input$IntlPhoneInput_Css$buttonMixin,
			_1: {
				ctor: '::',
				_0: _rtfeldman$elm_css$Css$width(
					_rtfeldman$elm_css$Css$pct(100)),
				_1: {
					ctor: '::',
					_0: _rtfeldman$elm_css$Css$displayFlex,
					_1: {
						ctor: '::',
						_0: _rtfeldman$elm_css$Css$alignItems(_rtfeldman$elm_css$Css$center),
						_1: {
							ctor: '::',
							_0: _rtfeldman$elm_css$Css$justifyContent(_rtfeldman$elm_css$Css$left),
							_1: {
								ctor: '::',
								_0: A4(
									_rtfeldman$elm_css$Css$padding4,
									_rtfeldman$elm_css$Css$em(0.5),
									_rtfeldman$elm_css$Css$em(1),
									_rtfeldman$elm_css$Css$em(0.5),
									_rtfeldman$elm_css$Css$em(0.5)),
								_1: {
									ctor: '::',
									_0: A2(
										_rtfeldman$elm_css$Css$withClass,
										_abadi199$intl_phone_input$IntlPhoneInput_Css$Highlighted,
										{
											ctor: '::',
											_0: _abadi199$intl_phone_input$IntlPhoneInput_Css$hoverMixin,
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: _rtfeldman$elm_css$Css$focus(
											{
												ctor: '::',
												_0: _abadi199$intl_phone_input$IntlPhoneInput_Css$focusMixin,
												_1: {
													ctor: '::',
													_0: _abadi199$intl_phone_input$IntlPhoneInput_Css$hoverMixin,
													_1: {ctor: '[]'}
												}
											}),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Css$CountryListItem = {ctor: 'CountryListItem'};
var _abadi199$intl_phone_input$IntlPhoneInput_Css$countryListItem = A2(
	_rtfeldman$elm_css$Css$class,
	_abadi199$intl_phone_input$IntlPhoneInput_Css$CountryListItem,
	{
		ctor: '::',
		_0: _abadi199$intl_phone_input$IntlPhoneInput_Css$boxSizingMixin,
		_1: {
			ctor: '::',
			_0: _rtfeldman$elm_css$Css$listStyle(_rtfeldman$elm_css$Css$none),
			_1: {
				ctor: '::',
				_0: _rtfeldman$elm_css$Css$margin(_rtfeldman$elm_css$Css$zero),
				_1: {
					ctor: '::',
					_0: _rtfeldman$elm_css$Css$padding(_rtfeldman$elm_css$Css$zero),
					_1: {ctor: '[]'}
				}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Css$CountryList = {ctor: 'CountryList'};
var _abadi199$intl_phone_input$IntlPhoneInput_Css$countryList = A2(
	_rtfeldman$elm_css$Css$class,
	_abadi199$intl_phone_input$IntlPhoneInput_Css$CountryList,
	{
		ctor: '::',
		_0: _abadi199$intl_phone_input$IntlPhoneInput_Css$boxSizingMixin,
		_1: {
			ctor: '::',
			_0: A2(
				_rtfeldman$elm_css$Css$padding2,
				_rtfeldman$elm_css$Css$em(0.5),
				_rtfeldman$elm_css$Css$zero),
			_1: {
				ctor: '::',
				_0: _rtfeldman$elm_css$Css$margin(_rtfeldman$elm_css$Css$zero),
				_1: {ctor: '[]'}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Css$CountryListScroll = {ctor: 'CountryListScroll'};
var _abadi199$intl_phone_input$IntlPhoneInput_Css$countryListScroll = A2(
	_rtfeldman$elm_css$Css$class,
	_abadi199$intl_phone_input$IntlPhoneInput_Css$CountryListScroll,
	{
		ctor: '::',
		_0: _abadi199$intl_phone_input$IntlPhoneInput_Css$boxSizingMixin,
		_1: {
			ctor: '::',
			_0: _rtfeldman$elm_css$Css$overflowY(_rtfeldman$elm_css$Css$auto),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Css$CountryDropdown = {ctor: 'CountryDropdown'};
var _abadi199$intl_phone_input$IntlPhoneInput_Css$countryDropdown = A2(
	_rtfeldman$elm_css$Css$class,
	_abadi199$intl_phone_input$IntlPhoneInput_Css$CountryDropdown,
	{
		ctor: '::',
		_0: _abadi199$intl_phone_input$IntlPhoneInput_Css$boxSizingMixin,
		_1: {
			ctor: '::',
			_0: _rtfeldman$elm_css$Css$position(_rtfeldman$elm_css$Css$absolute),
			_1: {
				ctor: '::',
				_0: _rtfeldman$elm_css$Css$backgroundColor(
					A4(_rtfeldman$elm_css$Css$rgba, 255, 255, 255, 1)),
				_1: {
					ctor: '::',
					_0: _rtfeldman$elm_css$Css$top(
						_rtfeldman$elm_css$Css$pct(100)),
					_1: {
						ctor: '::',
						_0: _rtfeldman$elm_css$Css$zIndex(
							_rtfeldman$elm_css$Css$int(2)),
						_1: {
							ctor: '::',
							_0: _rtfeldman$elm_css$Css$left(_rtfeldman$elm_css$Css$zero),
							_1: {
								ctor: '::',
								_0: A3(
									_rtfeldman$elm_css$Css$border3,
									_rtfeldman$elm_css$Css$px(1),
									_rtfeldman$elm_css$Css$solid,
									_rtfeldman$elm_css$Css$hex('#ccc')),
								_1: {
									ctor: '::',
									_0: _rtfeldman$elm_css$Css$maxHeight(
										_rtfeldman$elm_css$Css$px(250)),
									_1: {
										ctor: '::',
										_0: _rtfeldman$elm_css$Css$minWidth(
											_rtfeldman$elm_css$Css$px(_abadi199$intl_phone_input$IntlPhoneInput_Css$countryDropdownWidth)),
										_1: {
											ctor: '::',
											_0: _rtfeldman$elm_css$Css$displayFlex,
											_1: {
												ctor: '::',
												_0: _rtfeldman$elm_css$Css$flexDirection(_rtfeldman$elm_css$Css$column),
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Css$Arrow = {ctor: 'Arrow'};
var _abadi199$intl_phone_input$IntlPhoneInput_Css$arrow = A2(
	_rtfeldman$elm_css$Css$class,
	_abadi199$intl_phone_input$IntlPhoneInput_Css$Arrow,
	{
		ctor: '::',
		_0: _abadi199$intl_phone_input$IntlPhoneInput_Css$boxSizingMixin,
		_1: {
			ctor: '::',
			_0: _rtfeldman$elm_css$Css$width(
				_rtfeldman$elm_css$Css$px(5)),
			_1: {
				ctor: '::',
				_0: _rtfeldman$elm_css$Css$marginLeft(
					_rtfeldman$elm_css$Css$px(7)),
				_1: {
					ctor: '::',
					_0: _rtfeldman$elm_css$Css$marginTop(
						_rtfeldman$elm_css$Css$px(-4)),
					_1: {ctor: '[]'}
				}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Css$Flag = {ctor: 'Flag'};
var _abadi199$intl_phone_input$IntlPhoneInput_Css$flag = A2(
	_rtfeldman$elm_css$Css$class,
	_abadi199$intl_phone_input$IntlPhoneInput_Css$Flag,
	{
		ctor: '::',
		_0: _abadi199$intl_phone_input$IntlPhoneInput_Css$boxSizingMixin,
		_1: {
			ctor: '::',
			_0: _rtfeldman$elm_css$Css$width(
				_rtfeldman$elm_css$Css$px(25)),
			_1: {
				ctor: '::',
				_0: _rtfeldman$elm_css$Css$height(
					_rtfeldman$elm_css$Css$px(15)),
				_1: {
					ctor: '::',
					_0: _rtfeldman$elm_css$Css$display(_rtfeldman$elm_css$Css$inlineBlock),
					_1: {ctor: '[]'}
				}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Css$PhoneInput = {ctor: 'PhoneInput'};
var _abadi199$intl_phone_input$IntlPhoneInput_Css$phoneInput = A2(
	_rtfeldman$elm_css$Css$class,
	_abadi199$intl_phone_input$IntlPhoneInput_Css$PhoneInput,
	{
		ctor: '::',
		_0: _abadi199$intl_phone_input$IntlPhoneInput_Css$boxSizingMixin,
		_1: {
			ctor: '::',
			_0: _rtfeldman$elm_css$Css$marginLeft(
				_rtfeldman$elm_css$Css$px(0 - _abadi199$intl_phone_input$IntlPhoneInput_Css$countryPickerWidth)),
			_1: {
				ctor: '::',
				_0: _rtfeldman$elm_css$Css$paddingLeft(
					_rtfeldman$elm_css$Css$px(_abadi199$intl_phone_input$IntlPhoneInput_Css$countryPickerWidth + 10)),
				_1: {ctor: '[]'}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Css$CountryPicker = {ctor: 'CountryPicker'};
var _abadi199$intl_phone_input$IntlPhoneInput_Css$countryPicker = A2(
	_rtfeldman$elm_css$Css$class,
	_abadi199$intl_phone_input$IntlPhoneInput_Css$CountryPicker,
	{
		ctor: '::',
		_0: _abadi199$intl_phone_input$IntlPhoneInput_Css$boxSizingMixin,
		_1: {
			ctor: '::',
			_0: _abadi199$intl_phone_input$IntlPhoneInput_Css$buttonMixin,
			_1: {
				ctor: '::',
				_0: _rtfeldman$elm_css$Css$width(
					_rtfeldman$elm_css$Css$px(_abadi199$intl_phone_input$IntlPhoneInput_Css$countryPickerWidth)),
				_1: {
					ctor: '::',
					_0: _rtfeldman$elm_css$Css$displayFlex,
					_1: {
						ctor: '::',
						_0: _rtfeldman$elm_css$Css$alignItems(_rtfeldman$elm_css$Css$center),
						_1: {
							ctor: '::',
							_0: _rtfeldman$elm_css$Css$justifyContent(_rtfeldman$elm_css$Css$center),
							_1: {
								ctor: '::',
								_0: _rtfeldman$elm_css$Css$zIndex(
									_rtfeldman$elm_css$Css$int(1)),
								_1: {
									ctor: '::',
									_0: _rtfeldman$elm_css$Css$hover(
										{
											ctor: '::',
											_0: _abadi199$intl_phone_input$IntlPhoneInput_Css$hoverMixin,
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: _rtfeldman$elm_css$Css$focus(
											{
												ctor: '::',
												_0: _abadi199$intl_phone_input$IntlPhoneInput_Css$focusMixin,
												_1: {
													ctor: '::',
													_0: _abadi199$intl_phone_input$IntlPhoneInput_Css$hoverMixin,
													_1: {ctor: '[]'}
												}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_rtfeldman$elm_css$Css$withClass,
												_abadi199$intl_phone_input$IntlPhoneInput_Css$Highlighted,
												{
													ctor: '::',
													_0: _abadi199$intl_phone_input$IntlPhoneInput_Css$hoverMixin,
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Css$IntlPhoneInput = {ctor: 'IntlPhoneInput'};
var _abadi199$intl_phone_input$IntlPhoneInput_Css$intlPhoneInput = A2(
	_rtfeldman$elm_css$Css$class,
	_abadi199$intl_phone_input$IntlPhoneInput_Css$IntlPhoneInput,
	{
		ctor: '::',
		_0: _abadi199$intl_phone_input$IntlPhoneInput_Css$boxSizingMixin,
		_1: {
			ctor: '::',
			_0: _rtfeldman$elm_css$Css$position(_rtfeldman$elm_css$Css$relative),
			_1: {
				ctor: '::',
				_0: _rtfeldman$elm_css$Css$displayFlex,
				_1: {
					ctor: '::',
					_0: _rtfeldman$elm_css$Css$descendants(
						{
							ctor: '::',
							_0: _abadi199$intl_phone_input$IntlPhoneInput_Css$countryPicker,
							_1: {
								ctor: '::',
								_0: _abadi199$intl_phone_input$IntlPhoneInput_Css$flag,
								_1: {
									ctor: '::',
									_0: _abadi199$intl_phone_input$IntlPhoneInput_Css$arrow,
									_1: {
										ctor: '::',
										_0: _abadi199$intl_phone_input$IntlPhoneInput_Css$phoneInput,
										_1: {
											ctor: '::',
											_0: _abadi199$intl_phone_input$IntlPhoneInput_Css$countryDropdown,
											_1: {
												ctor: '::',
												_0: _abadi199$intl_phone_input$IntlPhoneInput_Css$countryListScroll,
												_1: {
													ctor: '::',
													_0: _abadi199$intl_phone_input$IntlPhoneInput_Css$countryList,
													_1: {
														ctor: '::',
														_0: _abadi199$intl_phone_input$IntlPhoneInput_Css$countryListItem,
														_1: {
															ctor: '::',
															_0: _abadi199$intl_phone_input$IntlPhoneInput_Css$country,
															_1: {
																ctor: '::',
																_0: _abadi199$intl_phone_input$IntlPhoneInput_Css$countryName,
																_1: {
																	ctor: '::',
																	_0: _abadi199$intl_phone_input$IntlPhoneInput_Css$searchInput,
																	_1: {ctor: '[]'}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}),
					_1: {ctor: '[]'}
				}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Css$css = function (namespace) {
	return function (_p0) {
		return _rtfeldman$elm_css$Css$stylesheet(
			A2(_rtfeldman$elm_css$Css_Namespace$namespace, namespace, _p0));
	}(
		{
			ctor: '::',
			_0: _abadi199$intl_phone_input$IntlPhoneInput_Css$intlPhoneInput,
			_1: {ctor: '[]'}
		});
};

var _abadi199$intl_phone_input$Demo_Css$boxSizingMixin = _rtfeldman$elm_css$Css$mixin(
	{
		ctor: '::',
		_0: _rtfeldman$elm_css$Css$boxSizing(_rtfeldman$elm_css$Css$borderBox),
		_1: {ctor: '[]'}
	});
var _abadi199$intl_phone_input$Demo_Css$FormField = {ctor: 'FormField'};
var _abadi199$intl_phone_input$Demo_Css$PhoneNumber = {ctor: 'PhoneNumber'};
var _abadi199$intl_phone_input$Demo_Css$Demo = {ctor: 'Demo'};
var _abadi199$intl_phone_input$Demo_Css$css = function (namespace) {
	return function (_p0) {
		return _rtfeldman$elm_css$Css$stylesheet(
			A2(_rtfeldman$elm_css$Css_Namespace$namespace, namespace, _p0));
	}(
		{
			ctor: '::',
			_0: A2(
				_rtfeldman$elm_css$Css$class,
				_abadi199$intl_phone_input$Demo_Css$Demo,
				{
					ctor: '::',
					_0: _rtfeldman$elm_css$Css$displayFlex,
					_1: {
						ctor: '::',
						_0: _rtfeldman$elm_css$Css$flexDirection(_rtfeldman$elm_css$Css$column),
						_1: {
							ctor: '::',
							_0: _rtfeldman$elm_css$Css$alignItems(_rtfeldman$elm_css$Css$flexStart),
							_1: {
								ctor: '::',
								_0: _rtfeldman$elm_css$Css$fontFamilies(
									{
										ctor: '::',
										_0: function (_) {
											return _.value;
										}(_rtfeldman$elm_css$Css$sansSerif),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: _rtfeldman$elm_css$Css$descendants(
										{
											ctor: '::',
											_0: A2(
												_rtfeldman$elm_css$Css$class,
												_abadi199$intl_phone_input$IntlPhoneInput_Css$IntlPhoneInput,
												{
													ctor: '::',
													_0: _rtfeldman$elm_css$Css$descendants(
														{
															ctor: '::',
															_0: A2(
																_rtfeldman$elm_css$Css$class,
																_abadi199$intl_phone_input$IntlPhoneInput_Css$CountryPicker,
																{ctor: '[]'}),
															_1: {
																ctor: '::',
																_0: A2(
																	_rtfeldman$elm_css$Css$class,
																	_abadi199$intl_phone_input$IntlPhoneInput_Css$PhoneInput,
																	{
																		ctor: '::',
																		_0: _rtfeldman$elm_css$Css$width(
																			_rtfeldman$elm_css$Css$em(25)),
																		_1: {ctor: '[]'}
																	}),
																_1: {ctor: '[]'}
															}
														}),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: _rtfeldman$elm_css$Css_Elements$input(
													{
														ctor: '::',
														_0: _rtfeldman$elm_css$Css$fontSize(
															_rtfeldman$elm_css$Css$em(0.875)),
														_1: {
															ctor: '::',
															_0: _rtfeldman$elm_css$Css$border(_rtfeldman$elm_css$Css$zero),
															_1: {
																ctor: '::',
																_0: A2(
																	_rtfeldman$elm_css$Css$padding2,
																	_rtfeldman$elm_css$Css$em(0.75),
																	_rtfeldman$elm_css$Css$em(0.5)),
																_1: {
																	ctor: '::',
																	_0: _rtfeldman$elm_css$Css$backgroundColor(
																		A4(_rtfeldman$elm_css$Css$rgba, 0, 0, 0, 5.0e-2)),
																	_1: {
																		ctor: '::',
																		_0: _rtfeldman$elm_css$Css$borderRadius(
																			_rtfeldman$elm_css$Css$px(2)),
																		_1: {
																			ctor: '::',
																			_0: A6(
																				_rtfeldman$elm_css$Css$boxShadow6,
																				_rtfeldman$elm_css$Css$inset,
																				_rtfeldman$elm_css$Css$zero,
																				_rtfeldman$elm_css$Css$px(1),
																				_rtfeldman$elm_css$Css$px(3),
																				_rtfeldman$elm_css$Css$zero,
																				A4(_rtfeldman$elm_css$Css$rgba, 0, 0, 0, 0.15)),
																			_1: {ctor: '[]'}
																		}
																	}
																}
															}
														}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_rtfeldman$elm_css$Css$class,
														_abadi199$intl_phone_input$Demo_Css$PhoneNumber,
														{
															ctor: '::',
															_0: _rtfeldman$elm_css$Css$paddingBottom(
																_rtfeldman$elm_css$Css$em(0.5)),
															_1: {
																ctor: '::',
																_0: _rtfeldman$elm_css$Css$marginLeft(
																	_rtfeldman$elm_css$Css$em(1)),
																_1: {ctor: '[]'}
															}
														}),
													_1: {
														ctor: '::',
														_0: A2(
															_rtfeldman$elm_css$Css$class,
															_abadi199$intl_phone_input$Demo_Css$FormField,
															{
																ctor: '::',
																_0: _rtfeldman$elm_css$Css$marginBottom(
																	_rtfeldman$elm_css$Css$em(1)),
																_1: {
																	ctor: '::',
																	_0: _rtfeldman$elm_css$Css$displayFlex,
																	_1: {
																		ctor: '::',
																		_0: _rtfeldman$elm_css$Css$alignItems(_rtfeldman$elm_css$Css$flexEnd),
																		_1: {ctor: '[]'}
																	}
																}
															}),
														_1: {ctor: '[]'}
													}
												}
											}
										}),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}),
			_1: {ctor: '[]'}
		});
};

var _elm_lang$core$Dict$foldr = F3(
	function (f, acc, t) {
		foldr:
		while (true) {
			var _p0 = t;
			if (_p0.ctor === 'RBEmpty_elm_builtin') {
				return acc;
			} else {
				var _v1 = f,
					_v2 = A3(
					f,
					_p0._1,
					_p0._2,
					A3(_elm_lang$core$Dict$foldr, f, acc, _p0._4)),
					_v3 = _p0._3;
				f = _v1;
				acc = _v2;
				t = _v3;
				continue foldr;
			}
		}
	});
var _elm_lang$core$Dict$keys = function (dict) {
	return A3(
		_elm_lang$core$Dict$foldr,
		F3(
			function (key, value, keyList) {
				return {ctor: '::', _0: key, _1: keyList};
			}),
		{ctor: '[]'},
		dict);
};
var _elm_lang$core$Dict$values = function (dict) {
	return A3(
		_elm_lang$core$Dict$foldr,
		F3(
			function (key, value, valueList) {
				return {ctor: '::', _0: value, _1: valueList};
			}),
		{ctor: '[]'},
		dict);
};
var _elm_lang$core$Dict$toList = function (dict) {
	return A3(
		_elm_lang$core$Dict$foldr,
		F3(
			function (key, value, list) {
				return {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: key, _1: value},
					_1: list
				};
			}),
		{ctor: '[]'},
		dict);
};
var _elm_lang$core$Dict$foldl = F3(
	function (f, acc, dict) {
		foldl:
		while (true) {
			var _p1 = dict;
			if (_p1.ctor === 'RBEmpty_elm_builtin') {
				return acc;
			} else {
				var _v5 = f,
					_v6 = A3(
					f,
					_p1._1,
					_p1._2,
					A3(_elm_lang$core$Dict$foldl, f, acc, _p1._3)),
					_v7 = _p1._4;
				f = _v5;
				acc = _v6;
				dict = _v7;
				continue foldl;
			}
		}
	});
var _elm_lang$core$Dict$merge = F6(
	function (leftStep, bothStep, rightStep, leftDict, rightDict, initialResult) {
		var stepState = F3(
			function (rKey, rValue, _p2) {
				stepState:
				while (true) {
					var _p3 = _p2;
					var _p9 = _p3._1;
					var _p8 = _p3._0;
					var _p4 = _p8;
					if (_p4.ctor === '[]') {
						return {
							ctor: '_Tuple2',
							_0: _p8,
							_1: A3(rightStep, rKey, rValue, _p9)
						};
					} else {
						var _p7 = _p4._1;
						var _p6 = _p4._0._1;
						var _p5 = _p4._0._0;
						if (_elm_lang$core$Native_Utils.cmp(_p5, rKey) < 0) {
							var _v10 = rKey,
								_v11 = rValue,
								_v12 = {
								ctor: '_Tuple2',
								_0: _p7,
								_1: A3(leftStep, _p5, _p6, _p9)
							};
							rKey = _v10;
							rValue = _v11;
							_p2 = _v12;
							continue stepState;
						} else {
							if (_elm_lang$core$Native_Utils.cmp(_p5, rKey) > 0) {
								return {
									ctor: '_Tuple2',
									_0: _p8,
									_1: A3(rightStep, rKey, rValue, _p9)
								};
							} else {
								return {
									ctor: '_Tuple2',
									_0: _p7,
									_1: A4(bothStep, _p5, _p6, rValue, _p9)
								};
							}
						}
					}
				}
			});
		var _p10 = A3(
			_elm_lang$core$Dict$foldl,
			stepState,
			{
				ctor: '_Tuple2',
				_0: _elm_lang$core$Dict$toList(leftDict),
				_1: initialResult
			},
			rightDict);
		var leftovers = _p10._0;
		var intermediateResult = _p10._1;
		return A3(
			_elm_lang$core$List$foldl,
			F2(
				function (_p11, result) {
					var _p12 = _p11;
					return A3(leftStep, _p12._0, _p12._1, result);
				}),
			intermediateResult,
			leftovers);
	});
var _elm_lang$core$Dict$reportRemBug = F4(
	function (msg, c, lgot, rgot) {
		return _elm_lang$core$Native_Debug.crash(
			_elm_lang$core$String$concat(
				{
					ctor: '::',
					_0: 'Internal red-black tree invariant violated, expected ',
					_1: {
						ctor: '::',
						_0: msg,
						_1: {
							ctor: '::',
							_0: ' and got ',
							_1: {
								ctor: '::',
								_0: _elm_lang$core$Basics$toString(c),
								_1: {
									ctor: '::',
									_0: '/',
									_1: {
										ctor: '::',
										_0: lgot,
										_1: {
											ctor: '::',
											_0: '/',
											_1: {
												ctor: '::',
												_0: rgot,
												_1: {
													ctor: '::',
													_0: '\nPlease report this bug to <https://github.com/elm-lang/core/issues>',
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}
						}
					}
				}));
	});
var _elm_lang$core$Dict$isBBlack = function (dict) {
	var _p13 = dict;
	_v14_2:
	do {
		if (_p13.ctor === 'RBNode_elm_builtin') {
			if (_p13._0.ctor === 'BBlack') {
				return true;
			} else {
				break _v14_2;
			}
		} else {
			if (_p13._0.ctor === 'LBBlack') {
				return true;
			} else {
				break _v14_2;
			}
		}
	} while(false);
	return false;
};
var _elm_lang$core$Dict$sizeHelp = F2(
	function (n, dict) {
		sizeHelp:
		while (true) {
			var _p14 = dict;
			if (_p14.ctor === 'RBEmpty_elm_builtin') {
				return n;
			} else {
				var _v16 = A2(_elm_lang$core$Dict$sizeHelp, n + 1, _p14._4),
					_v17 = _p14._3;
				n = _v16;
				dict = _v17;
				continue sizeHelp;
			}
		}
	});
var _elm_lang$core$Dict$size = function (dict) {
	return A2(_elm_lang$core$Dict$sizeHelp, 0, dict);
};
var _elm_lang$core$Dict$get = F2(
	function (targetKey, dict) {
		get:
		while (true) {
			var _p15 = dict;
			if (_p15.ctor === 'RBEmpty_elm_builtin') {
				return _elm_lang$core$Maybe$Nothing;
			} else {
				var _p16 = A2(_elm_lang$core$Basics$compare, targetKey, _p15._1);
				switch (_p16.ctor) {
					case 'LT':
						var _v20 = targetKey,
							_v21 = _p15._3;
						targetKey = _v20;
						dict = _v21;
						continue get;
					case 'EQ':
						return _elm_lang$core$Maybe$Just(_p15._2);
					default:
						var _v22 = targetKey,
							_v23 = _p15._4;
						targetKey = _v22;
						dict = _v23;
						continue get;
				}
			}
		}
	});
var _elm_lang$core$Dict$member = F2(
	function (key, dict) {
		var _p17 = A2(_elm_lang$core$Dict$get, key, dict);
		if (_p17.ctor === 'Just') {
			return true;
		} else {
			return false;
		}
	});
var _elm_lang$core$Dict$maxWithDefault = F3(
	function (k, v, r) {
		maxWithDefault:
		while (true) {
			var _p18 = r;
			if (_p18.ctor === 'RBEmpty_elm_builtin') {
				return {ctor: '_Tuple2', _0: k, _1: v};
			} else {
				var _v26 = _p18._1,
					_v27 = _p18._2,
					_v28 = _p18._4;
				k = _v26;
				v = _v27;
				r = _v28;
				continue maxWithDefault;
			}
		}
	});
var _elm_lang$core$Dict$NBlack = {ctor: 'NBlack'};
var _elm_lang$core$Dict$BBlack = {ctor: 'BBlack'};
var _elm_lang$core$Dict$Black = {ctor: 'Black'};
var _elm_lang$core$Dict$blackish = function (t) {
	var _p19 = t;
	if (_p19.ctor === 'RBNode_elm_builtin') {
		var _p20 = _p19._0;
		return _elm_lang$core$Native_Utils.eq(_p20, _elm_lang$core$Dict$Black) || _elm_lang$core$Native_Utils.eq(_p20, _elm_lang$core$Dict$BBlack);
	} else {
		return true;
	}
};
var _elm_lang$core$Dict$Red = {ctor: 'Red'};
var _elm_lang$core$Dict$moreBlack = function (color) {
	var _p21 = color;
	switch (_p21.ctor) {
		case 'Black':
			return _elm_lang$core$Dict$BBlack;
		case 'Red':
			return _elm_lang$core$Dict$Black;
		case 'NBlack':
			return _elm_lang$core$Dict$Red;
		default:
			return _elm_lang$core$Native_Debug.crash('Can\'t make a double black node more black!');
	}
};
var _elm_lang$core$Dict$lessBlack = function (color) {
	var _p22 = color;
	switch (_p22.ctor) {
		case 'BBlack':
			return _elm_lang$core$Dict$Black;
		case 'Black':
			return _elm_lang$core$Dict$Red;
		case 'Red':
			return _elm_lang$core$Dict$NBlack;
		default:
			return _elm_lang$core$Native_Debug.crash('Can\'t make a negative black node less black!');
	}
};
var _elm_lang$core$Dict$LBBlack = {ctor: 'LBBlack'};
var _elm_lang$core$Dict$LBlack = {ctor: 'LBlack'};
var _elm_lang$core$Dict$RBEmpty_elm_builtin = function (a) {
	return {ctor: 'RBEmpty_elm_builtin', _0: a};
};
var _elm_lang$core$Dict$empty = _elm_lang$core$Dict$RBEmpty_elm_builtin(_elm_lang$core$Dict$LBlack);
var _elm_lang$core$Dict$isEmpty = function (dict) {
	return _elm_lang$core$Native_Utils.eq(dict, _elm_lang$core$Dict$empty);
};
var _elm_lang$core$Dict$RBNode_elm_builtin = F5(
	function (a, b, c, d, e) {
		return {ctor: 'RBNode_elm_builtin', _0: a, _1: b, _2: c, _3: d, _4: e};
	});
var _elm_lang$core$Dict$ensureBlackRoot = function (dict) {
	var _p23 = dict;
	if ((_p23.ctor === 'RBNode_elm_builtin') && (_p23._0.ctor === 'Red')) {
		return A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, _p23._1, _p23._2, _p23._3, _p23._4);
	} else {
		return dict;
	}
};
var _elm_lang$core$Dict$lessBlackTree = function (dict) {
	var _p24 = dict;
	if (_p24.ctor === 'RBNode_elm_builtin') {
		return A5(
			_elm_lang$core$Dict$RBNode_elm_builtin,
			_elm_lang$core$Dict$lessBlack(_p24._0),
			_p24._1,
			_p24._2,
			_p24._3,
			_p24._4);
	} else {
		return _elm_lang$core$Dict$RBEmpty_elm_builtin(_elm_lang$core$Dict$LBlack);
	}
};
var _elm_lang$core$Dict$balancedTree = function (col) {
	return function (xk) {
		return function (xv) {
			return function (yk) {
				return function (yv) {
					return function (zk) {
						return function (zv) {
							return function (a) {
								return function (b) {
									return function (c) {
										return function (d) {
											return A5(
												_elm_lang$core$Dict$RBNode_elm_builtin,
												_elm_lang$core$Dict$lessBlack(col),
												yk,
												yv,
												A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, xk, xv, a, b),
												A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, zk, zv, c, d));
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _elm_lang$core$Dict$blacken = function (t) {
	var _p25 = t;
	if (_p25.ctor === 'RBEmpty_elm_builtin') {
		return _elm_lang$core$Dict$RBEmpty_elm_builtin(_elm_lang$core$Dict$LBlack);
	} else {
		return A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, _p25._1, _p25._2, _p25._3, _p25._4);
	}
};
var _elm_lang$core$Dict$redden = function (t) {
	var _p26 = t;
	if (_p26.ctor === 'RBEmpty_elm_builtin') {
		return _elm_lang$core$Native_Debug.crash('can\'t make a Leaf red');
	} else {
		return A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Red, _p26._1, _p26._2, _p26._3, _p26._4);
	}
};
var _elm_lang$core$Dict$balanceHelp = function (tree) {
	var _p27 = tree;
	_v36_6:
	do {
		_v36_5:
		do {
			_v36_4:
			do {
				_v36_3:
				do {
					_v36_2:
					do {
						_v36_1:
						do {
							_v36_0:
							do {
								if (_p27.ctor === 'RBNode_elm_builtin') {
									if (_p27._3.ctor === 'RBNode_elm_builtin') {
										if (_p27._4.ctor === 'RBNode_elm_builtin') {
											switch (_p27._3._0.ctor) {
												case 'Red':
													switch (_p27._4._0.ctor) {
														case 'Red':
															if ((_p27._3._3.ctor === 'RBNode_elm_builtin') && (_p27._3._3._0.ctor === 'Red')) {
																break _v36_0;
															} else {
																if ((_p27._3._4.ctor === 'RBNode_elm_builtin') && (_p27._3._4._0.ctor === 'Red')) {
																	break _v36_1;
																} else {
																	if ((_p27._4._3.ctor === 'RBNode_elm_builtin') && (_p27._4._3._0.ctor === 'Red')) {
																		break _v36_2;
																	} else {
																		if ((_p27._4._4.ctor === 'RBNode_elm_builtin') && (_p27._4._4._0.ctor === 'Red')) {
																			break _v36_3;
																		} else {
																			break _v36_6;
																		}
																	}
																}
															}
														case 'NBlack':
															if ((_p27._3._3.ctor === 'RBNode_elm_builtin') && (_p27._3._3._0.ctor === 'Red')) {
																break _v36_0;
															} else {
																if ((_p27._3._4.ctor === 'RBNode_elm_builtin') && (_p27._3._4._0.ctor === 'Red')) {
																	break _v36_1;
																} else {
																	if (((((_p27._0.ctor === 'BBlack') && (_p27._4._3.ctor === 'RBNode_elm_builtin')) && (_p27._4._3._0.ctor === 'Black')) && (_p27._4._4.ctor === 'RBNode_elm_builtin')) && (_p27._4._4._0.ctor === 'Black')) {
																		break _v36_4;
																	} else {
																		break _v36_6;
																	}
																}
															}
														default:
															if ((_p27._3._3.ctor === 'RBNode_elm_builtin') && (_p27._3._3._0.ctor === 'Red')) {
																break _v36_0;
															} else {
																if ((_p27._3._4.ctor === 'RBNode_elm_builtin') && (_p27._3._4._0.ctor === 'Red')) {
																	break _v36_1;
																} else {
																	break _v36_6;
																}
															}
													}
												case 'NBlack':
													switch (_p27._4._0.ctor) {
														case 'Red':
															if ((_p27._4._3.ctor === 'RBNode_elm_builtin') && (_p27._4._3._0.ctor === 'Red')) {
																break _v36_2;
															} else {
																if ((_p27._4._4.ctor === 'RBNode_elm_builtin') && (_p27._4._4._0.ctor === 'Red')) {
																	break _v36_3;
																} else {
																	if (((((_p27._0.ctor === 'BBlack') && (_p27._3._3.ctor === 'RBNode_elm_builtin')) && (_p27._3._3._0.ctor === 'Black')) && (_p27._3._4.ctor === 'RBNode_elm_builtin')) && (_p27._3._4._0.ctor === 'Black')) {
																		break _v36_5;
																	} else {
																		break _v36_6;
																	}
																}
															}
														case 'NBlack':
															if (_p27._0.ctor === 'BBlack') {
																if ((((_p27._4._3.ctor === 'RBNode_elm_builtin') && (_p27._4._3._0.ctor === 'Black')) && (_p27._4._4.ctor === 'RBNode_elm_builtin')) && (_p27._4._4._0.ctor === 'Black')) {
																	break _v36_4;
																} else {
																	if ((((_p27._3._3.ctor === 'RBNode_elm_builtin') && (_p27._3._3._0.ctor === 'Black')) && (_p27._3._4.ctor === 'RBNode_elm_builtin')) && (_p27._3._4._0.ctor === 'Black')) {
																		break _v36_5;
																	} else {
																		break _v36_6;
																	}
																}
															} else {
																break _v36_6;
															}
														default:
															if (((((_p27._0.ctor === 'BBlack') && (_p27._3._3.ctor === 'RBNode_elm_builtin')) && (_p27._3._3._0.ctor === 'Black')) && (_p27._3._4.ctor === 'RBNode_elm_builtin')) && (_p27._3._4._0.ctor === 'Black')) {
																break _v36_5;
															} else {
																break _v36_6;
															}
													}
												default:
													switch (_p27._4._0.ctor) {
														case 'Red':
															if ((_p27._4._3.ctor === 'RBNode_elm_builtin') && (_p27._4._3._0.ctor === 'Red')) {
																break _v36_2;
															} else {
																if ((_p27._4._4.ctor === 'RBNode_elm_builtin') && (_p27._4._4._0.ctor === 'Red')) {
																	break _v36_3;
																} else {
																	break _v36_6;
																}
															}
														case 'NBlack':
															if (((((_p27._0.ctor === 'BBlack') && (_p27._4._3.ctor === 'RBNode_elm_builtin')) && (_p27._4._3._0.ctor === 'Black')) && (_p27._4._4.ctor === 'RBNode_elm_builtin')) && (_p27._4._4._0.ctor === 'Black')) {
																break _v36_4;
															} else {
																break _v36_6;
															}
														default:
															break _v36_6;
													}
											}
										} else {
											switch (_p27._3._0.ctor) {
												case 'Red':
													if ((_p27._3._3.ctor === 'RBNode_elm_builtin') && (_p27._3._3._0.ctor === 'Red')) {
														break _v36_0;
													} else {
														if ((_p27._3._4.ctor === 'RBNode_elm_builtin') && (_p27._3._4._0.ctor === 'Red')) {
															break _v36_1;
														} else {
															break _v36_6;
														}
													}
												case 'NBlack':
													if (((((_p27._0.ctor === 'BBlack') && (_p27._3._3.ctor === 'RBNode_elm_builtin')) && (_p27._3._3._0.ctor === 'Black')) && (_p27._3._4.ctor === 'RBNode_elm_builtin')) && (_p27._3._4._0.ctor === 'Black')) {
														break _v36_5;
													} else {
														break _v36_6;
													}
												default:
													break _v36_6;
											}
										}
									} else {
										if (_p27._4.ctor === 'RBNode_elm_builtin') {
											switch (_p27._4._0.ctor) {
												case 'Red':
													if ((_p27._4._3.ctor === 'RBNode_elm_builtin') && (_p27._4._3._0.ctor === 'Red')) {
														break _v36_2;
													} else {
														if ((_p27._4._4.ctor === 'RBNode_elm_builtin') && (_p27._4._4._0.ctor === 'Red')) {
															break _v36_3;
														} else {
															break _v36_6;
														}
													}
												case 'NBlack':
													if (((((_p27._0.ctor === 'BBlack') && (_p27._4._3.ctor === 'RBNode_elm_builtin')) && (_p27._4._3._0.ctor === 'Black')) && (_p27._4._4.ctor === 'RBNode_elm_builtin')) && (_p27._4._4._0.ctor === 'Black')) {
														break _v36_4;
													} else {
														break _v36_6;
													}
												default:
													break _v36_6;
											}
										} else {
											break _v36_6;
										}
									}
								} else {
									break _v36_6;
								}
							} while(false);
							return _elm_lang$core$Dict$balancedTree(_p27._0)(_p27._3._3._1)(_p27._3._3._2)(_p27._3._1)(_p27._3._2)(_p27._1)(_p27._2)(_p27._3._3._3)(_p27._3._3._4)(_p27._3._4)(_p27._4);
						} while(false);
						return _elm_lang$core$Dict$balancedTree(_p27._0)(_p27._3._1)(_p27._3._2)(_p27._3._4._1)(_p27._3._4._2)(_p27._1)(_p27._2)(_p27._3._3)(_p27._3._4._3)(_p27._3._4._4)(_p27._4);
					} while(false);
					return _elm_lang$core$Dict$balancedTree(_p27._0)(_p27._1)(_p27._2)(_p27._4._3._1)(_p27._4._3._2)(_p27._4._1)(_p27._4._2)(_p27._3)(_p27._4._3._3)(_p27._4._3._4)(_p27._4._4);
				} while(false);
				return _elm_lang$core$Dict$balancedTree(_p27._0)(_p27._1)(_p27._2)(_p27._4._1)(_p27._4._2)(_p27._4._4._1)(_p27._4._4._2)(_p27._3)(_p27._4._3)(_p27._4._4._3)(_p27._4._4._4);
			} while(false);
			return A5(
				_elm_lang$core$Dict$RBNode_elm_builtin,
				_elm_lang$core$Dict$Black,
				_p27._4._3._1,
				_p27._4._3._2,
				A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, _p27._1, _p27._2, _p27._3, _p27._4._3._3),
				A5(
					_elm_lang$core$Dict$balance,
					_elm_lang$core$Dict$Black,
					_p27._4._1,
					_p27._4._2,
					_p27._4._3._4,
					_elm_lang$core$Dict$redden(_p27._4._4)));
		} while(false);
		return A5(
			_elm_lang$core$Dict$RBNode_elm_builtin,
			_elm_lang$core$Dict$Black,
			_p27._3._4._1,
			_p27._3._4._2,
			A5(
				_elm_lang$core$Dict$balance,
				_elm_lang$core$Dict$Black,
				_p27._3._1,
				_p27._3._2,
				_elm_lang$core$Dict$redden(_p27._3._3),
				_p27._3._4._3),
			A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, _p27._1, _p27._2, _p27._3._4._4, _p27._4));
	} while(false);
	return tree;
};
var _elm_lang$core$Dict$balance = F5(
	function (c, k, v, l, r) {
		var tree = A5(_elm_lang$core$Dict$RBNode_elm_builtin, c, k, v, l, r);
		return _elm_lang$core$Dict$blackish(tree) ? _elm_lang$core$Dict$balanceHelp(tree) : tree;
	});
var _elm_lang$core$Dict$bubble = F5(
	function (c, k, v, l, r) {
		return (_elm_lang$core$Dict$isBBlack(l) || _elm_lang$core$Dict$isBBlack(r)) ? A5(
			_elm_lang$core$Dict$balance,
			_elm_lang$core$Dict$moreBlack(c),
			k,
			v,
			_elm_lang$core$Dict$lessBlackTree(l),
			_elm_lang$core$Dict$lessBlackTree(r)) : A5(_elm_lang$core$Dict$RBNode_elm_builtin, c, k, v, l, r);
	});
var _elm_lang$core$Dict$removeMax = F5(
	function (c, k, v, l, r) {
		var _p28 = r;
		if (_p28.ctor === 'RBEmpty_elm_builtin') {
			return A3(_elm_lang$core$Dict$rem, c, l, r);
		} else {
			return A5(
				_elm_lang$core$Dict$bubble,
				c,
				k,
				v,
				l,
				A5(_elm_lang$core$Dict$removeMax, _p28._0, _p28._1, _p28._2, _p28._3, _p28._4));
		}
	});
var _elm_lang$core$Dict$rem = F3(
	function (color, left, right) {
		var _p29 = {ctor: '_Tuple2', _0: left, _1: right};
		if (_p29._0.ctor === 'RBEmpty_elm_builtin') {
			if (_p29._1.ctor === 'RBEmpty_elm_builtin') {
				var _p30 = color;
				switch (_p30.ctor) {
					case 'Red':
						return _elm_lang$core$Dict$RBEmpty_elm_builtin(_elm_lang$core$Dict$LBlack);
					case 'Black':
						return _elm_lang$core$Dict$RBEmpty_elm_builtin(_elm_lang$core$Dict$LBBlack);
					default:
						return _elm_lang$core$Native_Debug.crash('cannot have bblack or nblack nodes at this point');
				}
			} else {
				var _p33 = _p29._1._0;
				var _p32 = _p29._0._0;
				var _p31 = {ctor: '_Tuple3', _0: color, _1: _p32, _2: _p33};
				if ((((_p31.ctor === '_Tuple3') && (_p31._0.ctor === 'Black')) && (_p31._1.ctor === 'LBlack')) && (_p31._2.ctor === 'Red')) {
					return A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, _p29._1._1, _p29._1._2, _p29._1._3, _p29._1._4);
				} else {
					return A4(
						_elm_lang$core$Dict$reportRemBug,
						'Black/LBlack/Red',
						color,
						_elm_lang$core$Basics$toString(_p32),
						_elm_lang$core$Basics$toString(_p33));
				}
			}
		} else {
			if (_p29._1.ctor === 'RBEmpty_elm_builtin') {
				var _p36 = _p29._1._0;
				var _p35 = _p29._0._0;
				var _p34 = {ctor: '_Tuple3', _0: color, _1: _p35, _2: _p36};
				if ((((_p34.ctor === '_Tuple3') && (_p34._0.ctor === 'Black')) && (_p34._1.ctor === 'Red')) && (_p34._2.ctor === 'LBlack')) {
					return A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, _p29._0._1, _p29._0._2, _p29._0._3, _p29._0._4);
				} else {
					return A4(
						_elm_lang$core$Dict$reportRemBug,
						'Black/Red/LBlack',
						color,
						_elm_lang$core$Basics$toString(_p35),
						_elm_lang$core$Basics$toString(_p36));
				}
			} else {
				var _p40 = _p29._0._2;
				var _p39 = _p29._0._4;
				var _p38 = _p29._0._1;
				var newLeft = A5(_elm_lang$core$Dict$removeMax, _p29._0._0, _p38, _p40, _p29._0._3, _p39);
				var _p37 = A3(_elm_lang$core$Dict$maxWithDefault, _p38, _p40, _p39);
				var k = _p37._0;
				var v = _p37._1;
				return A5(_elm_lang$core$Dict$bubble, color, k, v, newLeft, right);
			}
		}
	});
var _elm_lang$core$Dict$map = F2(
	function (f, dict) {
		var _p41 = dict;
		if (_p41.ctor === 'RBEmpty_elm_builtin') {
			return _elm_lang$core$Dict$RBEmpty_elm_builtin(_elm_lang$core$Dict$LBlack);
		} else {
			var _p42 = _p41._1;
			return A5(
				_elm_lang$core$Dict$RBNode_elm_builtin,
				_p41._0,
				_p42,
				A2(f, _p42, _p41._2),
				A2(_elm_lang$core$Dict$map, f, _p41._3),
				A2(_elm_lang$core$Dict$map, f, _p41._4));
		}
	});
var _elm_lang$core$Dict$Same = {ctor: 'Same'};
var _elm_lang$core$Dict$Remove = {ctor: 'Remove'};
var _elm_lang$core$Dict$Insert = {ctor: 'Insert'};
var _elm_lang$core$Dict$update = F3(
	function (k, alter, dict) {
		var up = function (dict) {
			var _p43 = dict;
			if (_p43.ctor === 'RBEmpty_elm_builtin') {
				var _p44 = alter(_elm_lang$core$Maybe$Nothing);
				if (_p44.ctor === 'Nothing') {
					return {ctor: '_Tuple2', _0: _elm_lang$core$Dict$Same, _1: _elm_lang$core$Dict$empty};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Dict$Insert,
						_1: A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Red, k, _p44._0, _elm_lang$core$Dict$empty, _elm_lang$core$Dict$empty)
					};
				}
			} else {
				var _p55 = _p43._2;
				var _p54 = _p43._4;
				var _p53 = _p43._3;
				var _p52 = _p43._1;
				var _p51 = _p43._0;
				var _p45 = A2(_elm_lang$core$Basics$compare, k, _p52);
				switch (_p45.ctor) {
					case 'EQ':
						var _p46 = alter(
							_elm_lang$core$Maybe$Just(_p55));
						if (_p46.ctor === 'Nothing') {
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Dict$Remove,
								_1: A3(_elm_lang$core$Dict$rem, _p51, _p53, _p54)
							};
						} else {
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Dict$Same,
								_1: A5(_elm_lang$core$Dict$RBNode_elm_builtin, _p51, _p52, _p46._0, _p53, _p54)
							};
						}
					case 'LT':
						var _p47 = up(_p53);
						var flag = _p47._0;
						var newLeft = _p47._1;
						var _p48 = flag;
						switch (_p48.ctor) {
							case 'Same':
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Dict$Same,
									_1: A5(_elm_lang$core$Dict$RBNode_elm_builtin, _p51, _p52, _p55, newLeft, _p54)
								};
							case 'Insert':
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Dict$Insert,
									_1: A5(_elm_lang$core$Dict$balance, _p51, _p52, _p55, newLeft, _p54)
								};
							default:
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Dict$Remove,
									_1: A5(_elm_lang$core$Dict$bubble, _p51, _p52, _p55, newLeft, _p54)
								};
						}
					default:
						var _p49 = up(_p54);
						var flag = _p49._0;
						var newRight = _p49._1;
						var _p50 = flag;
						switch (_p50.ctor) {
							case 'Same':
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Dict$Same,
									_1: A5(_elm_lang$core$Dict$RBNode_elm_builtin, _p51, _p52, _p55, _p53, newRight)
								};
							case 'Insert':
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Dict$Insert,
									_1: A5(_elm_lang$core$Dict$balance, _p51, _p52, _p55, _p53, newRight)
								};
							default:
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Dict$Remove,
									_1: A5(_elm_lang$core$Dict$bubble, _p51, _p52, _p55, _p53, newRight)
								};
						}
				}
			}
		};
		var _p56 = up(dict);
		var flag = _p56._0;
		var updatedDict = _p56._1;
		var _p57 = flag;
		switch (_p57.ctor) {
			case 'Same':
				return updatedDict;
			case 'Insert':
				return _elm_lang$core$Dict$ensureBlackRoot(updatedDict);
			default:
				return _elm_lang$core$Dict$blacken(updatedDict);
		}
	});
var _elm_lang$core$Dict$insert = F3(
	function (key, value, dict) {
		return A3(
			_elm_lang$core$Dict$update,
			key,
			_elm_lang$core$Basics$always(
				_elm_lang$core$Maybe$Just(value)),
			dict);
	});
var _elm_lang$core$Dict$singleton = F2(
	function (key, value) {
		return A3(_elm_lang$core$Dict$insert, key, value, _elm_lang$core$Dict$empty);
	});
var _elm_lang$core$Dict$union = F2(
	function (t1, t2) {
		return A3(_elm_lang$core$Dict$foldl, _elm_lang$core$Dict$insert, t2, t1);
	});
var _elm_lang$core$Dict$filter = F2(
	function (predicate, dictionary) {
		var add = F3(
			function (key, value, dict) {
				return A2(predicate, key, value) ? A3(_elm_lang$core$Dict$insert, key, value, dict) : dict;
			});
		return A3(_elm_lang$core$Dict$foldl, add, _elm_lang$core$Dict$empty, dictionary);
	});
var _elm_lang$core$Dict$intersect = F2(
	function (t1, t2) {
		return A2(
			_elm_lang$core$Dict$filter,
			F2(
				function (k, _p58) {
					return A2(_elm_lang$core$Dict$member, k, t2);
				}),
			t1);
	});
var _elm_lang$core$Dict$partition = F2(
	function (predicate, dict) {
		var add = F3(
			function (key, value, _p59) {
				var _p60 = _p59;
				var _p62 = _p60._1;
				var _p61 = _p60._0;
				return A2(predicate, key, value) ? {
					ctor: '_Tuple2',
					_0: A3(_elm_lang$core$Dict$insert, key, value, _p61),
					_1: _p62
				} : {
					ctor: '_Tuple2',
					_0: _p61,
					_1: A3(_elm_lang$core$Dict$insert, key, value, _p62)
				};
			});
		return A3(
			_elm_lang$core$Dict$foldl,
			add,
			{ctor: '_Tuple2', _0: _elm_lang$core$Dict$empty, _1: _elm_lang$core$Dict$empty},
			dict);
	});
var _elm_lang$core$Dict$fromList = function (assocs) {
	return A3(
		_elm_lang$core$List$foldl,
		F2(
			function (_p63, dict) {
				var _p64 = _p63;
				return A3(_elm_lang$core$Dict$insert, _p64._0, _p64._1, dict);
			}),
		_elm_lang$core$Dict$empty,
		assocs);
};
var _elm_lang$core$Dict$remove = F2(
	function (key, dict) {
		return A3(
			_elm_lang$core$Dict$update,
			key,
			_elm_lang$core$Basics$always(_elm_lang$core$Maybe$Nothing),
			dict);
	});
var _elm_lang$core$Dict$diff = F2(
	function (t1, t2) {
		return A3(
			_elm_lang$core$Dict$foldl,
			F3(
				function (k, v, t) {
					return A2(_elm_lang$core$Dict$remove, k, t);
				}),
			t1,
			t2);
	});

var _elm_lang$dom$Native_Dom = function() {

var fakeNode = {
	addEventListener: function() {},
	removeEventListener: function() {}
};

var onDocument = on(typeof document !== 'undefined' ? document : fakeNode);
var onWindow = on(typeof window !== 'undefined' ? window : fakeNode);

function on(node)
{
	return function(eventName, decoder, toTask)
	{
		return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback) {

			function performTask(event)
			{
				var result = A2(_elm_lang$core$Json_Decode$decodeValue, decoder, event);
				if (result.ctor === 'Ok')
				{
					_elm_lang$core$Native_Scheduler.rawSpawn(toTask(result._0));
				}
			}

			node.addEventListener(eventName, performTask);

			return function()
			{
				node.removeEventListener(eventName, performTask);
			};
		});
	};
}

var rAF = typeof requestAnimationFrame !== 'undefined'
	? requestAnimationFrame
	: function(callback) { callback(); };

function withNode(id, doStuff)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		rAF(function()
		{
			var node = document.getElementById(id);
			if (node === null)
			{
				callback(_elm_lang$core$Native_Scheduler.fail({ ctor: 'NotFound', _0: id }));
				return;
			}
			callback(_elm_lang$core$Native_Scheduler.succeed(doStuff(node)));
		});
	});
}


// FOCUS

function focus(id)
{
	return withNode(id, function(node) {
		node.focus();
		return _elm_lang$core$Native_Utils.Tuple0;
	});
}

function blur(id)
{
	return withNode(id, function(node) {
		node.blur();
		return _elm_lang$core$Native_Utils.Tuple0;
	});
}


// SCROLLING

function getScrollTop(id)
{
	return withNode(id, function(node) {
		return node.scrollTop;
	});
}

function setScrollTop(id, desiredScrollTop)
{
	return withNode(id, function(node) {
		node.scrollTop = desiredScrollTop;
		return _elm_lang$core$Native_Utils.Tuple0;
	});
}

function toBottom(id)
{
	return withNode(id, function(node) {
		node.scrollTop = node.scrollHeight;
		return _elm_lang$core$Native_Utils.Tuple0;
	});
}

function getScrollLeft(id)
{
	return withNode(id, function(node) {
		return node.scrollLeft;
	});
}

function setScrollLeft(id, desiredScrollLeft)
{
	return withNode(id, function(node) {
		node.scrollLeft = desiredScrollLeft;
		return _elm_lang$core$Native_Utils.Tuple0;
	});
}

function toRight(id)
{
	return withNode(id, function(node) {
		node.scrollLeft = node.scrollWidth;
		return _elm_lang$core$Native_Utils.Tuple0;
	});
}


// SIZE

function width(options, id)
{
	return withNode(id, function(node) {
		switch (options.ctor)
		{
			case 'Content':
				return node.scrollWidth;
			case 'VisibleContent':
				return node.clientWidth;
			case 'VisibleContentWithBorders':
				return node.offsetWidth;
			case 'VisibleContentWithBordersAndMargins':
				var rect = node.getBoundingClientRect();
				return rect.right - rect.left;
		}
	});
}

function height(options, id)
{
	return withNode(id, function(node) {
		switch (options.ctor)
		{
			case 'Content':
				return node.scrollHeight;
			case 'VisibleContent':
				return node.clientHeight;
			case 'VisibleContentWithBorders':
				return node.offsetHeight;
			case 'VisibleContentWithBordersAndMargins':
				var rect = node.getBoundingClientRect();
				return rect.bottom - rect.top;
		}
	});
}

return {
	onDocument: F3(onDocument),
	onWindow: F3(onWindow),

	focus: focus,
	blur: blur,

	getScrollTop: getScrollTop,
	setScrollTop: F2(setScrollTop),
	getScrollLeft: getScrollLeft,
	setScrollLeft: F2(setScrollLeft),
	toBottom: toBottom,
	toRight: toRight,

	height: F2(height),
	width: F2(width)
};

}();

var _elm_lang$core$Task$onError = _elm_lang$core$Native_Scheduler.onError;
var _elm_lang$core$Task$andThen = _elm_lang$core$Native_Scheduler.andThen;
var _elm_lang$core$Task$spawnCmd = F2(
	function (router, _p0) {
		var _p1 = _p0;
		return _elm_lang$core$Native_Scheduler.spawn(
			A2(
				_elm_lang$core$Task$andThen,
				_elm_lang$core$Platform$sendToApp(router),
				_p1._0));
	});
var _elm_lang$core$Task$fail = _elm_lang$core$Native_Scheduler.fail;
var _elm_lang$core$Task$mapError = F2(
	function (convert, task) {
		return A2(
			_elm_lang$core$Task$onError,
			function (_p2) {
				return _elm_lang$core$Task$fail(
					convert(_p2));
			},
			task);
	});
var _elm_lang$core$Task$succeed = _elm_lang$core$Native_Scheduler.succeed;
var _elm_lang$core$Task$map = F2(
	function (func, taskA) {
		return A2(
			_elm_lang$core$Task$andThen,
			function (a) {
				return _elm_lang$core$Task$succeed(
					func(a));
			},
			taskA);
	});
var _elm_lang$core$Task$map2 = F3(
	function (func, taskA, taskB) {
		return A2(
			_elm_lang$core$Task$andThen,
			function (a) {
				return A2(
					_elm_lang$core$Task$andThen,
					function (b) {
						return _elm_lang$core$Task$succeed(
							A2(func, a, b));
					},
					taskB);
			},
			taskA);
	});
var _elm_lang$core$Task$map3 = F4(
	function (func, taskA, taskB, taskC) {
		return A2(
			_elm_lang$core$Task$andThen,
			function (a) {
				return A2(
					_elm_lang$core$Task$andThen,
					function (b) {
						return A2(
							_elm_lang$core$Task$andThen,
							function (c) {
								return _elm_lang$core$Task$succeed(
									A3(func, a, b, c));
							},
							taskC);
					},
					taskB);
			},
			taskA);
	});
var _elm_lang$core$Task$map4 = F5(
	function (func, taskA, taskB, taskC, taskD) {
		return A2(
			_elm_lang$core$Task$andThen,
			function (a) {
				return A2(
					_elm_lang$core$Task$andThen,
					function (b) {
						return A2(
							_elm_lang$core$Task$andThen,
							function (c) {
								return A2(
									_elm_lang$core$Task$andThen,
									function (d) {
										return _elm_lang$core$Task$succeed(
											A4(func, a, b, c, d));
									},
									taskD);
							},
							taskC);
					},
					taskB);
			},
			taskA);
	});
var _elm_lang$core$Task$map5 = F6(
	function (func, taskA, taskB, taskC, taskD, taskE) {
		return A2(
			_elm_lang$core$Task$andThen,
			function (a) {
				return A2(
					_elm_lang$core$Task$andThen,
					function (b) {
						return A2(
							_elm_lang$core$Task$andThen,
							function (c) {
								return A2(
									_elm_lang$core$Task$andThen,
									function (d) {
										return A2(
											_elm_lang$core$Task$andThen,
											function (e) {
												return _elm_lang$core$Task$succeed(
													A5(func, a, b, c, d, e));
											},
											taskE);
									},
									taskD);
							},
							taskC);
					},
					taskB);
			},
			taskA);
	});
var _elm_lang$core$Task$sequence = function (tasks) {
	var _p3 = tasks;
	if (_p3.ctor === '[]') {
		return _elm_lang$core$Task$succeed(
			{ctor: '[]'});
	} else {
		return A3(
			_elm_lang$core$Task$map2,
			F2(
				function (x, y) {
					return {ctor: '::', _0: x, _1: y};
				}),
			_p3._0,
			_elm_lang$core$Task$sequence(_p3._1));
	}
};
var _elm_lang$core$Task$onEffects = F3(
	function (router, commands, state) {
		return A2(
			_elm_lang$core$Task$map,
			function (_p4) {
				return {ctor: '_Tuple0'};
			},
			_elm_lang$core$Task$sequence(
				A2(
					_elm_lang$core$List$map,
					_elm_lang$core$Task$spawnCmd(router),
					commands)));
	});
var _elm_lang$core$Task$init = _elm_lang$core$Task$succeed(
	{ctor: '_Tuple0'});
var _elm_lang$core$Task$onSelfMsg = F3(
	function (_p7, _p6, _p5) {
		return _elm_lang$core$Task$succeed(
			{ctor: '_Tuple0'});
	});
var _elm_lang$core$Task$command = _elm_lang$core$Native_Platform.leaf('Task');
var _elm_lang$core$Task$Perform = function (a) {
	return {ctor: 'Perform', _0: a};
};
var _elm_lang$core$Task$perform = F2(
	function (toMessage, task) {
		return _elm_lang$core$Task$command(
			_elm_lang$core$Task$Perform(
				A2(_elm_lang$core$Task$map, toMessage, task)));
	});
var _elm_lang$core$Task$attempt = F2(
	function (resultToMessage, task) {
		return _elm_lang$core$Task$command(
			_elm_lang$core$Task$Perform(
				A2(
					_elm_lang$core$Task$onError,
					function (_p8) {
						return _elm_lang$core$Task$succeed(
							resultToMessage(
								_elm_lang$core$Result$Err(_p8)));
					},
					A2(
						_elm_lang$core$Task$andThen,
						function (_p9) {
							return _elm_lang$core$Task$succeed(
								resultToMessage(
									_elm_lang$core$Result$Ok(_p9)));
						},
						task))));
	});
var _elm_lang$core$Task$cmdMap = F2(
	function (tagger, _p10) {
		var _p11 = _p10;
		return _elm_lang$core$Task$Perform(
			A2(_elm_lang$core$Task$map, tagger, _p11._0));
	});
_elm_lang$core$Native_Platform.effectManagers['Task'] = {pkg: 'elm-lang/core', init: _elm_lang$core$Task$init, onEffects: _elm_lang$core$Task$onEffects, onSelfMsg: _elm_lang$core$Task$onSelfMsg, tag: 'cmd', cmdMap: _elm_lang$core$Task$cmdMap};

var _elm_lang$dom$Dom$blur = _elm_lang$dom$Native_Dom.blur;
var _elm_lang$dom$Dom$focus = _elm_lang$dom$Native_Dom.focus;
var _elm_lang$dom$Dom$NotFound = function (a) {
	return {ctor: 'NotFound', _0: a};
};

//import Native.List //

var _elm_lang$core$Native_Array = function() {

// A RRB-Tree has two distinct data types.
// Leaf -> "height"  is always 0
//         "table"   is an array of elements
// Node -> "height"  is always greater than 0
//         "table"   is an array of child nodes
//         "lengths" is an array of accumulated lengths of the child nodes

// M is the maximal table size. 32 seems fast. E is the allowed increase
// of search steps when concatting to find an index. Lower values will
// decrease balancing, but will increase search steps.
var M = 32;
var E = 2;

// An empty array.
var empty = {
	ctor: '_Array',
	height: 0,
	table: []
};


function get(i, array)
{
	if (i < 0 || i >= length(array))
	{
		throw new Error(
			'Index ' + i + ' is out of range. Check the length of ' +
			'your array first or use getMaybe or getWithDefault.');
	}
	return unsafeGet(i, array);
}


function unsafeGet(i, array)
{
	for (var x = array.height; x > 0; x--)
	{
		var slot = i >> (x * 5);
		while (array.lengths[slot] <= i)
		{
			slot++;
		}
		if (slot > 0)
		{
			i -= array.lengths[slot - 1];
		}
		array = array.table[slot];
	}
	return array.table[i];
}


// Sets the value at the index i. Only the nodes leading to i will get
// copied and updated.
function set(i, item, array)
{
	if (i < 0 || length(array) <= i)
	{
		return array;
	}
	return unsafeSet(i, item, array);
}


function unsafeSet(i, item, array)
{
	array = nodeCopy(array);

	if (array.height === 0)
	{
		array.table[i] = item;
	}
	else
	{
		var slot = getSlot(i, array);
		if (slot > 0)
		{
			i -= array.lengths[slot - 1];
		}
		array.table[slot] = unsafeSet(i, item, array.table[slot]);
	}
	return array;
}


function initialize(len, f)
{
	if (len <= 0)
	{
		return empty;
	}
	var h = Math.floor( Math.log(len) / Math.log(M) );
	return initialize_(f, h, 0, len);
}

function initialize_(f, h, from, to)
{
	if (h === 0)
	{
		var table = new Array((to - from) % (M + 1));
		for (var i = 0; i < table.length; i++)
		{
		  table[i] = f(from + i);
		}
		return {
			ctor: '_Array',
			height: 0,
			table: table
		};
	}

	var step = Math.pow(M, h);
	var table = new Array(Math.ceil((to - from) / step));
	var lengths = new Array(table.length);
	for (var i = 0; i < table.length; i++)
	{
		table[i] = initialize_(f, h - 1, from + (i * step), Math.min(from + ((i + 1) * step), to));
		lengths[i] = length(table[i]) + (i > 0 ? lengths[i-1] : 0);
	}
	return {
		ctor: '_Array',
		height: h,
		table: table,
		lengths: lengths
	};
}

function fromList(list)
{
	if (list.ctor === '[]')
	{
		return empty;
	}

	// Allocate M sized blocks (table) and write list elements to it.
	var table = new Array(M);
	var nodes = [];
	var i = 0;

	while (list.ctor !== '[]')
	{
		table[i] = list._0;
		list = list._1;
		i++;

		// table is full, so we can push a leaf containing it into the
		// next node.
		if (i === M)
		{
			var leaf = {
				ctor: '_Array',
				height: 0,
				table: table
			};
			fromListPush(leaf, nodes);
			table = new Array(M);
			i = 0;
		}
	}

	// Maybe there is something left on the table.
	if (i > 0)
	{
		var leaf = {
			ctor: '_Array',
			height: 0,
			table: table.splice(0, i)
		};
		fromListPush(leaf, nodes);
	}

	// Go through all of the nodes and eventually push them into higher nodes.
	for (var h = 0; h < nodes.length - 1; h++)
	{
		if (nodes[h].table.length > 0)
		{
			fromListPush(nodes[h], nodes);
		}
	}

	var head = nodes[nodes.length - 1];
	if (head.height > 0 && head.table.length === 1)
	{
		return head.table[0];
	}
	else
	{
		return head;
	}
}

// Push a node into a higher node as a child.
function fromListPush(toPush, nodes)
{
	var h = toPush.height;

	// Maybe the node on this height does not exist.
	if (nodes.length === h)
	{
		var node = {
			ctor: '_Array',
			height: h + 1,
			table: [],
			lengths: []
		};
		nodes.push(node);
	}

	nodes[h].table.push(toPush);
	var len = length(toPush);
	if (nodes[h].lengths.length > 0)
	{
		len += nodes[h].lengths[nodes[h].lengths.length - 1];
	}
	nodes[h].lengths.push(len);

	if (nodes[h].table.length === M)
	{
		fromListPush(nodes[h], nodes);
		nodes[h] = {
			ctor: '_Array',
			height: h + 1,
			table: [],
			lengths: []
		};
	}
}

// Pushes an item via push_ to the bottom right of a tree.
function push(item, a)
{
	var pushed = push_(item, a);
	if (pushed !== null)
	{
		return pushed;
	}

	var newTree = create(item, a.height);
	return siblise(a, newTree);
}

// Recursively tries to push an item to the bottom-right most
// tree possible. If there is no space left for the item,
// null will be returned.
function push_(item, a)
{
	// Handle resursion stop at leaf level.
	if (a.height === 0)
	{
		if (a.table.length < M)
		{
			var newA = {
				ctor: '_Array',
				height: 0,
				table: a.table.slice()
			};
			newA.table.push(item);
			return newA;
		}
		else
		{
		  return null;
		}
	}

	// Recursively push
	var pushed = push_(item, botRight(a));

	// There was space in the bottom right tree, so the slot will
	// be updated.
	if (pushed !== null)
	{
		var newA = nodeCopy(a);
		newA.table[newA.table.length - 1] = pushed;
		newA.lengths[newA.lengths.length - 1]++;
		return newA;
	}

	// When there was no space left, check if there is space left
	// for a new slot with a tree which contains only the item
	// at the bottom.
	if (a.table.length < M)
	{
		var newSlot = create(item, a.height - 1);
		var newA = nodeCopy(a);
		newA.table.push(newSlot);
		newA.lengths.push(newA.lengths[newA.lengths.length - 1] + length(newSlot));
		return newA;
	}
	else
	{
		return null;
	}
}

// Converts an array into a list of elements.
function toList(a)
{
	return toList_(_elm_lang$core$Native_List.Nil, a);
}

function toList_(list, a)
{
	for (var i = a.table.length - 1; i >= 0; i--)
	{
		list =
			a.height === 0
				? _elm_lang$core$Native_List.Cons(a.table[i], list)
				: toList_(list, a.table[i]);
	}
	return list;
}

// Maps a function over the elements of an array.
function map(f, a)
{
	var newA = {
		ctor: '_Array',
		height: a.height,
		table: new Array(a.table.length)
	};
	if (a.height > 0)
	{
		newA.lengths = a.lengths;
	}
	for (var i = 0; i < a.table.length; i++)
	{
		newA.table[i] =
			a.height === 0
				? f(a.table[i])
				: map(f, a.table[i]);
	}
	return newA;
}

// Maps a function over the elements with their index as first argument.
function indexedMap(f, a)
{
	return indexedMap_(f, a, 0);
}

function indexedMap_(f, a, from)
{
	var newA = {
		ctor: '_Array',
		height: a.height,
		table: new Array(a.table.length)
	};
	if (a.height > 0)
	{
		newA.lengths = a.lengths;
	}
	for (var i = 0; i < a.table.length; i++)
	{
		newA.table[i] =
			a.height === 0
				? A2(f, from + i, a.table[i])
				: indexedMap_(f, a.table[i], i == 0 ? from : from + a.lengths[i - 1]);
	}
	return newA;
}

function foldl(f, b, a)
{
	if (a.height === 0)
	{
		for (var i = 0; i < a.table.length; i++)
		{
			b = A2(f, a.table[i], b);
		}
	}
	else
	{
		for (var i = 0; i < a.table.length; i++)
		{
			b = foldl(f, b, a.table[i]);
		}
	}
	return b;
}

function foldr(f, b, a)
{
	if (a.height === 0)
	{
		for (var i = a.table.length; i--; )
		{
			b = A2(f, a.table[i], b);
		}
	}
	else
	{
		for (var i = a.table.length; i--; )
		{
			b = foldr(f, b, a.table[i]);
		}
	}
	return b;
}

// TODO: currently, it slices the right, then the left. This can be
// optimized.
function slice(from, to, a)
{
	if (from < 0)
	{
		from += length(a);
	}
	if (to < 0)
	{
		to += length(a);
	}
	return sliceLeft(from, sliceRight(to, a));
}

function sliceRight(to, a)
{
	if (to === length(a))
	{
		return a;
	}

	// Handle leaf level.
	if (a.height === 0)
	{
		var newA = { ctor:'_Array', height:0 };
		newA.table = a.table.slice(0, to);
		return newA;
	}

	// Slice the right recursively.
	var right = getSlot(to, a);
	var sliced = sliceRight(to - (right > 0 ? a.lengths[right - 1] : 0), a.table[right]);

	// Maybe the a node is not even needed, as sliced contains the whole slice.
	if (right === 0)
	{
		return sliced;
	}

	// Create new node.
	var newA = {
		ctor: '_Array',
		height: a.height,
		table: a.table.slice(0, right),
		lengths: a.lengths.slice(0, right)
	};
	if (sliced.table.length > 0)
	{
		newA.table[right] = sliced;
		newA.lengths[right] = length(sliced) + (right > 0 ? newA.lengths[right - 1] : 0);
	}
	return newA;
}

function sliceLeft(from, a)
{
	if (from === 0)
	{
		return a;
	}

	// Handle leaf level.
	if (a.height === 0)
	{
		var newA = { ctor:'_Array', height:0 };
		newA.table = a.table.slice(from, a.table.length + 1);
		return newA;
	}

	// Slice the left recursively.
	var left = getSlot(from, a);
	var sliced = sliceLeft(from - (left > 0 ? a.lengths[left - 1] : 0), a.table[left]);

	// Maybe the a node is not even needed, as sliced contains the whole slice.
	if (left === a.table.length - 1)
	{
		return sliced;
	}

	// Create new node.
	var newA = {
		ctor: '_Array',
		height: a.height,
		table: a.table.slice(left, a.table.length + 1),
		lengths: new Array(a.table.length - left)
	};
	newA.table[0] = sliced;
	var len = 0;
	for (var i = 0; i < newA.table.length; i++)
	{
		len += length(newA.table[i]);
		newA.lengths[i] = len;
	}

	return newA;
}

// Appends two trees.
function append(a,b)
{
	if (a.table.length === 0)
	{
		return b;
	}
	if (b.table.length === 0)
	{
		return a;
	}

	var c = append_(a, b);

	// Check if both nodes can be crunshed together.
	if (c[0].table.length + c[1].table.length <= M)
	{
		if (c[0].table.length === 0)
		{
			return c[1];
		}
		if (c[1].table.length === 0)
		{
			return c[0];
		}

		// Adjust .table and .lengths
		c[0].table = c[0].table.concat(c[1].table);
		if (c[0].height > 0)
		{
			var len = length(c[0]);
			for (var i = 0; i < c[1].lengths.length; i++)
			{
				c[1].lengths[i] += len;
			}
			c[0].lengths = c[0].lengths.concat(c[1].lengths);
		}

		return c[0];
	}

	if (c[0].height > 0)
	{
		var toRemove = calcToRemove(a, b);
		if (toRemove > E)
		{
			c = shuffle(c[0], c[1], toRemove);
		}
	}

	return siblise(c[0], c[1]);
}

// Returns an array of two nodes; right and left. One node _may_ be empty.
function append_(a, b)
{
	if (a.height === 0 && b.height === 0)
	{
		return [a, b];
	}

	if (a.height !== 1 || b.height !== 1)
	{
		if (a.height === b.height)
		{
			a = nodeCopy(a);
			b = nodeCopy(b);
			var appended = append_(botRight(a), botLeft(b));

			insertRight(a, appended[1]);
			insertLeft(b, appended[0]);
		}
		else if (a.height > b.height)
		{
			a = nodeCopy(a);
			var appended = append_(botRight(a), b);

			insertRight(a, appended[0]);
			b = parentise(appended[1], appended[1].height + 1);
		}
		else
		{
			b = nodeCopy(b);
			var appended = append_(a, botLeft(b));

			var left = appended[0].table.length === 0 ? 0 : 1;
			var right = left === 0 ? 1 : 0;
			insertLeft(b, appended[left]);
			a = parentise(appended[right], appended[right].height + 1);
		}
	}

	// Check if balancing is needed and return based on that.
	if (a.table.length === 0 || b.table.length === 0)
	{
		return [a, b];
	}

	var toRemove = calcToRemove(a, b);
	if (toRemove <= E)
	{
		return [a, b];
	}
	return shuffle(a, b, toRemove);
}

// Helperfunctions for append_. Replaces a child node at the side of the parent.
function insertRight(parent, node)
{
	var index = parent.table.length - 1;
	parent.table[index] = node;
	parent.lengths[index] = length(node);
	parent.lengths[index] += index > 0 ? parent.lengths[index - 1] : 0;
}

function insertLeft(parent, node)
{
	if (node.table.length > 0)
	{
		parent.table[0] = node;
		parent.lengths[0] = length(node);

		var len = length(parent.table[0]);
		for (var i = 1; i < parent.lengths.length; i++)
		{
			len += length(parent.table[i]);
			parent.lengths[i] = len;
		}
	}
	else
	{
		parent.table.shift();
		for (var i = 1; i < parent.lengths.length; i++)
		{
			parent.lengths[i] = parent.lengths[i] - parent.lengths[0];
		}
		parent.lengths.shift();
	}
}

// Returns the extra search steps for E. Refer to the paper.
function calcToRemove(a, b)
{
	var subLengths = 0;
	for (var i = 0; i < a.table.length; i++)
	{
		subLengths += a.table[i].table.length;
	}
	for (var i = 0; i < b.table.length; i++)
	{
		subLengths += b.table[i].table.length;
	}

	var toRemove = a.table.length + b.table.length;
	return toRemove - (Math.floor((subLengths - 1) / M) + 1);
}

// get2, set2 and saveSlot are helpers for accessing elements over two arrays.
function get2(a, b, index)
{
	return index < a.length
		? a[index]
		: b[index - a.length];
}

function set2(a, b, index, value)
{
	if (index < a.length)
	{
		a[index] = value;
	}
	else
	{
		b[index - a.length] = value;
	}
}

function saveSlot(a, b, index, slot)
{
	set2(a.table, b.table, index, slot);

	var l = (index === 0 || index === a.lengths.length)
		? 0
		: get2(a.lengths, a.lengths, index - 1);

	set2(a.lengths, b.lengths, index, l + length(slot));
}

// Creates a node or leaf with a given length at their arrays for perfomance.
// Is only used by shuffle.
function createNode(h, length)
{
	if (length < 0)
	{
		length = 0;
	}
	var a = {
		ctor: '_Array',
		height: h,
		table: new Array(length)
	};
	if (h > 0)
	{
		a.lengths = new Array(length);
	}
	return a;
}

// Returns an array of two balanced nodes.
function shuffle(a, b, toRemove)
{
	var newA = createNode(a.height, Math.min(M, a.table.length + b.table.length - toRemove));
	var newB = createNode(a.height, newA.table.length - (a.table.length + b.table.length - toRemove));

	// Skip the slots with size M. More precise: copy the slot references
	// to the new node
	var read = 0;
	while (get2(a.table, b.table, read).table.length % M === 0)
	{
		set2(newA.table, newB.table, read, get2(a.table, b.table, read));
		set2(newA.lengths, newB.lengths, read, get2(a.lengths, b.lengths, read));
		read++;
	}

	// Pulling items from left to right, caching in a slot before writing
	// it into the new nodes.
	var write = read;
	var slot = new createNode(a.height - 1, 0);
	var from = 0;

	// If the current slot is still containing data, then there will be at
	// least one more write, so we do not break this loop yet.
	while (read - write - (slot.table.length > 0 ? 1 : 0) < toRemove)
	{
		// Find out the max possible items for copying.
		var source = get2(a.table, b.table, read);
		var to = Math.min(M - slot.table.length, source.table.length);

		// Copy and adjust size table.
		slot.table = slot.table.concat(source.table.slice(from, to));
		if (slot.height > 0)
		{
			var len = slot.lengths.length;
			for (var i = len; i < len + to - from; i++)
			{
				slot.lengths[i] = length(slot.table[i]);
				slot.lengths[i] += (i > 0 ? slot.lengths[i - 1] : 0);
			}
		}

		from += to;

		// Only proceed to next slots[i] if the current one was
		// fully copied.
		if (source.table.length <= to)
		{
			read++; from = 0;
		}

		// Only create a new slot if the current one is filled up.
		if (slot.table.length === M)
		{
			saveSlot(newA, newB, write, slot);
			slot = createNode(a.height - 1, 0);
			write++;
		}
	}

	// Cleanup after the loop. Copy the last slot into the new nodes.
	if (slot.table.length > 0)
	{
		saveSlot(newA, newB, write, slot);
		write++;
	}

	// Shift the untouched slots to the left
	while (read < a.table.length + b.table.length )
	{
		saveSlot(newA, newB, write, get2(a.table, b.table, read));
		read++;
		write++;
	}

	return [newA, newB];
}

// Navigation functions
function botRight(a)
{
	return a.table[a.table.length - 1];
}
function botLeft(a)
{
	return a.table[0];
}

// Copies a node for updating. Note that you should not use this if
// only updating only one of "table" or "lengths" for performance reasons.
function nodeCopy(a)
{
	var newA = {
		ctor: '_Array',
		height: a.height,
		table: a.table.slice()
	};
	if (a.height > 0)
	{
		newA.lengths = a.lengths.slice();
	}
	return newA;
}

// Returns how many items are in the tree.
function length(array)
{
	if (array.height === 0)
	{
		return array.table.length;
	}
	else
	{
		return array.lengths[array.lengths.length - 1];
	}
}

// Calculates in which slot of "table" the item probably is, then
// find the exact slot via forward searching in  "lengths". Returns the index.
function getSlot(i, a)
{
	var slot = i >> (5 * a.height);
	while (a.lengths[slot] <= i)
	{
		slot++;
	}
	return slot;
}

// Recursively creates a tree with a given height containing
// only the given item.
function create(item, h)
{
	if (h === 0)
	{
		return {
			ctor: '_Array',
			height: 0,
			table: [item]
		};
	}
	return {
		ctor: '_Array',
		height: h,
		table: [create(item, h - 1)],
		lengths: [1]
	};
}

// Recursively creates a tree that contains the given tree.
function parentise(tree, h)
{
	if (h === tree.height)
	{
		return tree;
	}

	return {
		ctor: '_Array',
		height: h,
		table: [parentise(tree, h - 1)],
		lengths: [length(tree)]
	};
}

// Emphasizes blood brotherhood beneath two trees.
function siblise(a, b)
{
	return {
		ctor: '_Array',
		height: a.height + 1,
		table: [a, b],
		lengths: [length(a), length(a) + length(b)]
	};
}

function toJSArray(a)
{
	var jsArray = new Array(length(a));
	toJSArray_(jsArray, 0, a);
	return jsArray;
}

function toJSArray_(jsArray, i, a)
{
	for (var t = 0; t < a.table.length; t++)
	{
		if (a.height === 0)
		{
			jsArray[i + t] = a.table[t];
		}
		else
		{
			var inc = t === 0 ? 0 : a.lengths[t - 1];
			toJSArray_(jsArray, i + inc, a.table[t]);
		}
	}
}

function fromJSArray(jsArray)
{
	if (jsArray.length === 0)
	{
		return empty;
	}
	var h = Math.floor(Math.log(jsArray.length) / Math.log(M));
	return fromJSArray_(jsArray, h, 0, jsArray.length);
}

function fromJSArray_(jsArray, h, from, to)
{
	if (h === 0)
	{
		return {
			ctor: '_Array',
			height: 0,
			table: jsArray.slice(from, to)
		};
	}

	var step = Math.pow(M, h);
	var table = new Array(Math.ceil((to - from) / step));
	var lengths = new Array(table.length);
	for (var i = 0; i < table.length; i++)
	{
		table[i] = fromJSArray_(jsArray, h - 1, from + (i * step), Math.min(from + ((i + 1) * step), to));
		lengths[i] = length(table[i]) + (i > 0 ? lengths[i - 1] : 0);
	}
	return {
		ctor: '_Array',
		height: h,
		table: table,
		lengths: lengths
	};
}

return {
	empty: empty,
	fromList: fromList,
	toList: toList,
	initialize: F2(initialize),
	append: F2(append),
	push: F2(push),
	slice: F3(slice),
	get: F2(get),
	set: F3(set),
	map: F2(map),
	indexedMap: F2(indexedMap),
	foldl: F3(foldl),
	foldr: F3(foldr),
	length: length,

	toJSArray: toJSArray,
	fromJSArray: fromJSArray
};

}();
var _elm_lang$core$Array$append = _elm_lang$core$Native_Array.append;
var _elm_lang$core$Array$length = _elm_lang$core$Native_Array.length;
var _elm_lang$core$Array$isEmpty = function (array) {
	return _elm_lang$core$Native_Utils.eq(
		_elm_lang$core$Array$length(array),
		0);
};
var _elm_lang$core$Array$slice = _elm_lang$core$Native_Array.slice;
var _elm_lang$core$Array$set = _elm_lang$core$Native_Array.set;
var _elm_lang$core$Array$get = F2(
	function (i, array) {
		return ((_elm_lang$core$Native_Utils.cmp(0, i) < 1) && (_elm_lang$core$Native_Utils.cmp(
			i,
			_elm_lang$core$Native_Array.length(array)) < 0)) ? _elm_lang$core$Maybe$Just(
			A2(_elm_lang$core$Native_Array.get, i, array)) : _elm_lang$core$Maybe$Nothing;
	});
var _elm_lang$core$Array$push = _elm_lang$core$Native_Array.push;
var _elm_lang$core$Array$empty = _elm_lang$core$Native_Array.empty;
var _elm_lang$core$Array$filter = F2(
	function (isOkay, arr) {
		var update = F2(
			function (x, xs) {
				return isOkay(x) ? A2(_elm_lang$core$Native_Array.push, x, xs) : xs;
			});
		return A3(_elm_lang$core$Native_Array.foldl, update, _elm_lang$core$Native_Array.empty, arr);
	});
var _elm_lang$core$Array$foldr = _elm_lang$core$Native_Array.foldr;
var _elm_lang$core$Array$foldl = _elm_lang$core$Native_Array.foldl;
var _elm_lang$core$Array$indexedMap = _elm_lang$core$Native_Array.indexedMap;
var _elm_lang$core$Array$map = _elm_lang$core$Native_Array.map;
var _elm_lang$core$Array$toIndexedList = function (array) {
	return A3(
		_elm_lang$core$List$map2,
		F2(
			function (v0, v1) {
				return {ctor: '_Tuple2', _0: v0, _1: v1};
			}),
		A2(
			_elm_lang$core$List$range,
			0,
			_elm_lang$core$Native_Array.length(array) - 1),
		_elm_lang$core$Native_Array.toList(array));
};
var _elm_lang$core$Array$toList = _elm_lang$core$Native_Array.toList;
var _elm_lang$core$Array$fromList = _elm_lang$core$Native_Array.fromList;
var _elm_lang$core$Array$initialize = _elm_lang$core$Native_Array.initialize;
var _elm_lang$core$Array$repeat = F2(
	function (n, e) {
		return A2(
			_elm_lang$core$Array$initialize,
			n,
			_elm_lang$core$Basics$always(e));
	});
var _elm_lang$core$Array$Array = {ctor: 'Array'};

//import Maybe, Native.Array, Native.List, Native.Utils, Result //

var _elm_lang$core$Native_Json = function() {


// CORE DECODERS

function succeed(msg)
{
	return {
		ctor: '<decoder>',
		tag: 'succeed',
		msg: msg
	};
}

function fail(msg)
{
	return {
		ctor: '<decoder>',
		tag: 'fail',
		msg: msg
	};
}

function decodePrimitive(tag)
{
	return {
		ctor: '<decoder>',
		tag: tag
	};
}

function decodeContainer(tag, decoder)
{
	return {
		ctor: '<decoder>',
		tag: tag,
		decoder: decoder
	};
}

function decodeNull(value)
{
	return {
		ctor: '<decoder>',
		tag: 'null',
		value: value
	};
}

function decodeField(field, decoder)
{
	return {
		ctor: '<decoder>',
		tag: 'field',
		field: field,
		decoder: decoder
	};
}

function decodeIndex(index, decoder)
{
	return {
		ctor: '<decoder>',
		tag: 'index',
		index: index,
		decoder: decoder
	};
}

function decodeKeyValuePairs(decoder)
{
	return {
		ctor: '<decoder>',
		tag: 'key-value',
		decoder: decoder
	};
}

function mapMany(f, decoders)
{
	return {
		ctor: '<decoder>',
		tag: 'map-many',
		func: f,
		decoders: decoders
	};
}

function andThen(callback, decoder)
{
	return {
		ctor: '<decoder>',
		tag: 'andThen',
		decoder: decoder,
		callback: callback
	};
}

function oneOf(decoders)
{
	return {
		ctor: '<decoder>',
		tag: 'oneOf',
		decoders: decoders
	};
}


// DECODING OBJECTS

function map1(f, d1)
{
	return mapMany(f, [d1]);
}

function map2(f, d1, d2)
{
	return mapMany(f, [d1, d2]);
}

function map3(f, d1, d2, d3)
{
	return mapMany(f, [d1, d2, d3]);
}

function map4(f, d1, d2, d3, d4)
{
	return mapMany(f, [d1, d2, d3, d4]);
}

function map5(f, d1, d2, d3, d4, d5)
{
	return mapMany(f, [d1, d2, d3, d4, d5]);
}

function map6(f, d1, d2, d3, d4, d5, d6)
{
	return mapMany(f, [d1, d2, d3, d4, d5, d6]);
}

function map7(f, d1, d2, d3, d4, d5, d6, d7)
{
	return mapMany(f, [d1, d2, d3, d4, d5, d6, d7]);
}

function map8(f, d1, d2, d3, d4, d5, d6, d7, d8)
{
	return mapMany(f, [d1, d2, d3, d4, d5, d6, d7, d8]);
}


// DECODE HELPERS

function ok(value)
{
	return { tag: 'ok', value: value };
}

function badPrimitive(type, value)
{
	return { tag: 'primitive', type: type, value: value };
}

function badIndex(index, nestedProblems)
{
	return { tag: 'index', index: index, rest: nestedProblems };
}

function badField(field, nestedProblems)
{
	return { tag: 'field', field: field, rest: nestedProblems };
}

function badIndex(index, nestedProblems)
{
	return { tag: 'index', index: index, rest: nestedProblems };
}

function badOneOf(problems)
{
	return { tag: 'oneOf', problems: problems };
}

function bad(msg)
{
	return { tag: 'fail', msg: msg };
}

function badToString(problem)
{
	var context = '_';
	while (problem)
	{
		switch (problem.tag)
		{
			case 'primitive':
				return 'Expecting ' + problem.type
					+ (context === '_' ? '' : ' at ' + context)
					+ ' but instead got: ' + jsToString(problem.value);

			case 'index':
				context += '[' + problem.index + ']';
				problem = problem.rest;
				break;

			case 'field':
				context += '.' + problem.field;
				problem = problem.rest;
				break;

			case 'oneOf':
				var problems = problem.problems;
				for (var i = 0; i < problems.length; i++)
				{
					problems[i] = badToString(problems[i]);
				}
				return 'I ran into the following problems'
					+ (context === '_' ? '' : ' at ' + context)
					+ ':\n\n' + problems.join('\n');

			case 'fail':
				return 'I ran into a `fail` decoder'
					+ (context === '_' ? '' : ' at ' + context)
					+ ': ' + problem.msg;
		}
	}
}

function jsToString(value)
{
	return value === undefined
		? 'undefined'
		: JSON.stringify(value);
}


// DECODE

function runOnString(decoder, string)
{
	var json;
	try
	{
		json = JSON.parse(string);
	}
	catch (e)
	{
		return _elm_lang$core$Result$Err('Given an invalid JSON: ' + e.message);
	}
	return run(decoder, json);
}

function run(decoder, value)
{
	var result = runHelp(decoder, value);
	return (result.tag === 'ok')
		? _elm_lang$core$Result$Ok(result.value)
		: _elm_lang$core$Result$Err(badToString(result));
}

function runHelp(decoder, value)
{
	switch (decoder.tag)
	{
		case 'bool':
			return (typeof value === 'boolean')
				? ok(value)
				: badPrimitive('a Bool', value);

		case 'int':
			if (typeof value !== 'number') {
				return badPrimitive('an Int', value);
			}

			if (-2147483647 < value && value < 2147483647 && (value | 0) === value) {
				return ok(value);
			}

			if (isFinite(value) && !(value % 1)) {
				return ok(value);
			}

			return badPrimitive('an Int', value);

		case 'float':
			return (typeof value === 'number')
				? ok(value)
				: badPrimitive('a Float', value);

		case 'string':
			return (typeof value === 'string')
				? ok(value)
				: (value instanceof String)
					? ok(value + '')
					: badPrimitive('a String', value);

		case 'null':
			return (value === null)
				? ok(decoder.value)
				: badPrimitive('null', value);

		case 'value':
			return ok(value);

		case 'list':
			if (!(value instanceof Array))
			{
				return badPrimitive('a List', value);
			}

			var list = _elm_lang$core$Native_List.Nil;
			for (var i = value.length; i--; )
			{
				var result = runHelp(decoder.decoder, value[i]);
				if (result.tag !== 'ok')
				{
					return badIndex(i, result)
				}
				list = _elm_lang$core$Native_List.Cons(result.value, list);
			}
			return ok(list);

		case 'array':
			if (!(value instanceof Array))
			{
				return badPrimitive('an Array', value);
			}

			var len = value.length;
			var array = new Array(len);
			for (var i = len; i--; )
			{
				var result = runHelp(decoder.decoder, value[i]);
				if (result.tag !== 'ok')
				{
					return badIndex(i, result);
				}
				array[i] = result.value;
			}
			return ok(_elm_lang$core$Native_Array.fromJSArray(array));

		case 'maybe':
			var result = runHelp(decoder.decoder, value);
			return (result.tag === 'ok')
				? ok(_elm_lang$core$Maybe$Just(result.value))
				: ok(_elm_lang$core$Maybe$Nothing);

		case 'field':
			var field = decoder.field;
			if (typeof value !== 'object' || value === null || !(field in value))
			{
				return badPrimitive('an object with a field named `' + field + '`', value);
			}

			var result = runHelp(decoder.decoder, value[field]);
			return (result.tag === 'ok') ? result : badField(field, result);

		case 'index':
			var index = decoder.index;
			if (!(value instanceof Array))
			{
				return badPrimitive('an array', value);
			}
			if (index >= value.length)
			{
				return badPrimitive('a longer array. Need index ' + index + ' but there are only ' + value.length + ' entries', value);
			}

			var result = runHelp(decoder.decoder, value[index]);
			return (result.tag === 'ok') ? result : badIndex(index, result);

		case 'key-value':
			if (typeof value !== 'object' || value === null || value instanceof Array)
			{
				return badPrimitive('an object', value);
			}

			var keyValuePairs = _elm_lang$core$Native_List.Nil;
			for (var key in value)
			{
				var result = runHelp(decoder.decoder, value[key]);
				if (result.tag !== 'ok')
				{
					return badField(key, result);
				}
				var pair = _elm_lang$core$Native_Utils.Tuple2(key, result.value);
				keyValuePairs = _elm_lang$core$Native_List.Cons(pair, keyValuePairs);
			}
			return ok(keyValuePairs);

		case 'map-many':
			var answer = decoder.func;
			var decoders = decoder.decoders;
			for (var i = 0; i < decoders.length; i++)
			{
				var result = runHelp(decoders[i], value);
				if (result.tag !== 'ok')
				{
					return result;
				}
				answer = answer(result.value);
			}
			return ok(answer);

		case 'andThen':
			var result = runHelp(decoder.decoder, value);
			return (result.tag !== 'ok')
				? result
				: runHelp(decoder.callback(result.value), value);

		case 'oneOf':
			var errors = [];
			var temp = decoder.decoders;
			while (temp.ctor !== '[]')
			{
				var result = runHelp(temp._0, value);

				if (result.tag === 'ok')
				{
					return result;
				}

				errors.push(result);

				temp = temp._1;
			}
			return badOneOf(errors);

		case 'fail':
			return bad(decoder.msg);

		case 'succeed':
			return ok(decoder.msg);
	}
}


// EQUALITY

function equality(a, b)
{
	if (a === b)
	{
		return true;
	}

	if (a.tag !== b.tag)
	{
		return false;
	}

	switch (a.tag)
	{
		case 'succeed':
		case 'fail':
			return a.msg === b.msg;

		case 'bool':
		case 'int':
		case 'float':
		case 'string':
		case 'value':
			return true;

		case 'null':
			return a.value === b.value;

		case 'list':
		case 'array':
		case 'maybe':
		case 'key-value':
			return equality(a.decoder, b.decoder);

		case 'field':
			return a.field === b.field && equality(a.decoder, b.decoder);

		case 'index':
			return a.index === b.index && equality(a.decoder, b.decoder);

		case 'map-many':
			if (a.func !== b.func)
			{
				return false;
			}
			return listEquality(a.decoders, b.decoders);

		case 'andThen':
			return a.callback === b.callback && equality(a.decoder, b.decoder);

		case 'oneOf':
			return listEquality(a.decoders, b.decoders);
	}
}

function listEquality(aDecoders, bDecoders)
{
	var len = aDecoders.length;
	if (len !== bDecoders.length)
	{
		return false;
	}
	for (var i = 0; i < len; i++)
	{
		if (!equality(aDecoders[i], bDecoders[i]))
		{
			return false;
		}
	}
	return true;
}


// ENCODE

function encode(indentLevel, value)
{
	return JSON.stringify(value, null, indentLevel);
}

function identity(value)
{
	return value;
}

function encodeObject(keyValuePairs)
{
	var obj = {};
	while (keyValuePairs.ctor !== '[]')
	{
		var pair = keyValuePairs._0;
		obj[pair._0] = pair._1;
		keyValuePairs = keyValuePairs._1;
	}
	return obj;
}

return {
	encode: F2(encode),
	runOnString: F2(runOnString),
	run: F2(run),

	decodeNull: decodeNull,
	decodePrimitive: decodePrimitive,
	decodeContainer: F2(decodeContainer),

	decodeField: F2(decodeField),
	decodeIndex: F2(decodeIndex),

	map1: F2(map1),
	map2: F3(map2),
	map3: F4(map3),
	map4: F5(map4),
	map5: F6(map5),
	map6: F7(map6),
	map7: F8(map7),
	map8: F9(map8),
	decodeKeyValuePairs: decodeKeyValuePairs,

	andThen: F2(andThen),
	fail: fail,
	succeed: succeed,
	oneOf: oneOf,

	identity: identity,
	encodeNull: null,
	encodeArray: _elm_lang$core$Native_Array.toJSArray,
	encodeList: _elm_lang$core$Native_List.toArray,
	encodeObject: encodeObject,

	equality: equality
};

}();

var _elm_lang$core$Json_Encode$list = _elm_lang$core$Native_Json.encodeList;
var _elm_lang$core$Json_Encode$array = _elm_lang$core$Native_Json.encodeArray;
var _elm_lang$core$Json_Encode$object = _elm_lang$core$Native_Json.encodeObject;
var _elm_lang$core$Json_Encode$null = _elm_lang$core$Native_Json.encodeNull;
var _elm_lang$core$Json_Encode$bool = _elm_lang$core$Native_Json.identity;
var _elm_lang$core$Json_Encode$float = _elm_lang$core$Native_Json.identity;
var _elm_lang$core$Json_Encode$int = _elm_lang$core$Native_Json.identity;
var _elm_lang$core$Json_Encode$string = _elm_lang$core$Native_Json.identity;
var _elm_lang$core$Json_Encode$encode = _elm_lang$core$Native_Json.encode;
var _elm_lang$core$Json_Encode$Value = {ctor: 'Value'};

var _elm_lang$core$Json_Decode$null = _elm_lang$core$Native_Json.decodeNull;
var _elm_lang$core$Json_Decode$value = _elm_lang$core$Native_Json.decodePrimitive('value');
var _elm_lang$core$Json_Decode$andThen = _elm_lang$core$Native_Json.andThen;
var _elm_lang$core$Json_Decode$fail = _elm_lang$core$Native_Json.fail;
var _elm_lang$core$Json_Decode$succeed = _elm_lang$core$Native_Json.succeed;
var _elm_lang$core$Json_Decode$lazy = function (thunk) {
	return A2(
		_elm_lang$core$Json_Decode$andThen,
		thunk,
		_elm_lang$core$Json_Decode$succeed(
			{ctor: '_Tuple0'}));
};
var _elm_lang$core$Json_Decode$decodeValue = _elm_lang$core$Native_Json.run;
var _elm_lang$core$Json_Decode$decodeString = _elm_lang$core$Native_Json.runOnString;
var _elm_lang$core$Json_Decode$map8 = _elm_lang$core$Native_Json.map8;
var _elm_lang$core$Json_Decode$map7 = _elm_lang$core$Native_Json.map7;
var _elm_lang$core$Json_Decode$map6 = _elm_lang$core$Native_Json.map6;
var _elm_lang$core$Json_Decode$map5 = _elm_lang$core$Native_Json.map5;
var _elm_lang$core$Json_Decode$map4 = _elm_lang$core$Native_Json.map4;
var _elm_lang$core$Json_Decode$map3 = _elm_lang$core$Native_Json.map3;
var _elm_lang$core$Json_Decode$map2 = _elm_lang$core$Native_Json.map2;
var _elm_lang$core$Json_Decode$map = _elm_lang$core$Native_Json.map1;
var _elm_lang$core$Json_Decode$oneOf = _elm_lang$core$Native_Json.oneOf;
var _elm_lang$core$Json_Decode$maybe = function (decoder) {
	return A2(_elm_lang$core$Native_Json.decodeContainer, 'maybe', decoder);
};
var _elm_lang$core$Json_Decode$index = _elm_lang$core$Native_Json.decodeIndex;
var _elm_lang$core$Json_Decode$field = _elm_lang$core$Native_Json.decodeField;
var _elm_lang$core$Json_Decode$at = F2(
	function (fields, decoder) {
		return A3(_elm_lang$core$List$foldr, _elm_lang$core$Json_Decode$field, decoder, fields);
	});
var _elm_lang$core$Json_Decode$keyValuePairs = _elm_lang$core$Native_Json.decodeKeyValuePairs;
var _elm_lang$core$Json_Decode$dict = function (decoder) {
	return A2(
		_elm_lang$core$Json_Decode$map,
		_elm_lang$core$Dict$fromList,
		_elm_lang$core$Json_Decode$keyValuePairs(decoder));
};
var _elm_lang$core$Json_Decode$array = function (decoder) {
	return A2(_elm_lang$core$Native_Json.decodeContainer, 'array', decoder);
};
var _elm_lang$core$Json_Decode$list = function (decoder) {
	return A2(_elm_lang$core$Native_Json.decodeContainer, 'list', decoder);
};
var _elm_lang$core$Json_Decode$nullable = function (decoder) {
	return _elm_lang$core$Json_Decode$oneOf(
		{
			ctor: '::',
			_0: _elm_lang$core$Json_Decode$null(_elm_lang$core$Maybe$Nothing),
			_1: {
				ctor: '::',
				_0: A2(_elm_lang$core$Json_Decode$map, _elm_lang$core$Maybe$Just, decoder),
				_1: {ctor: '[]'}
			}
		});
};
var _elm_lang$core$Json_Decode$float = _elm_lang$core$Native_Json.decodePrimitive('float');
var _elm_lang$core$Json_Decode$int = _elm_lang$core$Native_Json.decodePrimitive('int');
var _elm_lang$core$Json_Decode$bool = _elm_lang$core$Native_Json.decodePrimitive('bool');
var _elm_lang$core$Json_Decode$string = _elm_lang$core$Native_Json.decodePrimitive('string');
var _elm_lang$core$Json_Decode$Decoder = {ctor: 'Decoder'};

var _elm_lang$virtual_dom$VirtualDom_Debug$wrap;
var _elm_lang$virtual_dom$VirtualDom_Debug$wrapWithFlags;

var _elm_lang$virtual_dom$Native_VirtualDom = function() {

var STYLE_KEY = 'STYLE';
var EVENT_KEY = 'EVENT';
var ATTR_KEY = 'ATTR';
var ATTR_NS_KEY = 'ATTR_NS';

var localDoc = typeof document !== 'undefined' ? document : {};


////////////  VIRTUAL DOM NODES  ////////////


function text(string)
{
	return {
		type: 'text',
		text: string
	};
}


function node(tag)
{
	return F2(function(factList, kidList) {
		return nodeHelp(tag, factList, kidList);
	});
}


function nodeHelp(tag, factList, kidList)
{
	var organized = organizeFacts(factList);
	var namespace = organized.namespace;
	var facts = organized.facts;

	var children = [];
	var descendantsCount = 0;
	while (kidList.ctor !== '[]')
	{
		var kid = kidList._0;
		descendantsCount += (kid.descendantsCount || 0);
		children.push(kid);
		kidList = kidList._1;
	}
	descendantsCount += children.length;

	return {
		type: 'node',
		tag: tag,
		facts: facts,
		children: children,
		namespace: namespace,
		descendantsCount: descendantsCount
	};
}


function keyedNode(tag, factList, kidList)
{
	var organized = organizeFacts(factList);
	var namespace = organized.namespace;
	var facts = organized.facts;

	var children = [];
	var descendantsCount = 0;
	while (kidList.ctor !== '[]')
	{
		var kid = kidList._0;
		descendantsCount += (kid._1.descendantsCount || 0);
		children.push(kid);
		kidList = kidList._1;
	}
	descendantsCount += children.length;

	return {
		type: 'keyed-node',
		tag: tag,
		facts: facts,
		children: children,
		namespace: namespace,
		descendantsCount: descendantsCount
	};
}


function custom(factList, model, impl)
{
	var facts = organizeFacts(factList).facts;

	return {
		type: 'custom',
		facts: facts,
		model: model,
		impl: impl
	};
}


function map(tagger, node)
{
	return {
		type: 'tagger',
		tagger: tagger,
		node: node,
		descendantsCount: 1 + (node.descendantsCount || 0)
	};
}


function thunk(func, args, thunk)
{
	return {
		type: 'thunk',
		func: func,
		args: args,
		thunk: thunk,
		node: undefined
	};
}

function lazy(fn, a)
{
	return thunk(fn, [a], function() {
		return fn(a);
	});
}

function lazy2(fn, a, b)
{
	return thunk(fn, [a,b], function() {
		return A2(fn, a, b);
	});
}

function lazy3(fn, a, b, c)
{
	return thunk(fn, [a,b,c], function() {
		return A3(fn, a, b, c);
	});
}



// FACTS


function organizeFacts(factList)
{
	var namespace, facts = {};

	while (factList.ctor !== '[]')
	{
		var entry = factList._0;
		var key = entry.key;

		if (key === ATTR_KEY || key === ATTR_NS_KEY || key === EVENT_KEY)
		{
			var subFacts = facts[key] || {};
			subFacts[entry.realKey] = entry.value;
			facts[key] = subFacts;
		}
		else if (key === STYLE_KEY)
		{
			var styles = facts[key] || {};
			var styleList = entry.value;
			while (styleList.ctor !== '[]')
			{
				var style = styleList._0;
				styles[style._0] = style._1;
				styleList = styleList._1;
			}
			facts[key] = styles;
		}
		else if (key === 'namespace')
		{
			namespace = entry.value;
		}
		else if (key === 'className')
		{
			var classes = facts[key];
			facts[key] = typeof classes === 'undefined'
				? entry.value
				: classes + ' ' + entry.value;
		}
 		else
		{
			facts[key] = entry.value;
		}
		factList = factList._1;
	}

	return {
		facts: facts,
		namespace: namespace
	};
}



////////////  PROPERTIES AND ATTRIBUTES  ////////////


function style(value)
{
	return {
		key: STYLE_KEY,
		value: value
	};
}


function property(key, value)
{
	return {
		key: key,
		value: value
	};
}


function attribute(key, value)
{
	return {
		key: ATTR_KEY,
		realKey: key,
		value: value
	};
}


function attributeNS(namespace, key, value)
{
	return {
		key: ATTR_NS_KEY,
		realKey: key,
		value: {
			value: value,
			namespace: namespace
		}
	};
}


function on(name, options, decoder)
{
	return {
		key: EVENT_KEY,
		realKey: name,
		value: {
			options: options,
			decoder: decoder
		}
	};
}


function equalEvents(a, b)
{
	if (a.options !== b.options)
	{
		if (a.options.stopPropagation !== b.options.stopPropagation || a.options.preventDefault !== b.options.preventDefault)
		{
			return false;
		}
	}
	return _elm_lang$core$Native_Json.equality(a.decoder, b.decoder);
}


function mapProperty(func, property)
{
	if (property.key !== EVENT_KEY)
	{
		return property;
	}
	return on(
		property.realKey,
		property.value.options,
		A2(_elm_lang$core$Json_Decode$map, func, property.value.decoder)
	);
}


////////////  RENDER  ////////////


function render(vNode, eventNode)
{
	switch (vNode.type)
	{
		case 'thunk':
			if (!vNode.node)
			{
				vNode.node = vNode.thunk();
			}
			return render(vNode.node, eventNode);

		case 'tagger':
			var subNode = vNode.node;
			var tagger = vNode.tagger;

			while (subNode.type === 'tagger')
			{
				typeof tagger !== 'object'
					? tagger = [tagger, subNode.tagger]
					: tagger.push(subNode.tagger);

				subNode = subNode.node;
			}

			var subEventRoot = { tagger: tagger, parent: eventNode };
			var domNode = render(subNode, subEventRoot);
			domNode.elm_event_node_ref = subEventRoot;
			return domNode;

		case 'text':
			return localDoc.createTextNode(vNode.text);

		case 'node':
			var domNode = vNode.namespace
				? localDoc.createElementNS(vNode.namespace, vNode.tag)
				: localDoc.createElement(vNode.tag);

			applyFacts(domNode, eventNode, vNode.facts);

			var children = vNode.children;

			for (var i = 0; i < children.length; i++)
			{
				domNode.appendChild(render(children[i], eventNode));
			}

			return domNode;

		case 'keyed-node':
			var domNode = vNode.namespace
				? localDoc.createElementNS(vNode.namespace, vNode.tag)
				: localDoc.createElement(vNode.tag);

			applyFacts(domNode, eventNode, vNode.facts);

			var children = vNode.children;

			for (var i = 0; i < children.length; i++)
			{
				domNode.appendChild(render(children[i]._1, eventNode));
			}

			return domNode;

		case 'custom':
			var domNode = vNode.impl.render(vNode.model);
			applyFacts(domNode, eventNode, vNode.facts);
			return domNode;
	}
}



////////////  APPLY FACTS  ////////////


function applyFacts(domNode, eventNode, facts)
{
	for (var key in facts)
	{
		var value = facts[key];

		switch (key)
		{
			case STYLE_KEY:
				applyStyles(domNode, value);
				break;

			case EVENT_KEY:
				applyEvents(domNode, eventNode, value);
				break;

			case ATTR_KEY:
				applyAttrs(domNode, value);
				break;

			case ATTR_NS_KEY:
				applyAttrsNS(domNode, value);
				break;

			case 'value':
				if (domNode[key] !== value)
				{
					domNode[key] = value;
				}
				break;

			default:
				domNode[key] = value;
				break;
		}
	}
}

function applyStyles(domNode, styles)
{
	var domNodeStyle = domNode.style;

	for (var key in styles)
	{
		domNodeStyle[key] = styles[key];
	}
}

function applyEvents(domNode, eventNode, events)
{
	var allHandlers = domNode.elm_handlers || {};

	for (var key in events)
	{
		var handler = allHandlers[key];
		var value = events[key];

		if (typeof value === 'undefined')
		{
			domNode.removeEventListener(key, handler);
			allHandlers[key] = undefined;
		}
		else if (typeof handler === 'undefined')
		{
			var handler = makeEventHandler(eventNode, value);
			domNode.addEventListener(key, handler);
			allHandlers[key] = handler;
		}
		else
		{
			handler.info = value;
		}
	}

	domNode.elm_handlers = allHandlers;
}

function makeEventHandler(eventNode, info)
{
	function eventHandler(event)
	{
		var info = eventHandler.info;

		var value = A2(_elm_lang$core$Native_Json.run, info.decoder, event);

		if (value.ctor === 'Ok')
		{
			var options = info.options;
			if (options.stopPropagation)
			{
				event.stopPropagation();
			}
			if (options.preventDefault)
			{
				event.preventDefault();
			}

			var message = value._0;

			var currentEventNode = eventNode;
			while (currentEventNode)
			{
				var tagger = currentEventNode.tagger;
				if (typeof tagger === 'function')
				{
					message = tagger(message);
				}
				else
				{
					for (var i = tagger.length; i--; )
					{
						message = tagger[i](message);
					}
				}
				currentEventNode = currentEventNode.parent;
			}
		}
	};

	eventHandler.info = info;

	return eventHandler;
}

function applyAttrs(domNode, attrs)
{
	for (var key in attrs)
	{
		var value = attrs[key];
		if (typeof value === 'undefined')
		{
			domNode.removeAttribute(key);
		}
		else
		{
			domNode.setAttribute(key, value);
		}
	}
}

function applyAttrsNS(domNode, nsAttrs)
{
	for (var key in nsAttrs)
	{
		var pair = nsAttrs[key];
		var namespace = pair.namespace;
		var value = pair.value;

		if (typeof value === 'undefined')
		{
			domNode.removeAttributeNS(namespace, key);
		}
		else
		{
			domNode.setAttributeNS(namespace, key, value);
		}
	}
}



////////////  DIFF  ////////////


function diff(a, b)
{
	var patches = [];
	diffHelp(a, b, patches, 0);
	return patches;
}


function makePatch(type, index, data)
{
	return {
		index: index,
		type: type,
		data: data,
		domNode: undefined,
		eventNode: undefined
	};
}


function diffHelp(a, b, patches, index)
{
	if (a === b)
	{
		return;
	}

	var aType = a.type;
	var bType = b.type;

	// Bail if you run into different types of nodes. Implies that the
	// structure has changed significantly and it's not worth a diff.
	if (aType !== bType)
	{
		patches.push(makePatch('p-redraw', index, b));
		return;
	}

	// Now we know that both nodes are the same type.
	switch (bType)
	{
		case 'thunk':
			var aArgs = a.args;
			var bArgs = b.args;
			var i = aArgs.length;
			var same = a.func === b.func && i === bArgs.length;
			while (same && i--)
			{
				same = aArgs[i] === bArgs[i];
			}
			if (same)
			{
				b.node = a.node;
				return;
			}
			b.node = b.thunk();
			var subPatches = [];
			diffHelp(a.node, b.node, subPatches, 0);
			if (subPatches.length > 0)
			{
				patches.push(makePatch('p-thunk', index, subPatches));
			}
			return;

		case 'tagger':
			// gather nested taggers
			var aTaggers = a.tagger;
			var bTaggers = b.tagger;
			var nesting = false;

			var aSubNode = a.node;
			while (aSubNode.type === 'tagger')
			{
				nesting = true;

				typeof aTaggers !== 'object'
					? aTaggers = [aTaggers, aSubNode.tagger]
					: aTaggers.push(aSubNode.tagger);

				aSubNode = aSubNode.node;
			}

			var bSubNode = b.node;
			while (bSubNode.type === 'tagger')
			{
				nesting = true;

				typeof bTaggers !== 'object'
					? bTaggers = [bTaggers, bSubNode.tagger]
					: bTaggers.push(bSubNode.tagger);

				bSubNode = bSubNode.node;
			}

			// Just bail if different numbers of taggers. This implies the
			// structure of the virtual DOM has changed.
			if (nesting && aTaggers.length !== bTaggers.length)
			{
				patches.push(makePatch('p-redraw', index, b));
				return;
			}

			// check if taggers are "the same"
			if (nesting ? !pairwiseRefEqual(aTaggers, bTaggers) : aTaggers !== bTaggers)
			{
				patches.push(makePatch('p-tagger', index, bTaggers));
			}

			// diff everything below the taggers
			diffHelp(aSubNode, bSubNode, patches, index + 1);
			return;

		case 'text':
			if (a.text !== b.text)
			{
				patches.push(makePatch('p-text', index, b.text));
				return;
			}

			return;

		case 'node':
			// Bail if obvious indicators have changed. Implies more serious
			// structural changes such that it's not worth it to diff.
			if (a.tag !== b.tag || a.namespace !== b.namespace)
			{
				patches.push(makePatch('p-redraw', index, b));
				return;
			}

			var factsDiff = diffFacts(a.facts, b.facts);

			if (typeof factsDiff !== 'undefined')
			{
				patches.push(makePatch('p-facts', index, factsDiff));
			}

			diffChildren(a, b, patches, index);
			return;

		case 'keyed-node':
			// Bail if obvious indicators have changed. Implies more serious
			// structural changes such that it's not worth it to diff.
			if (a.tag !== b.tag || a.namespace !== b.namespace)
			{
				patches.push(makePatch('p-redraw', index, b));
				return;
			}

			var factsDiff = diffFacts(a.facts, b.facts);

			if (typeof factsDiff !== 'undefined')
			{
				patches.push(makePatch('p-facts', index, factsDiff));
			}

			diffKeyedChildren(a, b, patches, index);
			return;

		case 'custom':
			if (a.impl !== b.impl)
			{
				patches.push(makePatch('p-redraw', index, b));
				return;
			}

			var factsDiff = diffFacts(a.facts, b.facts);
			if (typeof factsDiff !== 'undefined')
			{
				patches.push(makePatch('p-facts', index, factsDiff));
			}

			var patch = b.impl.diff(a,b);
			if (patch)
			{
				patches.push(makePatch('p-custom', index, patch));
				return;
			}

			return;
	}
}


// assumes the incoming arrays are the same length
function pairwiseRefEqual(as, bs)
{
	for (var i = 0; i < as.length; i++)
	{
		if (as[i] !== bs[i])
		{
			return false;
		}
	}

	return true;
}


// TODO Instead of creating a new diff object, it's possible to just test if
// there *is* a diff. During the actual patch, do the diff again and make the
// modifications directly. This way, there's no new allocations. Worth it?
function diffFacts(a, b, category)
{
	var diff;

	// look for changes and removals
	for (var aKey in a)
	{
		if (aKey === STYLE_KEY || aKey === EVENT_KEY || aKey === ATTR_KEY || aKey === ATTR_NS_KEY)
		{
			var subDiff = diffFacts(a[aKey], b[aKey] || {}, aKey);
			if (subDiff)
			{
				diff = diff || {};
				diff[aKey] = subDiff;
			}
			continue;
		}

		// remove if not in the new facts
		if (!(aKey in b))
		{
			diff = diff || {};
			diff[aKey] =
				(typeof category === 'undefined')
					? (typeof a[aKey] === 'string' ? '' : null)
					:
				(category === STYLE_KEY)
					? ''
					:
				(category === EVENT_KEY || category === ATTR_KEY)
					? undefined
					:
				{ namespace: a[aKey].namespace, value: undefined };

			continue;
		}

		var aValue = a[aKey];
		var bValue = b[aKey];

		// reference equal, so don't worry about it
		if (aValue === bValue && aKey !== 'value'
			|| category === EVENT_KEY && equalEvents(aValue, bValue))
		{
			continue;
		}

		diff = diff || {};
		diff[aKey] = bValue;
	}

	// add new stuff
	for (var bKey in b)
	{
		if (!(bKey in a))
		{
			diff = diff || {};
			diff[bKey] = b[bKey];
		}
	}

	return diff;
}


function diffChildren(aParent, bParent, patches, rootIndex)
{
	var aChildren = aParent.children;
	var bChildren = bParent.children;

	var aLen = aChildren.length;
	var bLen = bChildren.length;

	// FIGURE OUT IF THERE ARE INSERTS OR REMOVALS

	if (aLen > bLen)
	{
		patches.push(makePatch('p-remove-last', rootIndex, aLen - bLen));
	}
	else if (aLen < bLen)
	{
		patches.push(makePatch('p-append', rootIndex, bChildren.slice(aLen)));
	}

	// PAIRWISE DIFF EVERYTHING ELSE

	var index = rootIndex;
	var minLen = aLen < bLen ? aLen : bLen;
	for (var i = 0; i < minLen; i++)
	{
		index++;
		var aChild = aChildren[i];
		diffHelp(aChild, bChildren[i], patches, index);
		index += aChild.descendantsCount || 0;
	}
}



////////////  KEYED DIFF  ////////////


function diffKeyedChildren(aParent, bParent, patches, rootIndex)
{
	var localPatches = [];

	var changes = {}; // Dict String Entry
	var inserts = []; // Array { index : Int, entry : Entry }
	// type Entry = { tag : String, vnode : VNode, index : Int, data : _ }

	var aChildren = aParent.children;
	var bChildren = bParent.children;
	var aLen = aChildren.length;
	var bLen = bChildren.length;
	var aIndex = 0;
	var bIndex = 0;

	var index = rootIndex;

	while (aIndex < aLen && bIndex < bLen)
	{
		var a = aChildren[aIndex];
		var b = bChildren[bIndex];

		var aKey = a._0;
		var bKey = b._0;
		var aNode = a._1;
		var bNode = b._1;

		// check if keys match

		if (aKey === bKey)
		{
			index++;
			diffHelp(aNode, bNode, localPatches, index);
			index += aNode.descendantsCount || 0;

			aIndex++;
			bIndex++;
			continue;
		}

		// look ahead 1 to detect insertions and removals.

		var aLookAhead = aIndex + 1 < aLen;
		var bLookAhead = bIndex + 1 < bLen;

		if (aLookAhead)
		{
			var aNext = aChildren[aIndex + 1];
			var aNextKey = aNext._0;
			var aNextNode = aNext._1;
			var oldMatch = bKey === aNextKey;
		}

		if (bLookAhead)
		{
			var bNext = bChildren[bIndex + 1];
			var bNextKey = bNext._0;
			var bNextNode = bNext._1;
			var newMatch = aKey === bNextKey;
		}


		// swap a and b
		if (aLookAhead && bLookAhead && newMatch && oldMatch)
		{
			index++;
			diffHelp(aNode, bNextNode, localPatches, index);
			insertNode(changes, localPatches, aKey, bNode, bIndex, inserts);
			index += aNode.descendantsCount || 0;

			index++;
			removeNode(changes, localPatches, aKey, aNextNode, index);
			index += aNextNode.descendantsCount || 0;

			aIndex += 2;
			bIndex += 2;
			continue;
		}

		// insert b
		if (bLookAhead && newMatch)
		{
			index++;
			insertNode(changes, localPatches, bKey, bNode, bIndex, inserts);
			diffHelp(aNode, bNextNode, localPatches, index);
			index += aNode.descendantsCount || 0;

			aIndex += 1;
			bIndex += 2;
			continue;
		}

		// remove a
		if (aLookAhead && oldMatch)
		{
			index++;
			removeNode(changes, localPatches, aKey, aNode, index);
			index += aNode.descendantsCount || 0;

			index++;
			diffHelp(aNextNode, bNode, localPatches, index);
			index += aNextNode.descendantsCount || 0;

			aIndex += 2;
			bIndex += 1;
			continue;
		}

		// remove a, insert b
		if (aLookAhead && bLookAhead && aNextKey === bNextKey)
		{
			index++;
			removeNode(changes, localPatches, aKey, aNode, index);
			insertNode(changes, localPatches, bKey, bNode, bIndex, inserts);
			index += aNode.descendantsCount || 0;

			index++;
			diffHelp(aNextNode, bNextNode, localPatches, index);
			index += aNextNode.descendantsCount || 0;

			aIndex += 2;
			bIndex += 2;
			continue;
		}

		break;
	}

	// eat up any remaining nodes with removeNode and insertNode

	while (aIndex < aLen)
	{
		index++;
		var a = aChildren[aIndex];
		var aNode = a._1;
		removeNode(changes, localPatches, a._0, aNode, index);
		index += aNode.descendantsCount || 0;
		aIndex++;
	}

	var endInserts;
	while (bIndex < bLen)
	{
		endInserts = endInserts || [];
		var b = bChildren[bIndex];
		insertNode(changes, localPatches, b._0, b._1, undefined, endInserts);
		bIndex++;
	}

	if (localPatches.length > 0 || inserts.length > 0 || typeof endInserts !== 'undefined')
	{
		patches.push(makePatch('p-reorder', rootIndex, {
			patches: localPatches,
			inserts: inserts,
			endInserts: endInserts
		}));
	}
}



////////////  CHANGES FROM KEYED DIFF  ////////////


var POSTFIX = '_elmW6BL';


function insertNode(changes, localPatches, key, vnode, bIndex, inserts)
{
	var entry = changes[key];

	// never seen this key before
	if (typeof entry === 'undefined')
	{
		entry = {
			tag: 'insert',
			vnode: vnode,
			index: bIndex,
			data: undefined
		};

		inserts.push({ index: bIndex, entry: entry });
		changes[key] = entry;

		return;
	}

	// this key was removed earlier, a match!
	if (entry.tag === 'remove')
	{
		inserts.push({ index: bIndex, entry: entry });

		entry.tag = 'move';
		var subPatches = [];
		diffHelp(entry.vnode, vnode, subPatches, entry.index);
		entry.index = bIndex;
		entry.data.data = {
			patches: subPatches,
			entry: entry
		};

		return;
	}

	// this key has already been inserted or moved, a duplicate!
	insertNode(changes, localPatches, key + POSTFIX, vnode, bIndex, inserts);
}


function removeNode(changes, localPatches, key, vnode, index)
{
	var entry = changes[key];

	// never seen this key before
	if (typeof entry === 'undefined')
	{
		var patch = makePatch('p-remove', index, undefined);
		localPatches.push(patch);

		changes[key] = {
			tag: 'remove',
			vnode: vnode,
			index: index,
			data: patch
		};

		return;
	}

	// this key was inserted earlier, a match!
	if (entry.tag === 'insert')
	{
		entry.tag = 'move';
		var subPatches = [];
		diffHelp(vnode, entry.vnode, subPatches, index);

		var patch = makePatch('p-remove', index, {
			patches: subPatches,
			entry: entry
		});
		localPatches.push(patch);

		return;
	}

	// this key has already been removed or moved, a duplicate!
	removeNode(changes, localPatches, key + POSTFIX, vnode, index);
}



////////////  ADD DOM NODES  ////////////
//
// Each DOM node has an "index" assigned in order of traversal. It is important
// to minimize our crawl over the actual DOM, so these indexes (along with the
// descendantsCount of virtual nodes) let us skip touching entire subtrees of
// the DOM if we know there are no patches there.


function addDomNodes(domNode, vNode, patches, eventNode)
{
	addDomNodesHelp(domNode, vNode, patches, 0, 0, vNode.descendantsCount, eventNode);
}


// assumes `patches` is non-empty and indexes increase monotonically.
function addDomNodesHelp(domNode, vNode, patches, i, low, high, eventNode)
{
	var patch = patches[i];
	var index = patch.index;

	while (index === low)
	{
		var patchType = patch.type;

		if (patchType === 'p-thunk')
		{
			addDomNodes(domNode, vNode.node, patch.data, eventNode);
		}
		else if (patchType === 'p-reorder')
		{
			patch.domNode = domNode;
			patch.eventNode = eventNode;

			var subPatches = patch.data.patches;
			if (subPatches.length > 0)
			{
				addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);
			}
		}
		else if (patchType === 'p-remove')
		{
			patch.domNode = domNode;
			patch.eventNode = eventNode;

			var data = patch.data;
			if (typeof data !== 'undefined')
			{
				data.entry.data = domNode;
				var subPatches = data.patches;
				if (subPatches.length > 0)
				{
					addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);
				}
			}
		}
		else
		{
			patch.domNode = domNode;
			patch.eventNode = eventNode;
		}

		i++;

		if (!(patch = patches[i]) || (index = patch.index) > high)
		{
			return i;
		}
	}

	switch (vNode.type)
	{
		case 'tagger':
			var subNode = vNode.node;

			while (subNode.type === "tagger")
			{
				subNode = subNode.node;
			}

			return addDomNodesHelp(domNode, subNode, patches, i, low + 1, high, domNode.elm_event_node_ref);

		case 'node':
			var vChildren = vNode.children;
			var childNodes = domNode.childNodes;
			for (var j = 0; j < vChildren.length; j++)
			{
				low++;
				var vChild = vChildren[j];
				var nextLow = low + (vChild.descendantsCount || 0);
				if (low <= index && index <= nextLow)
				{
					i = addDomNodesHelp(childNodes[j], vChild, patches, i, low, nextLow, eventNode);
					if (!(patch = patches[i]) || (index = patch.index) > high)
					{
						return i;
					}
				}
				low = nextLow;
			}
			return i;

		case 'keyed-node':
			var vChildren = vNode.children;
			var childNodes = domNode.childNodes;
			for (var j = 0; j < vChildren.length; j++)
			{
				low++;
				var vChild = vChildren[j]._1;
				var nextLow = low + (vChild.descendantsCount || 0);
				if (low <= index && index <= nextLow)
				{
					i = addDomNodesHelp(childNodes[j], vChild, patches, i, low, nextLow, eventNode);
					if (!(patch = patches[i]) || (index = patch.index) > high)
					{
						return i;
					}
				}
				low = nextLow;
			}
			return i;

		case 'text':
		case 'thunk':
			throw new Error('should never traverse `text` or `thunk` nodes like this');
	}
}



////////////  APPLY PATCHES  ////////////


function applyPatches(rootDomNode, oldVirtualNode, patches, eventNode)
{
	if (patches.length === 0)
	{
		return rootDomNode;
	}

	addDomNodes(rootDomNode, oldVirtualNode, patches, eventNode);
	return applyPatchesHelp(rootDomNode, patches);
}

function applyPatchesHelp(rootDomNode, patches)
{
	for (var i = 0; i < patches.length; i++)
	{
		var patch = patches[i];
		var localDomNode = patch.domNode
		var newNode = applyPatch(localDomNode, patch);
		if (localDomNode === rootDomNode)
		{
			rootDomNode = newNode;
		}
	}
	return rootDomNode;
}

function applyPatch(domNode, patch)
{
	switch (patch.type)
	{
		case 'p-redraw':
			return applyPatchRedraw(domNode, patch.data, patch.eventNode);

		case 'p-facts':
			applyFacts(domNode, patch.eventNode, patch.data);
			return domNode;

		case 'p-text':
			domNode.replaceData(0, domNode.length, patch.data);
			return domNode;

		case 'p-thunk':
			return applyPatchesHelp(domNode, patch.data);

		case 'p-tagger':
			if (typeof domNode.elm_event_node_ref !== 'undefined')
			{
				domNode.elm_event_node_ref.tagger = patch.data;
			}
			else
			{
				domNode.elm_event_node_ref = { tagger: patch.data, parent: patch.eventNode };
			}
			return domNode;

		case 'p-remove-last':
			var i = patch.data;
			while (i--)
			{
				domNode.removeChild(domNode.lastChild);
			}
			return domNode;

		case 'p-append':
			var newNodes = patch.data;
			for (var i = 0; i < newNodes.length; i++)
			{
				domNode.appendChild(render(newNodes[i], patch.eventNode));
			}
			return domNode;

		case 'p-remove':
			var data = patch.data;
			if (typeof data === 'undefined')
			{
				domNode.parentNode.removeChild(domNode);
				return domNode;
			}
			var entry = data.entry;
			if (typeof entry.index !== 'undefined')
			{
				domNode.parentNode.removeChild(domNode);
			}
			entry.data = applyPatchesHelp(domNode, data.patches);
			return domNode;

		case 'p-reorder':
			return applyPatchReorder(domNode, patch);

		case 'p-custom':
			var impl = patch.data;
			return impl.applyPatch(domNode, impl.data);

		default:
			throw new Error('Ran into an unknown patch!');
	}
}


function applyPatchRedraw(domNode, vNode, eventNode)
{
	var parentNode = domNode.parentNode;
	var newNode = render(vNode, eventNode);

	if (typeof newNode.elm_event_node_ref === 'undefined')
	{
		newNode.elm_event_node_ref = domNode.elm_event_node_ref;
	}

	if (parentNode && newNode !== domNode)
	{
		parentNode.replaceChild(newNode, domNode);
	}
	return newNode;
}


function applyPatchReorder(domNode, patch)
{
	var data = patch.data;

	// remove end inserts
	var frag = applyPatchReorderEndInsertsHelp(data.endInserts, patch);

	// removals
	domNode = applyPatchesHelp(domNode, data.patches);

	// inserts
	var inserts = data.inserts;
	for (var i = 0; i < inserts.length; i++)
	{
		var insert = inserts[i];
		var entry = insert.entry;
		var node = entry.tag === 'move'
			? entry.data
			: render(entry.vnode, patch.eventNode);
		domNode.insertBefore(node, domNode.childNodes[insert.index]);
	}

	// add end inserts
	if (typeof frag !== 'undefined')
	{
		domNode.appendChild(frag);
	}

	return domNode;
}


function applyPatchReorderEndInsertsHelp(endInserts, patch)
{
	if (typeof endInserts === 'undefined')
	{
		return;
	}

	var frag = localDoc.createDocumentFragment();
	for (var i = 0; i < endInserts.length; i++)
	{
		var insert = endInserts[i];
		var entry = insert.entry;
		frag.appendChild(entry.tag === 'move'
			? entry.data
			: render(entry.vnode, patch.eventNode)
		);
	}
	return frag;
}


// PROGRAMS

var program = makeProgram(checkNoFlags);
var programWithFlags = makeProgram(checkYesFlags);

function makeProgram(flagChecker)
{
	return F2(function(debugWrap, impl)
	{
		return function(flagDecoder)
		{
			return function(object, moduleName, debugMetadata)
			{
				var checker = flagChecker(flagDecoder, moduleName);
				if (typeof debugMetadata === 'undefined')
				{
					normalSetup(impl, object, moduleName, checker);
				}
				else
				{
					debugSetup(A2(debugWrap, debugMetadata, impl), object, moduleName, checker);
				}
			};
		};
	});
}

function staticProgram(vNode)
{
	var nothing = _elm_lang$core$Native_Utils.Tuple2(
		_elm_lang$core$Native_Utils.Tuple0,
		_elm_lang$core$Platform_Cmd$none
	);
	return A2(program, _elm_lang$virtual_dom$VirtualDom_Debug$wrap, {
		init: nothing,
		view: function() { return vNode; },
		update: F2(function() { return nothing; }),
		subscriptions: function() { return _elm_lang$core$Platform_Sub$none; }
	})();
}


// FLAG CHECKERS

function checkNoFlags(flagDecoder, moduleName)
{
	return function(init, flags, domNode)
	{
		if (typeof flags === 'undefined')
		{
			return init;
		}

		var errorMessage =
			'The `' + moduleName + '` module does not need flags.\n'
			+ 'Initialize it with no arguments and you should be all set!';

		crash(errorMessage, domNode);
	};
}

function checkYesFlags(flagDecoder, moduleName)
{
	return function(init, flags, domNode)
	{
		if (typeof flagDecoder === 'undefined')
		{
			var errorMessage =
				'Are you trying to sneak a Never value into Elm? Trickster!\n'
				+ 'It looks like ' + moduleName + '.main is defined with `programWithFlags` but has type `Program Never`.\n'
				+ 'Use `program` instead if you do not want flags.'

			crash(errorMessage, domNode);
		}

		var result = A2(_elm_lang$core$Native_Json.run, flagDecoder, flags);
		if (result.ctor === 'Ok')
		{
			return init(result._0);
		}

		var errorMessage =
			'Trying to initialize the `' + moduleName + '` module with an unexpected flag.\n'
			+ 'I tried to convert it to an Elm value, but ran into this problem:\n\n'
			+ result._0;

		crash(errorMessage, domNode);
	};
}

function crash(errorMessage, domNode)
{
	if (domNode)
	{
		domNode.innerHTML =
			'<div style="padding-left:1em;">'
			+ '<h2 style="font-weight:normal;"><b>Oops!</b> Something went wrong when starting your Elm program.</h2>'
			+ '<pre style="padding-left:1em;">' + errorMessage + '</pre>'
			+ '</div>';
	}

	throw new Error(errorMessage);
}


//  NORMAL SETUP

function normalSetup(impl, object, moduleName, flagChecker)
{
	object['embed'] = function embed(node, flags)
	{
		while (node.lastChild)
		{
			node.removeChild(node.lastChild);
		}

		return _elm_lang$core$Native_Platform.initialize(
			flagChecker(impl.init, flags, node),
			impl.update,
			impl.subscriptions,
			normalRenderer(node, impl.view)
		);
	};

	object['fullscreen'] = function fullscreen(flags)
	{
		return _elm_lang$core$Native_Platform.initialize(
			flagChecker(impl.init, flags, document.body),
			impl.update,
			impl.subscriptions,
			normalRenderer(document.body, impl.view)
		);
	};
}

function normalRenderer(parentNode, view)
{
	return function(tagger, initialModel)
	{
		var eventNode = { tagger: tagger, parent: undefined };
		var initialVirtualNode = view(initialModel);
		var domNode = render(initialVirtualNode, eventNode);
		parentNode.appendChild(domNode);
		return makeStepper(domNode, view, initialVirtualNode, eventNode);
	};
}


// STEPPER

var rAF =
	typeof requestAnimationFrame !== 'undefined'
		? requestAnimationFrame
		: function(callback) { setTimeout(callback, 1000 / 60); };

function makeStepper(domNode, view, initialVirtualNode, eventNode)
{
	var state = 'NO_REQUEST';
	var currNode = initialVirtualNode;
	var nextModel;

	function updateIfNeeded()
	{
		switch (state)
		{
			case 'NO_REQUEST':
				throw new Error(
					'Unexpected draw callback.\n' +
					'Please report this to <https://github.com/elm-lang/virtual-dom/issues>.'
				);

			case 'PENDING_REQUEST':
				rAF(updateIfNeeded);
				state = 'EXTRA_REQUEST';

				var nextNode = view(nextModel);
				var patches = diff(currNode, nextNode);
				domNode = applyPatches(domNode, currNode, patches, eventNode);
				currNode = nextNode;

				return;

			case 'EXTRA_REQUEST':
				state = 'NO_REQUEST';
				return;
		}
	}

	return function stepper(model)
	{
		if (state === 'NO_REQUEST')
		{
			rAF(updateIfNeeded);
		}
		state = 'PENDING_REQUEST';
		nextModel = model;
	};
}


// DEBUG SETUP

function debugSetup(impl, object, moduleName, flagChecker)
{
	object['fullscreen'] = function fullscreen(flags)
	{
		var popoutRef = { doc: undefined };
		return _elm_lang$core$Native_Platform.initialize(
			flagChecker(impl.init, flags, document.body),
			impl.update(scrollTask(popoutRef)),
			impl.subscriptions,
			debugRenderer(moduleName, document.body, popoutRef, impl.view, impl.viewIn, impl.viewOut)
		);
	};

	object['embed'] = function fullscreen(node, flags)
	{
		var popoutRef = { doc: undefined };
		return _elm_lang$core$Native_Platform.initialize(
			flagChecker(impl.init, flags, node),
			impl.update(scrollTask(popoutRef)),
			impl.subscriptions,
			debugRenderer(moduleName, node, popoutRef, impl.view, impl.viewIn, impl.viewOut)
		);
	};
}

function scrollTask(popoutRef)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		var doc = popoutRef.doc;
		if (doc)
		{
			var msgs = doc.getElementsByClassName('debugger-sidebar-messages')[0];
			if (msgs)
			{
				msgs.scrollTop = msgs.scrollHeight;
			}
		}
		callback(_elm_lang$core$Native_Scheduler.succeed(_elm_lang$core$Native_Utils.Tuple0));
	});
}


function debugRenderer(moduleName, parentNode, popoutRef, view, viewIn, viewOut)
{
	return function(tagger, initialModel)
	{
		var appEventNode = { tagger: tagger, parent: undefined };
		var eventNode = { tagger: tagger, parent: undefined };

		// make normal stepper
		var appVirtualNode = view(initialModel);
		var appNode = render(appVirtualNode, appEventNode);
		parentNode.appendChild(appNode);
		var appStepper = makeStepper(appNode, view, appVirtualNode, appEventNode);

		// make overlay stepper
		var overVirtualNode = viewIn(initialModel)._1;
		var overNode = render(overVirtualNode, eventNode);
		parentNode.appendChild(overNode);
		var wrappedViewIn = wrapViewIn(appEventNode, overNode, viewIn);
		var overStepper = makeStepper(overNode, wrappedViewIn, overVirtualNode, eventNode);

		// make debugger stepper
		var debugStepper = makeDebugStepper(initialModel, viewOut, eventNode, parentNode, moduleName, popoutRef);

		return function stepper(model)
		{
			appStepper(model);
			overStepper(model);
			debugStepper(model);
		}
	};
}

function makeDebugStepper(initialModel, view, eventNode, parentNode, moduleName, popoutRef)
{
	var curr;
	var domNode;

	return function stepper(model)
	{
		if (!model.isDebuggerOpen)
		{
			return;
		}

		if (!popoutRef.doc)
		{
			curr = view(model);
			domNode = openDebugWindow(moduleName, popoutRef, curr, eventNode);
			return;
		}

		// switch to document of popout
		localDoc = popoutRef.doc;

		var next = view(model);
		var patches = diff(curr, next);
		domNode = applyPatches(domNode, curr, patches, eventNode);
		curr = next;

		// switch back to normal document
		localDoc = document;
	};
}

function openDebugWindow(moduleName, popoutRef, virtualNode, eventNode)
{
	var w = 900;
	var h = 360;
	var x = screen.width - w;
	var y = screen.height - h;
	var debugWindow = window.open('', '', 'width=' + w + ',height=' + h + ',left=' + x + ',top=' + y);

	// switch to window document
	localDoc = debugWindow.document;

	popoutRef.doc = localDoc;
	localDoc.title = 'Debugger - ' + moduleName;
	localDoc.body.style.margin = '0';
	localDoc.body.style.padding = '0';
	var domNode = render(virtualNode, eventNode);
	localDoc.body.appendChild(domNode);

	localDoc.addEventListener('keydown', function(event) {
		if (event.metaKey && event.which === 82)
		{
			window.location.reload();
		}
		if (event.which === 38)
		{
			eventNode.tagger({ ctor: 'Up' });
			event.preventDefault();
		}
		if (event.which === 40)
		{
			eventNode.tagger({ ctor: 'Down' });
			event.preventDefault();
		}
	});

	function close()
	{
		popoutRef.doc = undefined;
		debugWindow.close();
	}
	window.addEventListener('unload', close);
	debugWindow.addEventListener('unload', function() {
		popoutRef.doc = undefined;
		window.removeEventListener('unload', close);
		eventNode.tagger({ ctor: 'Close' });
	});

	// switch back to the normal document
	localDoc = document;

	return domNode;
}


// BLOCK EVENTS

function wrapViewIn(appEventNode, overlayNode, viewIn)
{
	var ignorer = makeIgnorer(overlayNode);
	var blocking = 'Normal';
	var overflow;

	var normalTagger = appEventNode.tagger;
	var blockTagger = function() {};

	return function(model)
	{
		var tuple = viewIn(model);
		var newBlocking = tuple._0.ctor;
		appEventNode.tagger = newBlocking === 'Normal' ? normalTagger : blockTagger;
		if (blocking !== newBlocking)
		{
			traverse('removeEventListener', ignorer, blocking);
			traverse('addEventListener', ignorer, newBlocking);

			if (blocking === 'Normal')
			{
				overflow = document.body.style.overflow;
				document.body.style.overflow = 'hidden';
			}

			if (newBlocking === 'Normal')
			{
				document.body.style.overflow = overflow;
			}

			blocking = newBlocking;
		}
		return tuple._1;
	}
}

function traverse(verbEventListener, ignorer, blocking)
{
	switch(blocking)
	{
		case 'Normal':
			return;

		case 'Pause':
			return traverseHelp(verbEventListener, ignorer, mostEvents);

		case 'Message':
			return traverseHelp(verbEventListener, ignorer, allEvents);
	}
}

function traverseHelp(verbEventListener, handler, eventNames)
{
	for (var i = 0; i < eventNames.length; i++)
	{
		document.body[verbEventListener](eventNames[i], handler, true);
	}
}

function makeIgnorer(overlayNode)
{
	return function(event)
	{
		if (event.type === 'keydown' && event.metaKey && event.which === 82)
		{
			return;
		}

		var isScroll = event.type === 'scroll' || event.type === 'wheel';

		var node = event.target;
		while (node !== null)
		{
			if (node.className === 'elm-overlay-message-details' && isScroll)
			{
				return;
			}

			if (node === overlayNode && !isScroll)
			{
				return;
			}
			node = node.parentNode;
		}

		event.stopPropagation();
		event.preventDefault();
	}
}

var mostEvents = [
	'click', 'dblclick', 'mousemove',
	'mouseup', 'mousedown', 'mouseenter', 'mouseleave',
	'touchstart', 'touchend', 'touchcancel', 'touchmove',
	'pointerdown', 'pointerup', 'pointerover', 'pointerout',
	'pointerenter', 'pointerleave', 'pointermove', 'pointercancel',
	'dragstart', 'drag', 'dragend', 'dragenter', 'dragover', 'dragleave', 'drop',
	'keyup', 'keydown', 'keypress',
	'input', 'change',
	'focus', 'blur'
];

var allEvents = mostEvents.concat('wheel', 'scroll');


return {
	node: node,
	text: text,
	custom: custom,
	map: F2(map),

	on: F3(on),
	style: style,
	property: F2(property),
	attribute: F2(attribute),
	attributeNS: F3(attributeNS),
	mapProperty: F2(mapProperty),

	lazy: F2(lazy),
	lazy2: F3(lazy2),
	lazy3: F4(lazy3),
	keyedNode: F3(keyedNode),

	program: program,
	programWithFlags: programWithFlags,
	staticProgram: staticProgram
};

}();

var _elm_lang$virtual_dom$VirtualDom$programWithFlags = function (impl) {
	return A2(_elm_lang$virtual_dom$Native_VirtualDom.programWithFlags, _elm_lang$virtual_dom$VirtualDom_Debug$wrapWithFlags, impl);
};
var _elm_lang$virtual_dom$VirtualDom$program = function (impl) {
	return A2(_elm_lang$virtual_dom$Native_VirtualDom.program, _elm_lang$virtual_dom$VirtualDom_Debug$wrap, impl);
};
var _elm_lang$virtual_dom$VirtualDom$keyedNode = _elm_lang$virtual_dom$Native_VirtualDom.keyedNode;
var _elm_lang$virtual_dom$VirtualDom$lazy3 = _elm_lang$virtual_dom$Native_VirtualDom.lazy3;
var _elm_lang$virtual_dom$VirtualDom$lazy2 = _elm_lang$virtual_dom$Native_VirtualDom.lazy2;
var _elm_lang$virtual_dom$VirtualDom$lazy = _elm_lang$virtual_dom$Native_VirtualDom.lazy;
var _elm_lang$virtual_dom$VirtualDom$defaultOptions = {stopPropagation: false, preventDefault: false};
var _elm_lang$virtual_dom$VirtualDom$onWithOptions = _elm_lang$virtual_dom$Native_VirtualDom.on;
var _elm_lang$virtual_dom$VirtualDom$on = F2(
	function (eventName, decoder) {
		return A3(_elm_lang$virtual_dom$VirtualDom$onWithOptions, eventName, _elm_lang$virtual_dom$VirtualDom$defaultOptions, decoder);
	});
var _elm_lang$virtual_dom$VirtualDom$style = _elm_lang$virtual_dom$Native_VirtualDom.style;
var _elm_lang$virtual_dom$VirtualDom$mapProperty = _elm_lang$virtual_dom$Native_VirtualDom.mapProperty;
var _elm_lang$virtual_dom$VirtualDom$attributeNS = _elm_lang$virtual_dom$Native_VirtualDom.attributeNS;
var _elm_lang$virtual_dom$VirtualDom$attribute = _elm_lang$virtual_dom$Native_VirtualDom.attribute;
var _elm_lang$virtual_dom$VirtualDom$property = _elm_lang$virtual_dom$Native_VirtualDom.property;
var _elm_lang$virtual_dom$VirtualDom$map = _elm_lang$virtual_dom$Native_VirtualDom.map;
var _elm_lang$virtual_dom$VirtualDom$text = _elm_lang$virtual_dom$Native_VirtualDom.text;
var _elm_lang$virtual_dom$VirtualDom$node = _elm_lang$virtual_dom$Native_VirtualDom.node;
var _elm_lang$virtual_dom$VirtualDom$Options = F2(
	function (a, b) {
		return {stopPropagation: a, preventDefault: b};
	});
var _elm_lang$virtual_dom$VirtualDom$Node = {ctor: 'Node'};
var _elm_lang$virtual_dom$VirtualDom$Property = {ctor: 'Property'};

var _elm_lang$html$Html$programWithFlags = _elm_lang$virtual_dom$VirtualDom$programWithFlags;
var _elm_lang$html$Html$program = _elm_lang$virtual_dom$VirtualDom$program;
var _elm_lang$html$Html$beginnerProgram = function (_p0) {
	var _p1 = _p0;
	return _elm_lang$html$Html$program(
		{
			init: A2(
				_elm_lang$core$Platform_Cmd_ops['!'],
				_p1.model,
				{ctor: '[]'}),
			update: F2(
				function (msg, model) {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						A2(_p1.update, msg, model),
						{ctor: '[]'});
				}),
			view: _p1.view,
			subscriptions: function (_p2) {
				return _elm_lang$core$Platform_Sub$none;
			}
		});
};
var _elm_lang$html$Html$map = _elm_lang$virtual_dom$VirtualDom$map;
var _elm_lang$html$Html$text = _elm_lang$virtual_dom$VirtualDom$text;
var _elm_lang$html$Html$node = _elm_lang$virtual_dom$VirtualDom$node;
var _elm_lang$html$Html$body = _elm_lang$html$Html$node('body');
var _elm_lang$html$Html$section = _elm_lang$html$Html$node('section');
var _elm_lang$html$Html$nav = _elm_lang$html$Html$node('nav');
var _elm_lang$html$Html$article = _elm_lang$html$Html$node('article');
var _elm_lang$html$Html$aside = _elm_lang$html$Html$node('aside');
var _elm_lang$html$Html$h1 = _elm_lang$html$Html$node('h1');
var _elm_lang$html$Html$h2 = _elm_lang$html$Html$node('h2');
var _elm_lang$html$Html$h3 = _elm_lang$html$Html$node('h3');
var _elm_lang$html$Html$h4 = _elm_lang$html$Html$node('h4');
var _elm_lang$html$Html$h5 = _elm_lang$html$Html$node('h5');
var _elm_lang$html$Html$h6 = _elm_lang$html$Html$node('h6');
var _elm_lang$html$Html$header = _elm_lang$html$Html$node('header');
var _elm_lang$html$Html$footer = _elm_lang$html$Html$node('footer');
var _elm_lang$html$Html$address = _elm_lang$html$Html$node('address');
var _elm_lang$html$Html$main_ = _elm_lang$html$Html$node('main');
var _elm_lang$html$Html$p = _elm_lang$html$Html$node('p');
var _elm_lang$html$Html$hr = _elm_lang$html$Html$node('hr');
var _elm_lang$html$Html$pre = _elm_lang$html$Html$node('pre');
var _elm_lang$html$Html$blockquote = _elm_lang$html$Html$node('blockquote');
var _elm_lang$html$Html$ol = _elm_lang$html$Html$node('ol');
var _elm_lang$html$Html$ul = _elm_lang$html$Html$node('ul');
var _elm_lang$html$Html$li = _elm_lang$html$Html$node('li');
var _elm_lang$html$Html$dl = _elm_lang$html$Html$node('dl');
var _elm_lang$html$Html$dt = _elm_lang$html$Html$node('dt');
var _elm_lang$html$Html$dd = _elm_lang$html$Html$node('dd');
var _elm_lang$html$Html$figure = _elm_lang$html$Html$node('figure');
var _elm_lang$html$Html$figcaption = _elm_lang$html$Html$node('figcaption');
var _elm_lang$html$Html$div = _elm_lang$html$Html$node('div');
var _elm_lang$html$Html$a = _elm_lang$html$Html$node('a');
var _elm_lang$html$Html$em = _elm_lang$html$Html$node('em');
var _elm_lang$html$Html$strong = _elm_lang$html$Html$node('strong');
var _elm_lang$html$Html$small = _elm_lang$html$Html$node('small');
var _elm_lang$html$Html$s = _elm_lang$html$Html$node('s');
var _elm_lang$html$Html$cite = _elm_lang$html$Html$node('cite');
var _elm_lang$html$Html$q = _elm_lang$html$Html$node('q');
var _elm_lang$html$Html$dfn = _elm_lang$html$Html$node('dfn');
var _elm_lang$html$Html$abbr = _elm_lang$html$Html$node('abbr');
var _elm_lang$html$Html$time = _elm_lang$html$Html$node('time');
var _elm_lang$html$Html$code = _elm_lang$html$Html$node('code');
var _elm_lang$html$Html$var = _elm_lang$html$Html$node('var');
var _elm_lang$html$Html$samp = _elm_lang$html$Html$node('samp');
var _elm_lang$html$Html$kbd = _elm_lang$html$Html$node('kbd');
var _elm_lang$html$Html$sub = _elm_lang$html$Html$node('sub');
var _elm_lang$html$Html$sup = _elm_lang$html$Html$node('sup');
var _elm_lang$html$Html$i = _elm_lang$html$Html$node('i');
var _elm_lang$html$Html$b = _elm_lang$html$Html$node('b');
var _elm_lang$html$Html$u = _elm_lang$html$Html$node('u');
var _elm_lang$html$Html$mark = _elm_lang$html$Html$node('mark');
var _elm_lang$html$Html$ruby = _elm_lang$html$Html$node('ruby');
var _elm_lang$html$Html$rt = _elm_lang$html$Html$node('rt');
var _elm_lang$html$Html$rp = _elm_lang$html$Html$node('rp');
var _elm_lang$html$Html$bdi = _elm_lang$html$Html$node('bdi');
var _elm_lang$html$Html$bdo = _elm_lang$html$Html$node('bdo');
var _elm_lang$html$Html$span = _elm_lang$html$Html$node('span');
var _elm_lang$html$Html$br = _elm_lang$html$Html$node('br');
var _elm_lang$html$Html$wbr = _elm_lang$html$Html$node('wbr');
var _elm_lang$html$Html$ins = _elm_lang$html$Html$node('ins');
var _elm_lang$html$Html$del = _elm_lang$html$Html$node('del');
var _elm_lang$html$Html$img = _elm_lang$html$Html$node('img');
var _elm_lang$html$Html$iframe = _elm_lang$html$Html$node('iframe');
var _elm_lang$html$Html$embed = _elm_lang$html$Html$node('embed');
var _elm_lang$html$Html$object = _elm_lang$html$Html$node('object');
var _elm_lang$html$Html$param = _elm_lang$html$Html$node('param');
var _elm_lang$html$Html$video = _elm_lang$html$Html$node('video');
var _elm_lang$html$Html$audio = _elm_lang$html$Html$node('audio');
var _elm_lang$html$Html$source = _elm_lang$html$Html$node('source');
var _elm_lang$html$Html$track = _elm_lang$html$Html$node('track');
var _elm_lang$html$Html$canvas = _elm_lang$html$Html$node('canvas');
var _elm_lang$html$Html$math = _elm_lang$html$Html$node('math');
var _elm_lang$html$Html$table = _elm_lang$html$Html$node('table');
var _elm_lang$html$Html$caption = _elm_lang$html$Html$node('caption');
var _elm_lang$html$Html$colgroup = _elm_lang$html$Html$node('colgroup');
var _elm_lang$html$Html$col = _elm_lang$html$Html$node('col');
var _elm_lang$html$Html$tbody = _elm_lang$html$Html$node('tbody');
var _elm_lang$html$Html$thead = _elm_lang$html$Html$node('thead');
var _elm_lang$html$Html$tfoot = _elm_lang$html$Html$node('tfoot');
var _elm_lang$html$Html$tr = _elm_lang$html$Html$node('tr');
var _elm_lang$html$Html$td = _elm_lang$html$Html$node('td');
var _elm_lang$html$Html$th = _elm_lang$html$Html$node('th');
var _elm_lang$html$Html$form = _elm_lang$html$Html$node('form');
var _elm_lang$html$Html$fieldset = _elm_lang$html$Html$node('fieldset');
var _elm_lang$html$Html$legend = _elm_lang$html$Html$node('legend');
var _elm_lang$html$Html$label = _elm_lang$html$Html$node('label');
var _elm_lang$html$Html$input = _elm_lang$html$Html$node('input');
var _elm_lang$html$Html$button = _elm_lang$html$Html$node('button');
var _elm_lang$html$Html$select = _elm_lang$html$Html$node('select');
var _elm_lang$html$Html$datalist = _elm_lang$html$Html$node('datalist');
var _elm_lang$html$Html$optgroup = _elm_lang$html$Html$node('optgroup');
var _elm_lang$html$Html$option = _elm_lang$html$Html$node('option');
var _elm_lang$html$Html$textarea = _elm_lang$html$Html$node('textarea');
var _elm_lang$html$Html$keygen = _elm_lang$html$Html$node('keygen');
var _elm_lang$html$Html$output = _elm_lang$html$Html$node('output');
var _elm_lang$html$Html$progress = _elm_lang$html$Html$node('progress');
var _elm_lang$html$Html$meter = _elm_lang$html$Html$node('meter');
var _elm_lang$html$Html$details = _elm_lang$html$Html$node('details');
var _elm_lang$html$Html$summary = _elm_lang$html$Html$node('summary');
var _elm_lang$html$Html$menuitem = _elm_lang$html$Html$node('menuitem');
var _elm_lang$html$Html$menu = _elm_lang$html$Html$node('menu');

var _elm_lang$html$Html_Attributes$map = _elm_lang$virtual_dom$VirtualDom$mapProperty;
var _elm_lang$html$Html_Attributes$attribute = _elm_lang$virtual_dom$VirtualDom$attribute;
var _elm_lang$html$Html_Attributes$contextmenu = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'contextmenu', value);
};
var _elm_lang$html$Html_Attributes$draggable = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'draggable', value);
};
var _elm_lang$html$Html_Attributes$itemprop = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'itemprop', value);
};
var _elm_lang$html$Html_Attributes$tabindex = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'tabIndex',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$charset = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'charset', value);
};
var _elm_lang$html$Html_Attributes$height = function (value) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'height',
		_elm_lang$core$Basics$toString(value));
};
var _elm_lang$html$Html_Attributes$width = function (value) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'width',
		_elm_lang$core$Basics$toString(value));
};
var _elm_lang$html$Html_Attributes$formaction = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'formAction', value);
};
var _elm_lang$html$Html_Attributes$list = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'list', value);
};
var _elm_lang$html$Html_Attributes$minlength = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'minLength',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$maxlength = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'maxlength',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$size = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'size',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$form = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'form', value);
};
var _elm_lang$html$Html_Attributes$cols = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'cols',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$rows = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'rows',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$challenge = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'challenge', value);
};
var _elm_lang$html$Html_Attributes$media = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'media', value);
};
var _elm_lang$html$Html_Attributes$rel = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'rel', value);
};
var _elm_lang$html$Html_Attributes$datetime = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'datetime', value);
};
var _elm_lang$html$Html_Attributes$pubdate = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'pubdate', value);
};
var _elm_lang$html$Html_Attributes$colspan = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'colspan',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$rowspan = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'rowspan',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$manifest = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'manifest', value);
};
var _elm_lang$html$Html_Attributes$property = _elm_lang$virtual_dom$VirtualDom$property;
var _elm_lang$html$Html_Attributes$stringProperty = F2(
	function (name, string) {
		return A2(
			_elm_lang$html$Html_Attributes$property,
			name,
			_elm_lang$core$Json_Encode$string(string));
	});
var _elm_lang$html$Html_Attributes$class = function (name) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'className', name);
};
var _elm_lang$html$Html_Attributes$id = function (name) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'id', name);
};
var _elm_lang$html$Html_Attributes$title = function (name) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'title', name);
};
var _elm_lang$html$Html_Attributes$accesskey = function ($char) {
	return A2(
		_elm_lang$html$Html_Attributes$stringProperty,
		'accessKey',
		_elm_lang$core$String$fromChar($char));
};
var _elm_lang$html$Html_Attributes$dir = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'dir', value);
};
var _elm_lang$html$Html_Attributes$dropzone = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'dropzone', value);
};
var _elm_lang$html$Html_Attributes$lang = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'lang', value);
};
var _elm_lang$html$Html_Attributes$content = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'content', value);
};
var _elm_lang$html$Html_Attributes$httpEquiv = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'httpEquiv', value);
};
var _elm_lang$html$Html_Attributes$language = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'language', value);
};
var _elm_lang$html$Html_Attributes$src = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'src', value);
};
var _elm_lang$html$Html_Attributes$alt = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'alt', value);
};
var _elm_lang$html$Html_Attributes$preload = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'preload', value);
};
var _elm_lang$html$Html_Attributes$poster = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'poster', value);
};
var _elm_lang$html$Html_Attributes$kind = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'kind', value);
};
var _elm_lang$html$Html_Attributes$srclang = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'srclang', value);
};
var _elm_lang$html$Html_Attributes$sandbox = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'sandbox', value);
};
var _elm_lang$html$Html_Attributes$srcdoc = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'srcdoc', value);
};
var _elm_lang$html$Html_Attributes$type_ = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'type', value);
};
var _elm_lang$html$Html_Attributes$value = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'value', value);
};
var _elm_lang$html$Html_Attributes$defaultValue = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'defaultValue', value);
};
var _elm_lang$html$Html_Attributes$placeholder = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'placeholder', value);
};
var _elm_lang$html$Html_Attributes$accept = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'accept', value);
};
var _elm_lang$html$Html_Attributes$acceptCharset = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'acceptCharset', value);
};
var _elm_lang$html$Html_Attributes$action = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'action', value);
};
var _elm_lang$html$Html_Attributes$autocomplete = function (bool) {
	return A2(
		_elm_lang$html$Html_Attributes$stringProperty,
		'autocomplete',
		bool ? 'on' : 'off');
};
var _elm_lang$html$Html_Attributes$enctype = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'enctype', value);
};
var _elm_lang$html$Html_Attributes$method = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'method', value);
};
var _elm_lang$html$Html_Attributes$name = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'name', value);
};
var _elm_lang$html$Html_Attributes$pattern = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'pattern', value);
};
var _elm_lang$html$Html_Attributes$for = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'htmlFor', value);
};
var _elm_lang$html$Html_Attributes$max = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'max', value);
};
var _elm_lang$html$Html_Attributes$min = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'min', value);
};
var _elm_lang$html$Html_Attributes$step = function (n) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'step', n);
};
var _elm_lang$html$Html_Attributes$wrap = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'wrap', value);
};
var _elm_lang$html$Html_Attributes$usemap = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'useMap', value);
};
var _elm_lang$html$Html_Attributes$shape = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'shape', value);
};
var _elm_lang$html$Html_Attributes$coords = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'coords', value);
};
var _elm_lang$html$Html_Attributes$keytype = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'keytype', value);
};
var _elm_lang$html$Html_Attributes$align = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'align', value);
};
var _elm_lang$html$Html_Attributes$cite = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'cite', value);
};
var _elm_lang$html$Html_Attributes$href = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'href', value);
};
var _elm_lang$html$Html_Attributes$target = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'target', value);
};
var _elm_lang$html$Html_Attributes$downloadAs = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'download', value);
};
var _elm_lang$html$Html_Attributes$hreflang = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'hreflang', value);
};
var _elm_lang$html$Html_Attributes$ping = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'ping', value);
};
var _elm_lang$html$Html_Attributes$start = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$stringProperty,
		'start',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$headers = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'headers', value);
};
var _elm_lang$html$Html_Attributes$scope = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'scope', value);
};
var _elm_lang$html$Html_Attributes$boolProperty = F2(
	function (name, bool) {
		return A2(
			_elm_lang$html$Html_Attributes$property,
			name,
			_elm_lang$core$Json_Encode$bool(bool));
	});
var _elm_lang$html$Html_Attributes$hidden = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'hidden', bool);
};
var _elm_lang$html$Html_Attributes$contenteditable = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'contentEditable', bool);
};
var _elm_lang$html$Html_Attributes$spellcheck = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'spellcheck', bool);
};
var _elm_lang$html$Html_Attributes$async = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'async', bool);
};
var _elm_lang$html$Html_Attributes$defer = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'defer', bool);
};
var _elm_lang$html$Html_Attributes$scoped = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'scoped', bool);
};
var _elm_lang$html$Html_Attributes$autoplay = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'autoplay', bool);
};
var _elm_lang$html$Html_Attributes$controls = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'controls', bool);
};
var _elm_lang$html$Html_Attributes$loop = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'loop', bool);
};
var _elm_lang$html$Html_Attributes$default = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'default', bool);
};
var _elm_lang$html$Html_Attributes$seamless = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'seamless', bool);
};
var _elm_lang$html$Html_Attributes$checked = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'checked', bool);
};
var _elm_lang$html$Html_Attributes$selected = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'selected', bool);
};
var _elm_lang$html$Html_Attributes$autofocus = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'autofocus', bool);
};
var _elm_lang$html$Html_Attributes$disabled = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'disabled', bool);
};
var _elm_lang$html$Html_Attributes$multiple = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'multiple', bool);
};
var _elm_lang$html$Html_Attributes$novalidate = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'noValidate', bool);
};
var _elm_lang$html$Html_Attributes$readonly = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'readOnly', bool);
};
var _elm_lang$html$Html_Attributes$required = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'required', bool);
};
var _elm_lang$html$Html_Attributes$ismap = function (value) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'isMap', value);
};
var _elm_lang$html$Html_Attributes$download = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'download', bool);
};
var _elm_lang$html$Html_Attributes$reversed = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'reversed', bool);
};
var _elm_lang$html$Html_Attributes$classList = function (list) {
	return _elm_lang$html$Html_Attributes$class(
		A2(
			_elm_lang$core$String$join,
			' ',
			A2(
				_elm_lang$core$List$map,
				_elm_lang$core$Tuple$first,
				A2(_elm_lang$core$List$filter, _elm_lang$core$Tuple$second, list))));
};
var _elm_lang$html$Html_Attributes$style = _elm_lang$virtual_dom$VirtualDom$style;

var _rtfeldman$elm_css_helpers$Html_CssHelpers$stylesheetLink = function (url) {
	return A3(
		_elm_lang$html$Html$node,
		'link',
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html_Attributes$property,
				'rel',
				_elm_lang$core$Json_Encode$string('stylesheet')),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html_Attributes$property,
					'type',
					_elm_lang$core$Json_Encode$string('text/css')),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html_Attributes$property,
						'href',
						_elm_lang$core$Json_Encode$string(url)),
					_1: {ctor: '[]'}
				}
			}
		},
		{ctor: '[]'});
};
var _rtfeldman$elm_css_helpers$Html_CssHelpers$style = function (text) {
	return A3(
		_elm_lang$html$Html$node,
		'style',
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html_Attributes$property,
				'textContent',
				_elm_lang$core$Json_Encode$string(text)),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html_Attributes$property,
					'type',
					_elm_lang$core$Json_Encode$string('text/css')),
				_1: {ctor: '[]'}
			}
		},
		{ctor: '[]'});
};
var _rtfeldman$elm_css_helpers$Html_CssHelpers$namespacedClass = F2(
	function (name, list) {
		return _elm_lang$html$Html_Attributes$class(
			A2(
				_elm_lang$core$String$join,
				' ',
				A2(
					_elm_lang$core$List$map,
					_rtfeldman$elm_css_util$Css_Helpers$identifierToString(name),
					list)));
	});
var _rtfeldman$elm_css_helpers$Html_CssHelpers$class = _rtfeldman$elm_css_helpers$Html_CssHelpers$namespacedClass('');
var _rtfeldman$elm_css_helpers$Html_CssHelpers$classList = function (list) {
	return _rtfeldman$elm_css_helpers$Html_CssHelpers$class(
		A2(
			_elm_lang$core$List$map,
			_elm_lang$core$Tuple$first,
			A2(_elm_lang$core$List$filter, _elm_lang$core$Tuple$second, list)));
};
var _rtfeldman$elm_css_helpers$Html_CssHelpers$namespacedClassList = F2(
	function (name, list) {
		return A2(
			_rtfeldman$elm_css_helpers$Html_CssHelpers$namespacedClass,
			name,
			A2(
				_elm_lang$core$List$map,
				_elm_lang$core$Tuple$first,
				A2(_elm_lang$core$List$filter, _elm_lang$core$Tuple$second, list)));
	});
var _rtfeldman$elm_css_helpers$Html_CssHelpers$helpers = {
	$class: _rtfeldman$elm_css_helpers$Html_CssHelpers$class,
	classList: _rtfeldman$elm_css_helpers$Html_CssHelpers$classList,
	id: function (_p0) {
		return _elm_lang$html$Html_Attributes$id(
			_rtfeldman$elm_css_util$Css_Helpers$toCssIdentifier(_p0));
	}
};
var _rtfeldman$elm_css_helpers$Html_CssHelpers$withNamespace = function (name) {
	return {
		$class: _rtfeldman$elm_css_helpers$Html_CssHelpers$namespacedClass(name),
		classList: _rtfeldman$elm_css_helpers$Html_CssHelpers$namespacedClassList(name),
		id: function (_p1) {
			return _elm_lang$html$Html_Attributes$id(
				_rtfeldman$elm_css_util$Css_Helpers$toCssIdentifier(_p1));
		},
		name: name
	};
};
var _rtfeldman$elm_css_helpers$Html_CssHelpers$withClass = F3(
	function (className, makeElem, attrs) {
		return makeElem(
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class(className),
				_1: attrs
			});
	});
var _rtfeldman$elm_css_helpers$Html_CssHelpers$Helpers = F3(
	function (a, b, c) {
		return {$class: a, classList: b, id: c};
	});
var _rtfeldman$elm_css_helpers$Html_CssHelpers$Namespace = F4(
	function (a, b, c, d) {
		return {$class: a, classList: b, id: c, name: d};
	});

var _elm_lang$html$Html_Events$keyCode = A2(_elm_lang$core$Json_Decode$field, 'keyCode', _elm_lang$core$Json_Decode$int);
var _elm_lang$html$Html_Events$targetChecked = A2(
	_elm_lang$core$Json_Decode$at,
	{
		ctor: '::',
		_0: 'target',
		_1: {
			ctor: '::',
			_0: 'checked',
			_1: {ctor: '[]'}
		}
	},
	_elm_lang$core$Json_Decode$bool);
var _elm_lang$html$Html_Events$targetValue = A2(
	_elm_lang$core$Json_Decode$at,
	{
		ctor: '::',
		_0: 'target',
		_1: {
			ctor: '::',
			_0: 'value',
			_1: {ctor: '[]'}
		}
	},
	_elm_lang$core$Json_Decode$string);
var _elm_lang$html$Html_Events$defaultOptions = _elm_lang$virtual_dom$VirtualDom$defaultOptions;
var _elm_lang$html$Html_Events$onWithOptions = _elm_lang$virtual_dom$VirtualDom$onWithOptions;
var _elm_lang$html$Html_Events$on = _elm_lang$virtual_dom$VirtualDom$on;
var _elm_lang$html$Html_Events$onFocus = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'focus',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onBlur = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'blur',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onSubmitOptions = _elm_lang$core$Native_Utils.update(
	_elm_lang$html$Html_Events$defaultOptions,
	{preventDefault: true});
var _elm_lang$html$Html_Events$onSubmit = function (msg) {
	return A3(
		_elm_lang$html$Html_Events$onWithOptions,
		'submit',
		_elm_lang$html$Html_Events$onSubmitOptions,
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onCheck = function (tagger) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'change',
		A2(_elm_lang$core$Json_Decode$map, tagger, _elm_lang$html$Html_Events$targetChecked));
};
var _elm_lang$html$Html_Events$onInput = function (tagger) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'input',
		A2(_elm_lang$core$Json_Decode$map, tagger, _elm_lang$html$Html_Events$targetValue));
};
var _elm_lang$html$Html_Events$onMouseOut = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'mouseout',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onMouseOver = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'mouseover',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onMouseLeave = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'mouseleave',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onMouseEnter = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'mouseenter',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onMouseUp = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'mouseup',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onMouseDown = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'mousedown',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onDoubleClick = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'dblclick',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onClick = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'click',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$Options = F2(
	function (a, b) {
		return {stopPropagation: a, preventDefault: b};
	});

var _elm_lang$core$Set$foldr = F3(
	function (f, b, _p0) {
		var _p1 = _p0;
		return A3(
			_elm_lang$core$Dict$foldr,
			F3(
				function (k, _p2, b) {
					return A2(f, k, b);
				}),
			b,
			_p1._0);
	});
var _elm_lang$core$Set$foldl = F3(
	function (f, b, _p3) {
		var _p4 = _p3;
		return A3(
			_elm_lang$core$Dict$foldl,
			F3(
				function (k, _p5, b) {
					return A2(f, k, b);
				}),
			b,
			_p4._0);
	});
var _elm_lang$core$Set$toList = function (_p6) {
	var _p7 = _p6;
	return _elm_lang$core$Dict$keys(_p7._0);
};
var _elm_lang$core$Set$size = function (_p8) {
	var _p9 = _p8;
	return _elm_lang$core$Dict$size(_p9._0);
};
var _elm_lang$core$Set$member = F2(
	function (k, _p10) {
		var _p11 = _p10;
		return A2(_elm_lang$core$Dict$member, k, _p11._0);
	});
var _elm_lang$core$Set$isEmpty = function (_p12) {
	var _p13 = _p12;
	return _elm_lang$core$Dict$isEmpty(_p13._0);
};
var _elm_lang$core$Set$Set_elm_builtin = function (a) {
	return {ctor: 'Set_elm_builtin', _0: a};
};
var _elm_lang$core$Set$empty = _elm_lang$core$Set$Set_elm_builtin(_elm_lang$core$Dict$empty);
var _elm_lang$core$Set$singleton = function (k) {
	return _elm_lang$core$Set$Set_elm_builtin(
		A2(
			_elm_lang$core$Dict$singleton,
			k,
			{ctor: '_Tuple0'}));
};
var _elm_lang$core$Set$insert = F2(
	function (k, _p14) {
		var _p15 = _p14;
		return _elm_lang$core$Set$Set_elm_builtin(
			A3(
				_elm_lang$core$Dict$insert,
				k,
				{ctor: '_Tuple0'},
				_p15._0));
	});
var _elm_lang$core$Set$fromList = function (xs) {
	return A3(_elm_lang$core$List$foldl, _elm_lang$core$Set$insert, _elm_lang$core$Set$empty, xs);
};
var _elm_lang$core$Set$map = F2(
	function (f, s) {
		return _elm_lang$core$Set$fromList(
			A2(
				_elm_lang$core$List$map,
				f,
				_elm_lang$core$Set$toList(s)));
	});
var _elm_lang$core$Set$remove = F2(
	function (k, _p16) {
		var _p17 = _p16;
		return _elm_lang$core$Set$Set_elm_builtin(
			A2(_elm_lang$core$Dict$remove, k, _p17._0));
	});
var _elm_lang$core$Set$union = F2(
	function (_p19, _p18) {
		var _p20 = _p19;
		var _p21 = _p18;
		return _elm_lang$core$Set$Set_elm_builtin(
			A2(_elm_lang$core$Dict$union, _p20._0, _p21._0));
	});
var _elm_lang$core$Set$intersect = F2(
	function (_p23, _p22) {
		var _p24 = _p23;
		var _p25 = _p22;
		return _elm_lang$core$Set$Set_elm_builtin(
			A2(_elm_lang$core$Dict$intersect, _p24._0, _p25._0));
	});
var _elm_lang$core$Set$diff = F2(
	function (_p27, _p26) {
		var _p28 = _p27;
		var _p29 = _p26;
		return _elm_lang$core$Set$Set_elm_builtin(
			A2(_elm_lang$core$Dict$diff, _p28._0, _p29._0));
	});
var _elm_lang$core$Set$filter = F2(
	function (p, _p30) {
		var _p31 = _p30;
		return _elm_lang$core$Set$Set_elm_builtin(
			A2(
				_elm_lang$core$Dict$filter,
				F2(
					function (k, _p32) {
						return p(k);
					}),
				_p31._0));
	});
var _elm_lang$core$Set$partition = F2(
	function (p, _p33) {
		var _p34 = _p33;
		var _p35 = A2(
			_elm_lang$core$Dict$partition,
			F2(
				function (k, _p36) {
					return p(k);
				}),
			_p34._0);
		var p1 = _p35._0;
		var p2 = _p35._1;
		return {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Set$Set_elm_builtin(p1),
			_1: _elm_lang$core$Set$Set_elm_builtin(p2)
		};
	});

var _abadi199$intl_phone_input$IntlPhoneInput_Internal$StateData = F4(
	function (a, b, c, d) {
		return {countryPickerState: a, highlightedCountryByIsoCode: b, filteredCountries: c, keyword: d};
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Internal$FocusEvent = function (a) {
	return {relatedTargetId: a};
};
var _abadi199$intl_phone_input$IntlPhoneInput_Internal$State = function (a) {
	return {ctor: 'State', _0: a};
};
var _abadi199$intl_phone_input$IntlPhoneInput_Internal$CountryPickerClosed = {ctor: 'CountryPickerClosed'};
var _abadi199$intl_phone_input$IntlPhoneInput_Internal$initialState = _abadi199$intl_phone_input$IntlPhoneInput_Internal$State(
	{countryPickerState: _abadi199$intl_phone_input$IntlPhoneInput_Internal$CountryPickerClosed, highlightedCountryByIsoCode: _elm_lang$core$Maybe$Nothing, filteredCountries: _elm_lang$core$Set$empty, keyword: ''});
var _abadi199$intl_phone_input$IntlPhoneInput_Internal$CountryPickerOpened = {ctor: 'CountryPickerOpened'};
var _abadi199$intl_phone_input$IntlPhoneInput_Internal$toggleCountryPickerState = function (state) {
	var _p0 = state.countryPickerState;
	if (_p0.ctor === 'CountryPickerClosed') {
		return _elm_lang$core$Native_Utils.update(
			state,
			{countryPickerState: _abadi199$intl_phone_input$IntlPhoneInput_Internal$CountryPickerOpened});
	} else {
		return _elm_lang$core$Native_Utils.update(
			state,
			{countryPickerState: _abadi199$intl_phone_input$IntlPhoneInput_Internal$CountryPickerClosed});
	}
};

var _elm_lang$svg$Svg$map = _elm_lang$virtual_dom$VirtualDom$map;
var _elm_lang$svg$Svg$text = _elm_lang$virtual_dom$VirtualDom$text;
var _elm_lang$svg$Svg$svgNamespace = A2(
	_elm_lang$virtual_dom$VirtualDom$property,
	'namespace',
	_elm_lang$core$Json_Encode$string('http://www.w3.org/2000/svg'));
var _elm_lang$svg$Svg$node = F3(
	function (name, attributes, children) {
		return A3(
			_elm_lang$virtual_dom$VirtualDom$node,
			name,
			{ctor: '::', _0: _elm_lang$svg$Svg$svgNamespace, _1: attributes},
			children);
	});
var _elm_lang$svg$Svg$svg = _elm_lang$svg$Svg$node('svg');
var _elm_lang$svg$Svg$foreignObject = _elm_lang$svg$Svg$node('foreignObject');
var _elm_lang$svg$Svg$animate = _elm_lang$svg$Svg$node('animate');
var _elm_lang$svg$Svg$animateColor = _elm_lang$svg$Svg$node('animateColor');
var _elm_lang$svg$Svg$animateMotion = _elm_lang$svg$Svg$node('animateMotion');
var _elm_lang$svg$Svg$animateTransform = _elm_lang$svg$Svg$node('animateTransform');
var _elm_lang$svg$Svg$mpath = _elm_lang$svg$Svg$node('mpath');
var _elm_lang$svg$Svg$set = _elm_lang$svg$Svg$node('set');
var _elm_lang$svg$Svg$a = _elm_lang$svg$Svg$node('a');
var _elm_lang$svg$Svg$defs = _elm_lang$svg$Svg$node('defs');
var _elm_lang$svg$Svg$g = _elm_lang$svg$Svg$node('g');
var _elm_lang$svg$Svg$marker = _elm_lang$svg$Svg$node('marker');
var _elm_lang$svg$Svg$mask = _elm_lang$svg$Svg$node('mask');
var _elm_lang$svg$Svg$pattern = _elm_lang$svg$Svg$node('pattern');
var _elm_lang$svg$Svg$switch = _elm_lang$svg$Svg$node('switch');
var _elm_lang$svg$Svg$symbol = _elm_lang$svg$Svg$node('symbol');
var _elm_lang$svg$Svg$desc = _elm_lang$svg$Svg$node('desc');
var _elm_lang$svg$Svg$metadata = _elm_lang$svg$Svg$node('metadata');
var _elm_lang$svg$Svg$title = _elm_lang$svg$Svg$node('title');
var _elm_lang$svg$Svg$feBlend = _elm_lang$svg$Svg$node('feBlend');
var _elm_lang$svg$Svg$feColorMatrix = _elm_lang$svg$Svg$node('feColorMatrix');
var _elm_lang$svg$Svg$feComponentTransfer = _elm_lang$svg$Svg$node('feComponentTransfer');
var _elm_lang$svg$Svg$feComposite = _elm_lang$svg$Svg$node('feComposite');
var _elm_lang$svg$Svg$feConvolveMatrix = _elm_lang$svg$Svg$node('feConvolveMatrix');
var _elm_lang$svg$Svg$feDiffuseLighting = _elm_lang$svg$Svg$node('feDiffuseLighting');
var _elm_lang$svg$Svg$feDisplacementMap = _elm_lang$svg$Svg$node('feDisplacementMap');
var _elm_lang$svg$Svg$feFlood = _elm_lang$svg$Svg$node('feFlood');
var _elm_lang$svg$Svg$feFuncA = _elm_lang$svg$Svg$node('feFuncA');
var _elm_lang$svg$Svg$feFuncB = _elm_lang$svg$Svg$node('feFuncB');
var _elm_lang$svg$Svg$feFuncG = _elm_lang$svg$Svg$node('feFuncG');
var _elm_lang$svg$Svg$feFuncR = _elm_lang$svg$Svg$node('feFuncR');
var _elm_lang$svg$Svg$feGaussianBlur = _elm_lang$svg$Svg$node('feGaussianBlur');
var _elm_lang$svg$Svg$feImage = _elm_lang$svg$Svg$node('feImage');
var _elm_lang$svg$Svg$feMerge = _elm_lang$svg$Svg$node('feMerge');
var _elm_lang$svg$Svg$feMergeNode = _elm_lang$svg$Svg$node('feMergeNode');
var _elm_lang$svg$Svg$feMorphology = _elm_lang$svg$Svg$node('feMorphology');
var _elm_lang$svg$Svg$feOffset = _elm_lang$svg$Svg$node('feOffset');
var _elm_lang$svg$Svg$feSpecularLighting = _elm_lang$svg$Svg$node('feSpecularLighting');
var _elm_lang$svg$Svg$feTile = _elm_lang$svg$Svg$node('feTile');
var _elm_lang$svg$Svg$feTurbulence = _elm_lang$svg$Svg$node('feTurbulence');
var _elm_lang$svg$Svg$font = _elm_lang$svg$Svg$node('font');
var _elm_lang$svg$Svg$linearGradient = _elm_lang$svg$Svg$node('linearGradient');
var _elm_lang$svg$Svg$radialGradient = _elm_lang$svg$Svg$node('radialGradient');
var _elm_lang$svg$Svg$stop = _elm_lang$svg$Svg$node('stop');
var _elm_lang$svg$Svg$circle = _elm_lang$svg$Svg$node('circle');
var _elm_lang$svg$Svg$ellipse = _elm_lang$svg$Svg$node('ellipse');
var _elm_lang$svg$Svg$image = _elm_lang$svg$Svg$node('image');
var _elm_lang$svg$Svg$line = _elm_lang$svg$Svg$node('line');
var _elm_lang$svg$Svg$path = _elm_lang$svg$Svg$node('path');
var _elm_lang$svg$Svg$polygon = _elm_lang$svg$Svg$node('polygon');
var _elm_lang$svg$Svg$polyline = _elm_lang$svg$Svg$node('polyline');
var _elm_lang$svg$Svg$rect = _elm_lang$svg$Svg$node('rect');
var _elm_lang$svg$Svg$use = _elm_lang$svg$Svg$node('use');
var _elm_lang$svg$Svg$feDistantLight = _elm_lang$svg$Svg$node('feDistantLight');
var _elm_lang$svg$Svg$fePointLight = _elm_lang$svg$Svg$node('fePointLight');
var _elm_lang$svg$Svg$feSpotLight = _elm_lang$svg$Svg$node('feSpotLight');
var _elm_lang$svg$Svg$altGlyph = _elm_lang$svg$Svg$node('altGlyph');
var _elm_lang$svg$Svg$altGlyphDef = _elm_lang$svg$Svg$node('altGlyphDef');
var _elm_lang$svg$Svg$altGlyphItem = _elm_lang$svg$Svg$node('altGlyphItem');
var _elm_lang$svg$Svg$glyph = _elm_lang$svg$Svg$node('glyph');
var _elm_lang$svg$Svg$glyphRef = _elm_lang$svg$Svg$node('glyphRef');
var _elm_lang$svg$Svg$textPath = _elm_lang$svg$Svg$node('textPath');
var _elm_lang$svg$Svg$text_ = _elm_lang$svg$Svg$node('text');
var _elm_lang$svg$Svg$tref = _elm_lang$svg$Svg$node('tref');
var _elm_lang$svg$Svg$tspan = _elm_lang$svg$Svg$node('tspan');
var _elm_lang$svg$Svg$clipPath = _elm_lang$svg$Svg$node('clipPath');
var _elm_lang$svg$Svg$colorProfile = _elm_lang$svg$Svg$node('colorProfile');
var _elm_lang$svg$Svg$cursor = _elm_lang$svg$Svg$node('cursor');
var _elm_lang$svg$Svg$filter = _elm_lang$svg$Svg$node('filter');
var _elm_lang$svg$Svg$script = _elm_lang$svg$Svg$node('script');
var _elm_lang$svg$Svg$style = _elm_lang$svg$Svg$node('style');
var _elm_lang$svg$Svg$view = _elm_lang$svg$Svg$node('view');

var _elm_lang$svg$Svg_Attributes$writingMode = _elm_lang$virtual_dom$VirtualDom$attribute('writing-mode');
var _elm_lang$svg$Svg_Attributes$wordSpacing = _elm_lang$virtual_dom$VirtualDom$attribute('word-spacing');
var _elm_lang$svg$Svg_Attributes$visibility = _elm_lang$virtual_dom$VirtualDom$attribute('visibility');
var _elm_lang$svg$Svg_Attributes$unicodeBidi = _elm_lang$virtual_dom$VirtualDom$attribute('unicode-bidi');
var _elm_lang$svg$Svg_Attributes$textRendering = _elm_lang$virtual_dom$VirtualDom$attribute('text-rendering');
var _elm_lang$svg$Svg_Attributes$textDecoration = _elm_lang$virtual_dom$VirtualDom$attribute('text-decoration');
var _elm_lang$svg$Svg_Attributes$textAnchor = _elm_lang$virtual_dom$VirtualDom$attribute('text-anchor');
var _elm_lang$svg$Svg_Attributes$stroke = _elm_lang$virtual_dom$VirtualDom$attribute('stroke');
var _elm_lang$svg$Svg_Attributes$strokeWidth = _elm_lang$virtual_dom$VirtualDom$attribute('stroke-width');
var _elm_lang$svg$Svg_Attributes$strokeOpacity = _elm_lang$virtual_dom$VirtualDom$attribute('stroke-opacity');
var _elm_lang$svg$Svg_Attributes$strokeMiterlimit = _elm_lang$virtual_dom$VirtualDom$attribute('stroke-miterlimit');
var _elm_lang$svg$Svg_Attributes$strokeLinejoin = _elm_lang$virtual_dom$VirtualDom$attribute('stroke-linejoin');
var _elm_lang$svg$Svg_Attributes$strokeLinecap = _elm_lang$virtual_dom$VirtualDom$attribute('stroke-linecap');
var _elm_lang$svg$Svg_Attributes$strokeDashoffset = _elm_lang$virtual_dom$VirtualDom$attribute('stroke-dashoffset');
var _elm_lang$svg$Svg_Attributes$strokeDasharray = _elm_lang$virtual_dom$VirtualDom$attribute('stroke-dasharray');
var _elm_lang$svg$Svg_Attributes$stopOpacity = _elm_lang$virtual_dom$VirtualDom$attribute('stop-opacity');
var _elm_lang$svg$Svg_Attributes$stopColor = _elm_lang$virtual_dom$VirtualDom$attribute('stop-color');
var _elm_lang$svg$Svg_Attributes$shapeRendering = _elm_lang$virtual_dom$VirtualDom$attribute('shape-rendering');
var _elm_lang$svg$Svg_Attributes$pointerEvents = _elm_lang$virtual_dom$VirtualDom$attribute('pointer-events');
var _elm_lang$svg$Svg_Attributes$overflow = _elm_lang$virtual_dom$VirtualDom$attribute('overflow');
var _elm_lang$svg$Svg_Attributes$opacity = _elm_lang$virtual_dom$VirtualDom$attribute('opacity');
var _elm_lang$svg$Svg_Attributes$mask = _elm_lang$virtual_dom$VirtualDom$attribute('mask');
var _elm_lang$svg$Svg_Attributes$markerStart = _elm_lang$virtual_dom$VirtualDom$attribute('marker-start');
var _elm_lang$svg$Svg_Attributes$markerMid = _elm_lang$virtual_dom$VirtualDom$attribute('marker-mid');
var _elm_lang$svg$Svg_Attributes$markerEnd = _elm_lang$virtual_dom$VirtualDom$attribute('marker-end');
var _elm_lang$svg$Svg_Attributes$lightingColor = _elm_lang$virtual_dom$VirtualDom$attribute('lighting-color');
var _elm_lang$svg$Svg_Attributes$letterSpacing = _elm_lang$virtual_dom$VirtualDom$attribute('letter-spacing');
var _elm_lang$svg$Svg_Attributes$kerning = _elm_lang$virtual_dom$VirtualDom$attribute('kerning');
var _elm_lang$svg$Svg_Attributes$imageRendering = _elm_lang$virtual_dom$VirtualDom$attribute('image-rendering');
var _elm_lang$svg$Svg_Attributes$glyphOrientationVertical = _elm_lang$virtual_dom$VirtualDom$attribute('glyph-orientation-vertical');
var _elm_lang$svg$Svg_Attributes$glyphOrientationHorizontal = _elm_lang$virtual_dom$VirtualDom$attribute('glyph-orientation-horizontal');
var _elm_lang$svg$Svg_Attributes$fontWeight = _elm_lang$virtual_dom$VirtualDom$attribute('font-weight');
var _elm_lang$svg$Svg_Attributes$fontVariant = _elm_lang$virtual_dom$VirtualDom$attribute('font-variant');
var _elm_lang$svg$Svg_Attributes$fontStyle = _elm_lang$virtual_dom$VirtualDom$attribute('font-style');
var _elm_lang$svg$Svg_Attributes$fontStretch = _elm_lang$virtual_dom$VirtualDom$attribute('font-stretch');
var _elm_lang$svg$Svg_Attributes$fontSize = _elm_lang$virtual_dom$VirtualDom$attribute('font-size');
var _elm_lang$svg$Svg_Attributes$fontSizeAdjust = _elm_lang$virtual_dom$VirtualDom$attribute('font-size-adjust');
var _elm_lang$svg$Svg_Attributes$fontFamily = _elm_lang$virtual_dom$VirtualDom$attribute('font-family');
var _elm_lang$svg$Svg_Attributes$floodOpacity = _elm_lang$virtual_dom$VirtualDom$attribute('flood-opacity');
var _elm_lang$svg$Svg_Attributes$floodColor = _elm_lang$virtual_dom$VirtualDom$attribute('flood-color');
var _elm_lang$svg$Svg_Attributes$filter = _elm_lang$virtual_dom$VirtualDom$attribute('filter');
var _elm_lang$svg$Svg_Attributes$fill = _elm_lang$virtual_dom$VirtualDom$attribute('fill');
var _elm_lang$svg$Svg_Attributes$fillRule = _elm_lang$virtual_dom$VirtualDom$attribute('fill-rule');
var _elm_lang$svg$Svg_Attributes$fillOpacity = _elm_lang$virtual_dom$VirtualDom$attribute('fill-opacity');
var _elm_lang$svg$Svg_Attributes$enableBackground = _elm_lang$virtual_dom$VirtualDom$attribute('enable-background');
var _elm_lang$svg$Svg_Attributes$dominantBaseline = _elm_lang$virtual_dom$VirtualDom$attribute('dominant-baseline');
var _elm_lang$svg$Svg_Attributes$display = _elm_lang$virtual_dom$VirtualDom$attribute('display');
var _elm_lang$svg$Svg_Attributes$direction = _elm_lang$virtual_dom$VirtualDom$attribute('direction');
var _elm_lang$svg$Svg_Attributes$cursor = _elm_lang$virtual_dom$VirtualDom$attribute('cursor');
var _elm_lang$svg$Svg_Attributes$color = _elm_lang$virtual_dom$VirtualDom$attribute('color');
var _elm_lang$svg$Svg_Attributes$colorRendering = _elm_lang$virtual_dom$VirtualDom$attribute('color-rendering');
var _elm_lang$svg$Svg_Attributes$colorProfile = _elm_lang$virtual_dom$VirtualDom$attribute('color-profile');
var _elm_lang$svg$Svg_Attributes$colorInterpolation = _elm_lang$virtual_dom$VirtualDom$attribute('color-interpolation');
var _elm_lang$svg$Svg_Attributes$colorInterpolationFilters = _elm_lang$virtual_dom$VirtualDom$attribute('color-interpolation-filters');
var _elm_lang$svg$Svg_Attributes$clip = _elm_lang$virtual_dom$VirtualDom$attribute('clip');
var _elm_lang$svg$Svg_Attributes$clipRule = _elm_lang$virtual_dom$VirtualDom$attribute('clip-rule');
var _elm_lang$svg$Svg_Attributes$clipPath = _elm_lang$virtual_dom$VirtualDom$attribute('clip-path');
var _elm_lang$svg$Svg_Attributes$baselineShift = _elm_lang$virtual_dom$VirtualDom$attribute('baseline-shift');
var _elm_lang$svg$Svg_Attributes$alignmentBaseline = _elm_lang$virtual_dom$VirtualDom$attribute('alignment-baseline');
var _elm_lang$svg$Svg_Attributes$zoomAndPan = _elm_lang$virtual_dom$VirtualDom$attribute('zoomAndPan');
var _elm_lang$svg$Svg_Attributes$z = _elm_lang$virtual_dom$VirtualDom$attribute('z');
var _elm_lang$svg$Svg_Attributes$yChannelSelector = _elm_lang$virtual_dom$VirtualDom$attribute('yChannelSelector');
var _elm_lang$svg$Svg_Attributes$y2 = _elm_lang$virtual_dom$VirtualDom$attribute('y2');
var _elm_lang$svg$Svg_Attributes$y1 = _elm_lang$virtual_dom$VirtualDom$attribute('y1');
var _elm_lang$svg$Svg_Attributes$y = _elm_lang$virtual_dom$VirtualDom$attribute('y');
var _elm_lang$svg$Svg_Attributes$xmlSpace = A2(_elm_lang$virtual_dom$VirtualDom$attributeNS, 'http://www.w3.org/XML/1998/namespace', 'xml:space');
var _elm_lang$svg$Svg_Attributes$xmlLang = A2(_elm_lang$virtual_dom$VirtualDom$attributeNS, 'http://www.w3.org/XML/1998/namespace', 'xml:lang');
var _elm_lang$svg$Svg_Attributes$xmlBase = A2(_elm_lang$virtual_dom$VirtualDom$attributeNS, 'http://www.w3.org/XML/1998/namespace', 'xml:base');
var _elm_lang$svg$Svg_Attributes$xlinkType = A2(_elm_lang$virtual_dom$VirtualDom$attributeNS, 'http://www.w3.org/1999/xlink', 'xlink:type');
var _elm_lang$svg$Svg_Attributes$xlinkTitle = A2(_elm_lang$virtual_dom$VirtualDom$attributeNS, 'http://www.w3.org/1999/xlink', 'xlink:title');
var _elm_lang$svg$Svg_Attributes$xlinkShow = A2(_elm_lang$virtual_dom$VirtualDom$attributeNS, 'http://www.w3.org/1999/xlink', 'xlink:show');
var _elm_lang$svg$Svg_Attributes$xlinkRole = A2(_elm_lang$virtual_dom$VirtualDom$attributeNS, 'http://www.w3.org/1999/xlink', 'xlink:role');
var _elm_lang$svg$Svg_Attributes$xlinkHref = A2(_elm_lang$virtual_dom$VirtualDom$attributeNS, 'http://www.w3.org/1999/xlink', 'xlink:href');
var _elm_lang$svg$Svg_Attributes$xlinkArcrole = A2(_elm_lang$virtual_dom$VirtualDom$attributeNS, 'http://www.w3.org/1999/xlink', 'xlink:arcrole');
var _elm_lang$svg$Svg_Attributes$xlinkActuate = A2(_elm_lang$virtual_dom$VirtualDom$attributeNS, 'http://www.w3.org/1999/xlink', 'xlink:actuate');
var _elm_lang$svg$Svg_Attributes$xChannelSelector = _elm_lang$virtual_dom$VirtualDom$attribute('xChannelSelector');
var _elm_lang$svg$Svg_Attributes$x2 = _elm_lang$virtual_dom$VirtualDom$attribute('x2');
var _elm_lang$svg$Svg_Attributes$x1 = _elm_lang$virtual_dom$VirtualDom$attribute('x1');
var _elm_lang$svg$Svg_Attributes$xHeight = _elm_lang$virtual_dom$VirtualDom$attribute('x-height');
var _elm_lang$svg$Svg_Attributes$x = _elm_lang$virtual_dom$VirtualDom$attribute('x');
var _elm_lang$svg$Svg_Attributes$widths = _elm_lang$virtual_dom$VirtualDom$attribute('widths');
var _elm_lang$svg$Svg_Attributes$width = _elm_lang$virtual_dom$VirtualDom$attribute('width');
var _elm_lang$svg$Svg_Attributes$viewTarget = _elm_lang$virtual_dom$VirtualDom$attribute('viewTarget');
var _elm_lang$svg$Svg_Attributes$viewBox = _elm_lang$virtual_dom$VirtualDom$attribute('viewBox');
var _elm_lang$svg$Svg_Attributes$vertOriginY = _elm_lang$virtual_dom$VirtualDom$attribute('vert-origin-y');
var _elm_lang$svg$Svg_Attributes$vertOriginX = _elm_lang$virtual_dom$VirtualDom$attribute('vert-origin-x');
var _elm_lang$svg$Svg_Attributes$vertAdvY = _elm_lang$virtual_dom$VirtualDom$attribute('vert-adv-y');
var _elm_lang$svg$Svg_Attributes$version = _elm_lang$virtual_dom$VirtualDom$attribute('version');
var _elm_lang$svg$Svg_Attributes$values = _elm_lang$virtual_dom$VirtualDom$attribute('values');
var _elm_lang$svg$Svg_Attributes$vMathematical = _elm_lang$virtual_dom$VirtualDom$attribute('v-mathematical');
var _elm_lang$svg$Svg_Attributes$vIdeographic = _elm_lang$virtual_dom$VirtualDom$attribute('v-ideographic');
var _elm_lang$svg$Svg_Attributes$vHanging = _elm_lang$virtual_dom$VirtualDom$attribute('v-hanging');
var _elm_lang$svg$Svg_Attributes$vAlphabetic = _elm_lang$virtual_dom$VirtualDom$attribute('v-alphabetic');
var _elm_lang$svg$Svg_Attributes$unitsPerEm = _elm_lang$virtual_dom$VirtualDom$attribute('units-per-em');
var _elm_lang$svg$Svg_Attributes$unicodeRange = _elm_lang$virtual_dom$VirtualDom$attribute('unicode-range');
var _elm_lang$svg$Svg_Attributes$unicode = _elm_lang$virtual_dom$VirtualDom$attribute('unicode');
var _elm_lang$svg$Svg_Attributes$underlineThickness = _elm_lang$virtual_dom$VirtualDom$attribute('underline-thickness');
var _elm_lang$svg$Svg_Attributes$underlinePosition = _elm_lang$virtual_dom$VirtualDom$attribute('underline-position');
var _elm_lang$svg$Svg_Attributes$u2 = _elm_lang$virtual_dom$VirtualDom$attribute('u2');
var _elm_lang$svg$Svg_Attributes$u1 = _elm_lang$virtual_dom$VirtualDom$attribute('u1');
var _elm_lang$svg$Svg_Attributes$type_ = _elm_lang$virtual_dom$VirtualDom$attribute('type');
var _elm_lang$svg$Svg_Attributes$transform = _elm_lang$virtual_dom$VirtualDom$attribute('transform');
var _elm_lang$svg$Svg_Attributes$to = _elm_lang$virtual_dom$VirtualDom$attribute('to');
var _elm_lang$svg$Svg_Attributes$title = _elm_lang$virtual_dom$VirtualDom$attribute('title');
var _elm_lang$svg$Svg_Attributes$textLength = _elm_lang$virtual_dom$VirtualDom$attribute('textLength');
var _elm_lang$svg$Svg_Attributes$targetY = _elm_lang$virtual_dom$VirtualDom$attribute('targetY');
var _elm_lang$svg$Svg_Attributes$targetX = _elm_lang$virtual_dom$VirtualDom$attribute('targetX');
var _elm_lang$svg$Svg_Attributes$target = _elm_lang$virtual_dom$VirtualDom$attribute('target');
var _elm_lang$svg$Svg_Attributes$tableValues = _elm_lang$virtual_dom$VirtualDom$attribute('tableValues');
var _elm_lang$svg$Svg_Attributes$systemLanguage = _elm_lang$virtual_dom$VirtualDom$attribute('systemLanguage');
var _elm_lang$svg$Svg_Attributes$surfaceScale = _elm_lang$virtual_dom$VirtualDom$attribute('surfaceScale');
var _elm_lang$svg$Svg_Attributes$style = _elm_lang$virtual_dom$VirtualDom$attribute('style');
var _elm_lang$svg$Svg_Attributes$string = _elm_lang$virtual_dom$VirtualDom$attribute('string');
var _elm_lang$svg$Svg_Attributes$strikethroughThickness = _elm_lang$virtual_dom$VirtualDom$attribute('strikethrough-thickness');
var _elm_lang$svg$Svg_Attributes$strikethroughPosition = _elm_lang$virtual_dom$VirtualDom$attribute('strikethrough-position');
var _elm_lang$svg$Svg_Attributes$stitchTiles = _elm_lang$virtual_dom$VirtualDom$attribute('stitchTiles');
var _elm_lang$svg$Svg_Attributes$stemv = _elm_lang$virtual_dom$VirtualDom$attribute('stemv');
var _elm_lang$svg$Svg_Attributes$stemh = _elm_lang$virtual_dom$VirtualDom$attribute('stemh');
var _elm_lang$svg$Svg_Attributes$stdDeviation = _elm_lang$virtual_dom$VirtualDom$attribute('stdDeviation');
var _elm_lang$svg$Svg_Attributes$startOffset = _elm_lang$virtual_dom$VirtualDom$attribute('startOffset');
var _elm_lang$svg$Svg_Attributes$spreadMethod = _elm_lang$virtual_dom$VirtualDom$attribute('spreadMethod');
var _elm_lang$svg$Svg_Attributes$speed = _elm_lang$virtual_dom$VirtualDom$attribute('speed');
var _elm_lang$svg$Svg_Attributes$specularExponent = _elm_lang$virtual_dom$VirtualDom$attribute('specularExponent');
var _elm_lang$svg$Svg_Attributes$specularConstant = _elm_lang$virtual_dom$VirtualDom$attribute('specularConstant');
var _elm_lang$svg$Svg_Attributes$spacing = _elm_lang$virtual_dom$VirtualDom$attribute('spacing');
var _elm_lang$svg$Svg_Attributes$slope = _elm_lang$virtual_dom$VirtualDom$attribute('slope');
var _elm_lang$svg$Svg_Attributes$seed = _elm_lang$virtual_dom$VirtualDom$attribute('seed');
var _elm_lang$svg$Svg_Attributes$scale = _elm_lang$virtual_dom$VirtualDom$attribute('scale');
var _elm_lang$svg$Svg_Attributes$ry = _elm_lang$virtual_dom$VirtualDom$attribute('ry');
var _elm_lang$svg$Svg_Attributes$rx = _elm_lang$virtual_dom$VirtualDom$attribute('rx');
var _elm_lang$svg$Svg_Attributes$rotate = _elm_lang$virtual_dom$VirtualDom$attribute('rotate');
var _elm_lang$svg$Svg_Attributes$result = _elm_lang$virtual_dom$VirtualDom$attribute('result');
var _elm_lang$svg$Svg_Attributes$restart = _elm_lang$virtual_dom$VirtualDom$attribute('restart');
var _elm_lang$svg$Svg_Attributes$requiredFeatures = _elm_lang$virtual_dom$VirtualDom$attribute('requiredFeatures');
var _elm_lang$svg$Svg_Attributes$requiredExtensions = _elm_lang$virtual_dom$VirtualDom$attribute('requiredExtensions');
var _elm_lang$svg$Svg_Attributes$repeatDur = _elm_lang$virtual_dom$VirtualDom$attribute('repeatDur');
var _elm_lang$svg$Svg_Attributes$repeatCount = _elm_lang$virtual_dom$VirtualDom$attribute('repeatCount');
var _elm_lang$svg$Svg_Attributes$renderingIntent = _elm_lang$virtual_dom$VirtualDom$attribute('rendering-intent');
var _elm_lang$svg$Svg_Attributes$refY = _elm_lang$virtual_dom$VirtualDom$attribute('refY');
var _elm_lang$svg$Svg_Attributes$refX = _elm_lang$virtual_dom$VirtualDom$attribute('refX');
var _elm_lang$svg$Svg_Attributes$radius = _elm_lang$virtual_dom$VirtualDom$attribute('radius');
var _elm_lang$svg$Svg_Attributes$r = _elm_lang$virtual_dom$VirtualDom$attribute('r');
var _elm_lang$svg$Svg_Attributes$primitiveUnits = _elm_lang$virtual_dom$VirtualDom$attribute('primitiveUnits');
var _elm_lang$svg$Svg_Attributes$preserveAspectRatio = _elm_lang$virtual_dom$VirtualDom$attribute('preserveAspectRatio');
var _elm_lang$svg$Svg_Attributes$preserveAlpha = _elm_lang$virtual_dom$VirtualDom$attribute('preserveAlpha');
var _elm_lang$svg$Svg_Attributes$pointsAtZ = _elm_lang$virtual_dom$VirtualDom$attribute('pointsAtZ');
var _elm_lang$svg$Svg_Attributes$pointsAtY = _elm_lang$virtual_dom$VirtualDom$attribute('pointsAtY');
var _elm_lang$svg$Svg_Attributes$pointsAtX = _elm_lang$virtual_dom$VirtualDom$attribute('pointsAtX');
var _elm_lang$svg$Svg_Attributes$points = _elm_lang$virtual_dom$VirtualDom$attribute('points');
var _elm_lang$svg$Svg_Attributes$pointOrder = _elm_lang$virtual_dom$VirtualDom$attribute('point-order');
var _elm_lang$svg$Svg_Attributes$patternUnits = _elm_lang$virtual_dom$VirtualDom$attribute('patternUnits');
var _elm_lang$svg$Svg_Attributes$patternTransform = _elm_lang$virtual_dom$VirtualDom$attribute('patternTransform');
var _elm_lang$svg$Svg_Attributes$patternContentUnits = _elm_lang$virtual_dom$VirtualDom$attribute('patternContentUnits');
var _elm_lang$svg$Svg_Attributes$pathLength = _elm_lang$virtual_dom$VirtualDom$attribute('pathLength');
var _elm_lang$svg$Svg_Attributes$path = _elm_lang$virtual_dom$VirtualDom$attribute('path');
var _elm_lang$svg$Svg_Attributes$panose1 = _elm_lang$virtual_dom$VirtualDom$attribute('panose-1');
var _elm_lang$svg$Svg_Attributes$overlineThickness = _elm_lang$virtual_dom$VirtualDom$attribute('overline-thickness');
var _elm_lang$svg$Svg_Attributes$overlinePosition = _elm_lang$virtual_dom$VirtualDom$attribute('overline-position');
var _elm_lang$svg$Svg_Attributes$origin = _elm_lang$virtual_dom$VirtualDom$attribute('origin');
var _elm_lang$svg$Svg_Attributes$orientation = _elm_lang$virtual_dom$VirtualDom$attribute('orientation');
var _elm_lang$svg$Svg_Attributes$orient = _elm_lang$virtual_dom$VirtualDom$attribute('orient');
var _elm_lang$svg$Svg_Attributes$order = _elm_lang$virtual_dom$VirtualDom$attribute('order');
var _elm_lang$svg$Svg_Attributes$operator = _elm_lang$virtual_dom$VirtualDom$attribute('operator');
var _elm_lang$svg$Svg_Attributes$offset = _elm_lang$virtual_dom$VirtualDom$attribute('offset');
var _elm_lang$svg$Svg_Attributes$numOctaves = _elm_lang$virtual_dom$VirtualDom$attribute('numOctaves');
var _elm_lang$svg$Svg_Attributes$name = _elm_lang$virtual_dom$VirtualDom$attribute('name');
var _elm_lang$svg$Svg_Attributes$mode = _elm_lang$virtual_dom$VirtualDom$attribute('mode');
var _elm_lang$svg$Svg_Attributes$min = _elm_lang$virtual_dom$VirtualDom$attribute('min');
var _elm_lang$svg$Svg_Attributes$method = _elm_lang$virtual_dom$VirtualDom$attribute('method');
var _elm_lang$svg$Svg_Attributes$media = _elm_lang$virtual_dom$VirtualDom$attribute('media');
var _elm_lang$svg$Svg_Attributes$max = _elm_lang$virtual_dom$VirtualDom$attribute('max');
var _elm_lang$svg$Svg_Attributes$mathematical = _elm_lang$virtual_dom$VirtualDom$attribute('mathematical');
var _elm_lang$svg$Svg_Attributes$maskUnits = _elm_lang$virtual_dom$VirtualDom$attribute('maskUnits');
var _elm_lang$svg$Svg_Attributes$maskContentUnits = _elm_lang$virtual_dom$VirtualDom$attribute('maskContentUnits');
var _elm_lang$svg$Svg_Attributes$markerWidth = _elm_lang$virtual_dom$VirtualDom$attribute('markerWidth');
var _elm_lang$svg$Svg_Attributes$markerUnits = _elm_lang$virtual_dom$VirtualDom$attribute('markerUnits');
var _elm_lang$svg$Svg_Attributes$markerHeight = _elm_lang$virtual_dom$VirtualDom$attribute('markerHeight');
var _elm_lang$svg$Svg_Attributes$local = _elm_lang$virtual_dom$VirtualDom$attribute('local');
var _elm_lang$svg$Svg_Attributes$limitingConeAngle = _elm_lang$virtual_dom$VirtualDom$attribute('limitingConeAngle');
var _elm_lang$svg$Svg_Attributes$lengthAdjust = _elm_lang$virtual_dom$VirtualDom$attribute('lengthAdjust');
var _elm_lang$svg$Svg_Attributes$lang = _elm_lang$virtual_dom$VirtualDom$attribute('lang');
var _elm_lang$svg$Svg_Attributes$keyTimes = _elm_lang$virtual_dom$VirtualDom$attribute('keyTimes');
var _elm_lang$svg$Svg_Attributes$keySplines = _elm_lang$virtual_dom$VirtualDom$attribute('keySplines');
var _elm_lang$svg$Svg_Attributes$keyPoints = _elm_lang$virtual_dom$VirtualDom$attribute('keyPoints');
var _elm_lang$svg$Svg_Attributes$kernelUnitLength = _elm_lang$virtual_dom$VirtualDom$attribute('kernelUnitLength');
var _elm_lang$svg$Svg_Attributes$kernelMatrix = _elm_lang$virtual_dom$VirtualDom$attribute('kernelMatrix');
var _elm_lang$svg$Svg_Attributes$k4 = _elm_lang$virtual_dom$VirtualDom$attribute('k4');
var _elm_lang$svg$Svg_Attributes$k3 = _elm_lang$virtual_dom$VirtualDom$attribute('k3');
var _elm_lang$svg$Svg_Attributes$k2 = _elm_lang$virtual_dom$VirtualDom$attribute('k2');
var _elm_lang$svg$Svg_Attributes$k1 = _elm_lang$virtual_dom$VirtualDom$attribute('k1');
var _elm_lang$svg$Svg_Attributes$k = _elm_lang$virtual_dom$VirtualDom$attribute('k');
var _elm_lang$svg$Svg_Attributes$intercept = _elm_lang$virtual_dom$VirtualDom$attribute('intercept');
var _elm_lang$svg$Svg_Attributes$in2 = _elm_lang$virtual_dom$VirtualDom$attribute('in2');
var _elm_lang$svg$Svg_Attributes$in_ = _elm_lang$virtual_dom$VirtualDom$attribute('in');
var _elm_lang$svg$Svg_Attributes$ideographic = _elm_lang$virtual_dom$VirtualDom$attribute('ideographic');
var _elm_lang$svg$Svg_Attributes$id = _elm_lang$virtual_dom$VirtualDom$attribute('id');
var _elm_lang$svg$Svg_Attributes$horizOriginY = _elm_lang$virtual_dom$VirtualDom$attribute('horiz-origin-y');
var _elm_lang$svg$Svg_Attributes$horizOriginX = _elm_lang$virtual_dom$VirtualDom$attribute('horiz-origin-x');
var _elm_lang$svg$Svg_Attributes$horizAdvX = _elm_lang$virtual_dom$VirtualDom$attribute('horiz-adv-x');
var _elm_lang$svg$Svg_Attributes$height = _elm_lang$virtual_dom$VirtualDom$attribute('height');
var _elm_lang$svg$Svg_Attributes$hanging = _elm_lang$virtual_dom$VirtualDom$attribute('hanging');
var _elm_lang$svg$Svg_Attributes$gradientUnits = _elm_lang$virtual_dom$VirtualDom$attribute('gradientUnits');
var _elm_lang$svg$Svg_Attributes$gradientTransform = _elm_lang$virtual_dom$VirtualDom$attribute('gradientTransform');
var _elm_lang$svg$Svg_Attributes$glyphRef = _elm_lang$virtual_dom$VirtualDom$attribute('glyphRef');
var _elm_lang$svg$Svg_Attributes$glyphName = _elm_lang$virtual_dom$VirtualDom$attribute('glyph-name');
var _elm_lang$svg$Svg_Attributes$g2 = _elm_lang$virtual_dom$VirtualDom$attribute('g2');
var _elm_lang$svg$Svg_Attributes$g1 = _elm_lang$virtual_dom$VirtualDom$attribute('g1');
var _elm_lang$svg$Svg_Attributes$fy = _elm_lang$virtual_dom$VirtualDom$attribute('fy');
var _elm_lang$svg$Svg_Attributes$fx = _elm_lang$virtual_dom$VirtualDom$attribute('fx');
var _elm_lang$svg$Svg_Attributes$from = _elm_lang$virtual_dom$VirtualDom$attribute('from');
var _elm_lang$svg$Svg_Attributes$format = _elm_lang$virtual_dom$VirtualDom$attribute('format');
var _elm_lang$svg$Svg_Attributes$filterUnits = _elm_lang$virtual_dom$VirtualDom$attribute('filterUnits');
var _elm_lang$svg$Svg_Attributes$filterRes = _elm_lang$virtual_dom$VirtualDom$attribute('filterRes');
var _elm_lang$svg$Svg_Attributes$externalResourcesRequired = _elm_lang$virtual_dom$VirtualDom$attribute('externalResourcesRequired');
var _elm_lang$svg$Svg_Attributes$exponent = _elm_lang$virtual_dom$VirtualDom$attribute('exponent');
var _elm_lang$svg$Svg_Attributes$end = _elm_lang$virtual_dom$VirtualDom$attribute('end');
var _elm_lang$svg$Svg_Attributes$elevation = _elm_lang$virtual_dom$VirtualDom$attribute('elevation');
var _elm_lang$svg$Svg_Attributes$edgeMode = _elm_lang$virtual_dom$VirtualDom$attribute('edgeMode');
var _elm_lang$svg$Svg_Attributes$dy = _elm_lang$virtual_dom$VirtualDom$attribute('dy');
var _elm_lang$svg$Svg_Attributes$dx = _elm_lang$virtual_dom$VirtualDom$attribute('dx');
var _elm_lang$svg$Svg_Attributes$dur = _elm_lang$virtual_dom$VirtualDom$attribute('dur');
var _elm_lang$svg$Svg_Attributes$divisor = _elm_lang$virtual_dom$VirtualDom$attribute('divisor');
var _elm_lang$svg$Svg_Attributes$diffuseConstant = _elm_lang$virtual_dom$VirtualDom$attribute('diffuseConstant');
var _elm_lang$svg$Svg_Attributes$descent = _elm_lang$virtual_dom$VirtualDom$attribute('descent');
var _elm_lang$svg$Svg_Attributes$decelerate = _elm_lang$virtual_dom$VirtualDom$attribute('decelerate');
var _elm_lang$svg$Svg_Attributes$d = _elm_lang$virtual_dom$VirtualDom$attribute('d');
var _elm_lang$svg$Svg_Attributes$cy = _elm_lang$virtual_dom$VirtualDom$attribute('cy');
var _elm_lang$svg$Svg_Attributes$cx = _elm_lang$virtual_dom$VirtualDom$attribute('cx');
var _elm_lang$svg$Svg_Attributes$contentStyleType = _elm_lang$virtual_dom$VirtualDom$attribute('contentStyleType');
var _elm_lang$svg$Svg_Attributes$contentScriptType = _elm_lang$virtual_dom$VirtualDom$attribute('contentScriptType');
var _elm_lang$svg$Svg_Attributes$clipPathUnits = _elm_lang$virtual_dom$VirtualDom$attribute('clipPathUnits');
var _elm_lang$svg$Svg_Attributes$class = _elm_lang$virtual_dom$VirtualDom$attribute('class');
var _elm_lang$svg$Svg_Attributes$capHeight = _elm_lang$virtual_dom$VirtualDom$attribute('cap-height');
var _elm_lang$svg$Svg_Attributes$calcMode = _elm_lang$virtual_dom$VirtualDom$attribute('calcMode');
var _elm_lang$svg$Svg_Attributes$by = _elm_lang$virtual_dom$VirtualDom$attribute('by');
var _elm_lang$svg$Svg_Attributes$bias = _elm_lang$virtual_dom$VirtualDom$attribute('bias');
var _elm_lang$svg$Svg_Attributes$begin = _elm_lang$virtual_dom$VirtualDom$attribute('begin');
var _elm_lang$svg$Svg_Attributes$bbox = _elm_lang$virtual_dom$VirtualDom$attribute('bbox');
var _elm_lang$svg$Svg_Attributes$baseProfile = _elm_lang$virtual_dom$VirtualDom$attribute('baseProfile');
var _elm_lang$svg$Svg_Attributes$baseFrequency = _elm_lang$virtual_dom$VirtualDom$attribute('baseFrequency');
var _elm_lang$svg$Svg_Attributes$azimuth = _elm_lang$virtual_dom$VirtualDom$attribute('azimuth');
var _elm_lang$svg$Svg_Attributes$autoReverse = _elm_lang$virtual_dom$VirtualDom$attribute('autoReverse');
var _elm_lang$svg$Svg_Attributes$attributeType = _elm_lang$virtual_dom$VirtualDom$attribute('attributeType');
var _elm_lang$svg$Svg_Attributes$attributeName = _elm_lang$virtual_dom$VirtualDom$attribute('attributeName');
var _elm_lang$svg$Svg_Attributes$ascent = _elm_lang$virtual_dom$VirtualDom$attribute('ascent');
var _elm_lang$svg$Svg_Attributes$arabicForm = _elm_lang$virtual_dom$VirtualDom$attribute('arabic-form');
var _elm_lang$svg$Svg_Attributes$amplitude = _elm_lang$virtual_dom$VirtualDom$attribute('amplitude');
var _elm_lang$svg$Svg_Attributes$allowReorder = _elm_lang$virtual_dom$VirtualDom$attribute('allowReorder');
var _elm_lang$svg$Svg_Attributes$alphabetic = _elm_lang$virtual_dom$VirtualDom$attribute('alphabetic');
var _elm_lang$svg$Svg_Attributes$additive = _elm_lang$virtual_dom$VirtualDom$attribute('additive');
var _elm_lang$svg$Svg_Attributes$accumulate = _elm_lang$virtual_dom$VirtualDom$attribute('accumulate');
var _elm_lang$svg$Svg_Attributes$accelerate = _elm_lang$virtual_dom$VirtualDom$attribute('accelerate');
var _elm_lang$svg$Svg_Attributes$accentHeight = _elm_lang$virtual_dom$VirtualDom$attribute('accent-height');

var _abadi199$intl_phone_input$IntlPhoneInput_Flags$xkFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$width('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$height('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 840 600'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$path,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fill('#244aa5'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M0 0h840v600H0z'),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '[]'}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M332 285c24-8 36-34 48-54 9-14 18-34 37-38 18 0 31 16 41 30 30 40 81 61 109 103 12 17 12 40 1 57-8 27-31 46-57 53-34 10-74 10-99 38-6 14-28 25-38 7-15-27-16-62-40-84-15-7-30-13-39-28-14-17-25-42-14-64 11-17 33-20 51-20z'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#d0a650'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$zaFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$clipPath,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M-72 0h683v512H-72z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$clipPath('url(#a)'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$transform('translate(67) scale(.93748)'),
						_1: {ctor: '[]'}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$g,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M-72 408V104l226 152-226 152z'),
									_1: {ctor: '[]'}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$path,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M82 512l254-171h360v171H82z'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$fill('#00c'),
											_1: {ctor: '[]'}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$svg$Svg$path,
										{
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$d('M66 0h630v171H336S69-2 66 0z'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$fill('red'),
												_1: {ctor: '[]'}
											}
										},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$svg$Svg$path,
											{
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$d('M-72 64v40l226 152-226 152v40l285-192L-72 64z'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$fill('#fc0'),
													_1: {ctor: '[]'}
												}
											},
											{ctor: '[]'}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$svg$Svg$path,
												{
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$d('M-72 64V0h95l301 204h372v104H324L23 512h-95v-64l285-192L-72 64z'),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$fill('#093'),
														_1: {ctor: '[]'}
													}
												},
												{ctor: '[]'}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$svg$Svg$path,
													{
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$d('M23 0h59l254 171h360v33H324L23 0zm0 512h59l254-171h360v-33H324L23 512z'),
														_1: {
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
															_1: {ctor: '[]'}
														}
													},
													{ctor: '[]'}),
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						}),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$zwFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$version('1'),
					_1: {ctor: '[]'}
				}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$clipPath,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$rect,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$ry('0'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$height('420'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$width('546'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$x('2'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$fill('#00f'),
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$clipPath('url(#a)'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$transform('matrix(1.1722 0 0 1.1426 -2 0)'),
						_1: {ctor: '[]'}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#006400'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 0h840v420H0z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#ffd200'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M0 60h840v300H0z'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#d40000'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M0 120h840v180H0z'),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$path,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M0 180h840v60H0z'),
										_1: {ctor: '[]'}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$svg$Svg$path,
										{
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$strokeWidth('20'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$stroke('#000'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$d('M0 0v420l280-210z'),
													_1: {ctor: '[]'}
												}
											}
										},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$svg$Svg$path,
											{
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$d('M0 0v420l280-210z'),
													_1: {ctor: '[]'}
												}
											},
											{ctor: '[]'}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$svg$Svg$path,
												{
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$fill('#d40000'),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$d('M107 104l55 171L17 170h179L51 275z'),
														_1: {ctor: '[]'}
													}
												},
												{ctor: '[]'}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$svg$Svg$path,
													{
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$id('b'),
														_1: {
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$d('M125 218c-3 0-5 2-5 5 0 5 5 7 8 4s1-9-3-9zm0 1c2 0 4 2 4 4 0 3-4 5-6 4-3-2-3-6 0-8a4 4 0 0 1 2 0z'),
															_1: {ctor: '[]'}
														}
													},
													{ctor: '[]'}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$svg$Svg$use,
														{
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#b'),
															_1: {
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$height('100%'),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$svg$Svg_Attributes$width('100%'),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$svg$Svg_Attributes$y('-1'),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$svg$Svg_Attributes$x('-20'),
																			_1: {ctor: '[]'}
																		}
																	}
																}
															}
														},
														{ctor: '[]'}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$svg$Svg$path,
															{
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$d('M88 145a2 2 0 0 0-2 2 2 2 0 1 0 4 0 2 2 0 0 0-2-2zm0 1a1 1 0 0 1 1 1 1 1 0 1 1-2 0 1 1 0 0 1 1-1z'),
																_1: {ctor: '[]'}
															},
															{ctor: '[]'}),
														_1: {ctor: '[]'}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$zmFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$width('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$height('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$clipPath,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M-171 0h683v512h-683z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$clipPath('url(#a)'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$transform('translate(160) scale(.9375)'),
							_1: {ctor: '[]'}
						}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#198a00'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M-256 0h768v512h-768V0z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#ef7d00'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M422 184h90v328h-90V184z'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M332 184h90v328h-90V184z'),
									_1: {ctor: '[]'}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$path,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill('#de2010'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$d('M240 184h92v328h-92V184z'),
											_1: {ctor: '[]'}
										}
									},
									{ctor: '[]'}),
								_1: {ctor: '[]'}
							}
						}
					}
				}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$yeFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$g,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v473H0z'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#f10600'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v157H0z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 323h640v157H0z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}
				}
			}),
		_1: {ctor: '[]'}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$wfFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$g,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#00267f'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 0h213v480H0z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#f31830'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M427 0h213v480H427z'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}
				}
			}),
		_1: {ctor: '[]'}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$ytFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$g,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#00267f'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 0h213v480H0z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#f31830'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M427 0h213v480H427z'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}
				}
			}),
		_1: {ctor: '[]'}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$wsFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$g,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('red'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#00006b'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 0h314v157H0z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M163 144l-13-8-12 9 4-15-11-10 14-1 5-14 6 15h14l-11 10zm-2-99l-10-7-10 7 3-12-9-8 11-1 5-11 4 11 12 1-9 8zm-44 35l-10-6-10 6 3-11-9-8 11-1 5-11 4 11 12 1-9 8zm88-8l-9-6-9 7 2-12-8-7h11l4-11 4 11h11l-9 8zm-26 27l-6-4-7 4 2-8-5-5h7l3-7 2 7h8l-6 5z'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}
				}
			}),
		_1: {ctor: '[]'}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$kmFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$clipPath,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 0h683v512H0z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$clipPath('url(#a)'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$transform('scale(.9375)'),
							_1: {ctor: '[]'}
						}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#ff0'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 0h769v128H0z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M0 128h769v128H0z'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#be0027'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M0 256h769v128H0z'),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$path,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill('#3b5aa3'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$d('M0 384h769v128H0z'),
											_1: {ctor: '[]'}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$svg$Svg$path,
										{
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$d('M0 0v512l382-255L0 0z'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$fill('#239e46'),
												_1: {ctor: '[]'}
											}
										},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$svg$Svg$path,
											{
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$d('M157 141c-85-4-124 64-124 116 0 62 59 113 113 110-29-14-65-52-65-110 0-52 29-98 76-116z'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
													_1: {ctor: '[]'}
												}
											},
											{ctor: '[]'}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$svg$Svg$path,
												{
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$d('M156 197l-12-9-15 4 6-14-9-12h15l9-12 4 14 15 5-13 9zm0 52l-12-9-15 4 5-14-8-12h15l9-12 4 15 14 4-12 9zm0 53l-12-10-15 5 6-14-9-13 15 1 9-13 4 15 15 5-13 8zm0 53l-12-10-15 5 5-14-8-13 15 1 9-12 4 14 14 5-12 9z'),
														_1: {ctor: '[]'}
													}
												},
												{ctor: '[]'}),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}
				}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$vuFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$clipPath,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 0h683v512H0z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$clipPath('url(#a)'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$transform('scale(.9375)'),
						_1: {ctor: '[]'}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$g,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M0 0l347 219h421v74H347L0 512V0z'),
									_1: {ctor: '[]'}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$path,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M0 494l355-227h413v-22H355L0 18v33l333 205L0 461v33z'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$fill('#ff0'),
											_1: {ctor: '[]'}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$svg$Svg$path,
										{
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$d('M0 512l355-227h413v227H0z'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$fill('#40aa40'),
												_1: {ctor: '[]'}
											}
										},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$svg$Svg$path,
											{
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$d('M0 0l355 227h413V0H0z'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$fill('#ce0000'),
													_1: {ctor: '[]'}
												}
											},
											{ctor: '[]'}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$svg$Svg$path,
												{
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$d('M96 267l3-2 1-3 2-1h6l-1-2h-4c0-2 0-2 2-3h3l3-1v-1h-4l-1-3 3 1 4-1c1-1 2-2 1-3l-2-1c-1-1-3 1-3-1h2l4-1c1 0 1 1 2-2-1-1-3 1-4 1l-2-2c0-1 1-2 2-1l4-1 2-1c1-2 0-1-1-2h-4l1-2 3 1 4-2-3-1-2-1c1-2 0-2 2-1 1 0 2 0 1-2l-1-1-3-1h-2v3l1 1h-2l-2-3 1 4 1 2h-2l-2-2v6c2 1 2 1 1 2l-2 1-2-4h-1v3l1 3v2l-2-1-2-3c-1 0-2 0-1 2v5l3 1-2 1h-2l-2-2h-1l1 3 2 3v3l-3-1-1-4h-2l1 2v4l3 1v2l-2 3v3z'),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$fill('#ff0'),
														_1: {ctor: '[]'}
													}
												},
												{ctor: '[]'}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$svg$Svg$path,
													{
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$d('M121 268v-4c-1 0-2-1-2-3-1-1-2-2 0-2l1-4 1-2c-2-2-2-1-3 0l-2 4-1-3 1-4v-3h-1l-2 4c-1 1-1 1-2-1l1-2 1-5c0-1 0-2-2-2l-2 2-1 3v-3l1-4c0-2 1-1-1-3-2 0-1 3-1 4l-2 2c-2-1-2-2-1-3l1-4v-3c-2-2-1-1-3 0l-1 4-1-1 2-3-1-5-1 3-3 1v-2c0-1 1-3-1-2l-1 1-3 3-1 2 3 1 2-1-1 3h-3c1 0 3 2 4 1l2-1c1 2 0 2-1 3l-3 1 2 1c1 1 3 2 4 1s1-1 2 1v2h-4l-1 2h6c2-1 2-1 2 1l-1 3h-4l1 2c2 1 3 2 5 1l2-2v3l-1 2-3 1v1c1 1 2 2 4 1l3-2c1-1 1 0 3 1l-3 3h-3c-1 0-2 0-1 2h2c1 1 3 2 4 1l2-3 2 2 1 2c1 2 1 2 3 2z'),
														_1: {
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$fill('#ff0'),
															_1: {ctor: '[]'}
														}
													},
													{ctor: '[]'}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$svg$Svg$path,
														{
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$d('M98 315v-11c47 0 59-32 59-53 0-22-17-43-47-43-35 0-47 21-47 43 0 21 17 37 35 37 23 0 29-5 47-27-6 27-35 38-47 38-23 0-47-16-47-48 0-27 18-54 59-54 35 0 58 27 58 54 0 37-29 64-70 64z'),
															_1: {
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$fill('#ff0'),
																_1: {ctor: '[]'}
															}
														},
														{ctor: '[]'}),
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}
						}),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$vnFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$clipPath,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M-85 0h682v512H-85z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$clipPath('url(#a)'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$transform('translate(80) scale(.9375)'),
							_1: {ctor: '[]'}
						}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#ec0015'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M-128 0h768v512h-768z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M350 381l-90-67-89 68 33-110-89-68 110-1 34-109 35 109h110l-88 69 34 109z'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#ff0'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}
				}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$vgFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$version('1'),
					_1: {ctor: '[]'}
				}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$clipPath,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$clipPath('url(#a)'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#006'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 0h960v480H0z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#006'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M0 0h350v175H0z'),
										_1: {ctor: '[]'}
									}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M0 0v20l311 155h39v-20L39 0H0zm350 0v20L39 175H0v-20L311 0h39z'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$path,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M146 0v175h58V0h-58zM0 58v59h350V58H0z'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
											_1: {ctor: '[]'}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$svg$Svg$path,
										{
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$d('M0 70v35h350V70H0zM158 0v175h35V0h-35zM0 175l117-58h26L26 175H0zM0 0l117 58H91L0 13V0zm207 58L324 0h26L233 58h-26zm143 117l-117-58h26l91 45v13z'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$fill('#c00'),
												_1: {ctor: '[]'}
											}
										},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$svg$Svg$path,
											{
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$d('M384 160l209-1v188c0 24-41 49-105 81-66-35-105-55-105-82l1-186z'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$stroke('#000'),
														_1: {
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$strokeWidth('2'),
															_1: {
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$fill('#006129'),
																_1: {ctor: '[]'}
															}
														}
													}
												}
											},
											{ctor: '[]'}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$svg$Svg$path,
												{
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$d('M487 430c59-2 97-44 96-44 0-1 8-12 14-11 7 2 16 21 28 25 5 9-2 17-4 19-3 2-14 6-15 0-2-7-5-6-5-6s-52 51-113 49c-62 1-113-49-113-49l-5 5s-5 5-7 5-13-7-14-14 7-12 7-12 18-13 20-21c4-4 11 3 11 3s48 54 100 51z'),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
														_1: {
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$stroke('#000'),
															_1: {
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$strokeWidth('2'),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$svg$Svg_Attributes$fill('#f7c600'),
																	_1: {ctor: '[]'}
																}
															}
														}
													}
												},
												{ctor: '[]'}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$svg$Svg$path,
													{
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$d('M354 398s5-1 7 1l14 14'),
														_1: {
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$stroke('#000'),
															_1: {
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$strokeWidth('2'),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$svg$Svg_Attributes$fill('none'),
																	_1: {ctor: '[]'}
																}
															}
														}
													},
													{ctor: '[]'}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$svg$Svg$path,
														{
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$d('M366 404l-5 4s12 2 9 10m250-20s-2-1-6 2c-4 2-13 13-13 13'),
															_1: {
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$stroke('#000'),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$svg$Svg_Attributes$strokeWidth('2'),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$svg$Svg_Attributes$fill('none'),
																		_1: {ctor: '[]'}
																	}
																}
															}
														},
														{ctor: '[]'}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$svg$Svg$path,
															{
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$d('M609 404l6 4s-11 1-9 11'),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$svg$Svg_Attributes$stroke('#000'),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$svg$Svg_Attributes$strokeWidth('2'),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$svg$Svg_Attributes$fill('none'),
																			_1: {ctor: '[]'}
																		}
																	}
																}
															},
															{ctor: '[]'}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$svg$Svg$path,
																{
																	ctor: '::',
																	_0: _elm_lang$svg$Svg_Attributes$d('M381 413c72 59 144 60 213 0'),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$svg$Svg_Attributes$fill('none'),
																		_1: {ctor: '[]'}
																	}
																},
																{ctor: '[]'}),
															_1: {ctor: '[]'}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$viFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$width('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$height('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$version('1'),
					_1: {ctor: '[]'}
				}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$path,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '[]'}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fill('#f4c53d'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$stroke('#010002'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$strokeWidth('2'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$strokeMiterlimit('10'),
								_1: {ctor: '[]'}
							}
						}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M364 140c-7 8 0 29-18 19-19-3-51 6-61-9 2-20 33-37 20-55-13-30 42-24 41 2 3 16 0 35 18 43z'),
							_1: {ctor: '[]'}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('none'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M311 92c-5 1-9-6-6-10'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$g,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#f4c53d'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$stroke('#010002'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$strokeWidth('2'),
									_1: {ctor: '[]'}
								}
							}
						}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M60 74c-12 35 31 55 52 76 30 24 67 41 92 71 24 33 70 8 59-30 5-28-40-23-20-53-24-32-70-27-104-41-27-7-53-14-79-24zm199 165c-24 19-23 63-51 71-37 0-17 51 9 23 16-26 53-25 62-56 7-18-12-26-20-38z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$strokeMiterlimit('10'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M314 370c-25 16-63-32-55-56 13-33 65-15 60 17 0 13-5 25-5 39z'),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$path,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M334 312c-8 32-31-30-1-7l1 4v3z'),
										_1: {ctor: '[]'}
									},
									{ctor: '[]'}),
								_1: {ctor: '[]'}
							}
						}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$use,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$width('100%'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$height('100%'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$stroke('#010002'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$strokeWidth('10'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$transform('matrix(-1 0 0 1 647 0)'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#a'),
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$stroke('#010002'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$strokeWidth('2'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$d('M325 310c36-18 67-52 73-93-1-5 4-16-2-16H251c-1 35 18 69 45 90 9 7 19 14 29 19z'),
											_1: {ctor: '[]'}
										}
									}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#162667'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$stroke('#010002'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$strokeWidth('2'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$strokeMiterlimit('10'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$d('M399 146c-28 21-62-7-91 6-16 11-55-16-57 7v42h148v-55z'),
													_1: {ctor: '[]'}
												}
											}
										}
									}
								},
								{ctor: '[]'}),
							_1: {ctor: '[]'}
						}
					}
				}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$veFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$version('1'),
					_1: {ctor: '[]'}
				}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$path,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fill('#cf142b'),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '[]'}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v320H0z'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#00247d'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v160H0z'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#fc0'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {ctor: '[]'}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$vcFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$g,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#f4f100'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#199a00'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M490 0h150v480H490z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#0058aa'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M0 0h150v480H0z'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M259 130l-46 71 45 75 43-74-42-72zm122 0l-47 71 45 75 44-74-42-72zm-62 97l-46 72 45 74 43-74-42-72z'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill('#199a00'),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {ctor: '[]'}
						}
					}
				}
			}),
		_1: {ctor: '[]'}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$vaFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$version('1'),
					_1: {ctor: '[]'}
				}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$g,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M320 0h320v480H320z'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#ffe000'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 0h320v480H0z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {ctor: '[]'}
				}
			}),
		_1: {ctor: '[]'}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$uzFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$path,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fill('#1eb53a'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M0 320h640v160H0z'),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '[]'}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fill('#0099b5'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v160H0z'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#ce1126'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M0 154h640v172H0z'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 163h640v154H0z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$circle,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$cx('134'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$cy('77'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$r('58'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
											_1: {ctor: '[]'}
										}
									}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$circle,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$cx('154'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$cy('77'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$r('58'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$fill('#0099b5'),
												_1: {ctor: '[]'}
											}
										}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$g,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$transform('matrix(1.92 0 0 1.92 261 123)'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
											_1: {ctor: '[]'}
										}
									},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$svg$Svg$g,
											{
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$id('e'),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: A2(
													_elm_lang$svg$Svg$g,
													{
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$id('d'),
														_1: {ctor: '[]'}
													},
													{
														ctor: '::',
														_0: A2(
															_elm_lang$svg$Svg$g,
															{
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$id('c'),
																_1: {ctor: '[]'}
															},
															{
																ctor: '::',
																_0: A2(
																	_elm_lang$svg$Svg$g,
																	{
																		ctor: '::',
																		_0: _elm_lang$svg$Svg_Attributes$id('b'),
																		_1: {ctor: '[]'}
																	},
																	{
																		ctor: '::',
																		_0: A2(
																			_elm_lang$svg$Svg$path,
																			{
																				ctor: '::',
																				_0: _elm_lang$svg$Svg_Attributes$id('a'),
																				_1: {
																					ctor: '::',
																					_0: _elm_lang$svg$Svg_Attributes$d('M0-6l-2 6 3 1'),
																					_1: {ctor: '[]'}
																				}
																			},
																			{ctor: '[]'}),
																		_1: {
																			ctor: '::',
																			_0: A2(
																				_elm_lang$svg$Svg$use,
																				{
																					ctor: '::',
																					_0: _elm_lang$svg$Svg_Attributes$height('100%'),
																					_1: {
																						ctor: '::',
																						_0: _elm_lang$svg$Svg_Attributes$width('100%'),
																						_1: {
																							ctor: '::',
																							_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#a'),
																							_1: {
																								ctor: '::',
																								_0: _elm_lang$svg$Svg_Attributes$transform('scale(-1 1)'),
																								_1: {ctor: '[]'}
																							}
																						}
																					}
																				},
																				{ctor: '[]'}),
																			_1: {ctor: '[]'}
																		}
																	}),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_elm_lang$svg$Svg$use,
																		{
																			ctor: '::',
																			_0: _elm_lang$svg$Svg_Attributes$height('100%'),
																			_1: {
																				ctor: '::',
																				_0: _elm_lang$svg$Svg_Attributes$width('100%'),
																				_1: {
																					ctor: '::',
																					_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#b'),
																					_1: {
																						ctor: '::',
																						_0: _elm_lang$svg$Svg_Attributes$transform('rotate(72)'),
																						_1: {ctor: '[]'}
																					}
																				}
																			}
																		},
																		{ctor: '[]'}),
																	_1: {ctor: '[]'}
																}
															}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$svg$Svg$use,
																{
																	ctor: '::',
																	_0: _elm_lang$svg$Svg_Attributes$height('100%'),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$svg$Svg_Attributes$width('100%'),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#b'),
																			_1: {
																				ctor: '::',
																				_0: _elm_lang$svg$Svg_Attributes$transform('rotate(-72)'),
																				_1: {ctor: '[]'}
																			}
																		}
																	}
																},
																{ctor: '[]'}),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$svg$Svg$use,
																	{
																		ctor: '::',
																		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
																			_1: {
																				ctor: '::',
																				_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#c'),
																				_1: {
																					ctor: '::',
																					_0: _elm_lang$svg$Svg_Attributes$transform('rotate(144)'),
																					_1: {ctor: '[]'}
																				}
																			}
																		}
																	},
																	{ctor: '[]'}),
																_1: {ctor: '[]'}
															}
														}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$svg$Svg$use,
														{
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$height('100%'),
															_1: {
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$width('100%'),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#d'),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$svg$Svg_Attributes$y('-24'),
																		_1: {ctor: '[]'}
																	}
																}
															}
														},
														{ctor: '[]'}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$svg$Svg$use,
															{
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$height('100%'),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$svg$Svg_Attributes$width('100%'),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#d'),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$svg$Svg_Attributes$y('-48'),
																			_1: {ctor: '[]'}
																		}
																	}
																}
															},
															{ctor: '[]'}),
														_1: {ctor: '[]'}
													}
												}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$svg$Svg$use,
												{
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$height('100%'),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$width('100%'),
														_1: {
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#e'),
															_1: {
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$x('24'),
																_1: {ctor: '[]'}
															}
														}
													}
												},
												{ctor: '[]'}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$svg$Svg$use,
													{
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$height('100%'),
														_1: {
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$width('100%'),
															_1: {
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#e'),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$svg$Svg_Attributes$x('48'),
																	_1: {ctor: '[]'}
																}
															}
														}
													},
													{ctor: '[]'}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$svg$Svg$use,
														{
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$height('100%'),
															_1: {
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$width('100%'),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#d'),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$svg$Svg_Attributes$x('-48'),
																		_1: {ctor: '[]'}
																	}
																}
															}
														},
														{ctor: '[]'}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$svg$Svg$use,
															{
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$height('100%'),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$svg$Svg_Attributes$width('100%'),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#d'),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$svg$Svg_Attributes$x('-24'),
																			_1: {ctor: '[]'}
																		}
																	}
																}
															},
															{ctor: '[]'}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$svg$Svg$use,
																{
																	ctor: '::',
																	_0: _elm_lang$svg$Svg_Attributes$height('100%'),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$svg$Svg_Attributes$width('100%'),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#d'),
																			_1: {
																				ctor: '::',
																				_0: _elm_lang$svg$Svg_Attributes$x('-24'),
																				_1: {
																					ctor: '::',
																					_0: _elm_lang$svg$Svg_Attributes$y('-24'),
																					_1: {ctor: '[]'}
																				}
																			}
																		}
																	}
																},
																{ctor: '[]'}),
															_1: {ctor: '[]'}
														}
													}
												}
											}
										}
									}),
								_1: {ctor: '[]'}
							}
						}
					}
				}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$uyFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$version('1'),
					_1: {ctor: '[]'}
				}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$path,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '[]'}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fill('#0038a8'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M266 53h374v54H266zm0 107h374v53H266zM0 267h640v53H0zm0 106h640v54H0z'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$usFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$g,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M0 0h912v37H0zm0 74h912v37H0zm0 74h912v37H0zm0 74h912v36H0zm0 73h912v37H0zm0 74h912v37H0zm0 74h912v37H0z'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#bd3d44'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M0 37h912v37H0zm0 74h912v37H0zm0 74h912v37H0zm0 73h912v37H0zm0 74h912v37H0zm0 74h912v37H0z'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#192f5d'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M0 0h365v258H0z'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M30 11l4 10h10l-8 7 3 10-9-7-8 7 3-10-9-7h11zm61 0l4 10h10l-8 7 3 10-9-7-8 7 3-10-9-7h11zm61 0l3 10h11l-9 7 4 10-9-7-9 7 4-10-9-7h11zm61 0l3 10h11l-9 7 3 10-8-7-9 7 3-10-8-7h10zm61 0l3 10h11l-9 7 3 10-8-7-9 7 3-10-8-7h10zm60 0l4 10h10l-8 7 3 10-9-7-8 7 3-10-9-7h11zM61 37l3 10h11l-9 6 3 11-8-7-9 7 3-11-8-6h10zm61 0l3 10h11l-9 6 3 11-8-7-9 7 3-11-8-6h10zm60 0l4 10h10l-8 6 3 11-9-7-8 7 3-11-9-6h11zm61 0l4 10h10l-8 6 3 11-9-7-8 7 3-11-9-6h11zm61 0l3 10h11l-9 6 4 11-9-7-9 7 4-11-9-6h11zM30 63l4 10h10l-8 6 3 10-9-6-8 6 3-10-9-6h11zm61 0l4 10h10l-8 6 3 10-9-6-8 6 3-10-9-6h11zm61 0l3 10h11l-9 6 4 10-9-6-9 6 4-10-9-6h11zm61 0l3 10h11l-9 6 3 10-8-6-9 6 3-10-8-6h10zm61 0l3 10h11l-9 6 3 10-8-6-9 6 3-10-8-6h10zm60 0l4 10h10l-8 6 3 10-9-6-8 6 3-10-9-6h11zM61 89l3 10h11l-9 6 3 10-8-6-9 6 3-10-8-6h10zm61 0l3 10h11l-9 6 3 10-8-6-9 6 3-10-8-6h10zm60 0l4 10h10l-8 6 3 10-9-6-8 6 3-10-9-6h11zm61 0l4 10h10l-8 6 3 10-9-6-8 6 3-10-9-6h11zm61 0l3 10h11l-9 6 4 10-9-6-9 6 4-10-9-6h11zM30 114l4 11h10l-8 6 3 10-9-6-8 6 3-10-9-6h11zm61 0l4 11h10l-8 6 3 10-9-6-8 6 3-10-9-6h11zm61 0l3 11h11l-9 6 4 10-9-6-9 6 4-10-9-6h11zm61 0l3 11h11l-9 6 3 10-8-6-9 6 3-10-8-6h10zm61 0l3 11h11l-9 6 3 10-8-6-9 6 3-10-8-6h10zm60 0l4 11h10l-8 6 3 10-9-6-8 6 3-10-9-6h11zM61 140l3 11h11l-9 6 3 10-8-6-9 6 3-10-8-6h10zm61 0l3 11h11l-9 6 3 10-8-6-9 6 3-10-8-6h10zm60 0l4 11h10l-8 6 3 10-9-6-8 6 3-10-9-6h11zm61 0l4 11h10l-8 6 3 10-9-6-8 6 3-10-9-6h11zm61 0l3 11h11l-9 6 4 10-9-6-9 6 4-10-9-6h11zM30 166l4 10h10l-8 7 3 10-9-6-8 6 3-10-9-7h11zm61 0l4 10h10l-8 7 3 10-9-6-8 6 3-10-9-7h11zm61 0l3 10h11l-9 7 4 10-9-6-9 6 4-10-9-7h11zm61 0l3 10h11l-9 7 3 10-8-6-9 6 3-10-8-7h10zm61 0l3 10h11l-9 7 3 10-8-6-9 6 3-10-8-7h10zm60 0l4 10h10l-8 7 3 10-9-6-8 6 3-10-9-7h11zM61 192l3 10h11l-9 7 3 10-8-7-9 7 3-10-8-7h10zm61 0l3 10h11l-9 7 3 10-8-7-9 7 3-10-8-7h10zm60 0l4 10h10l-8 7 3 10-9-7-8 7 3-10-9-7h11zm61 0l4 10h10l-8 7 3 10-9-7-8 7 3-10-9-7h11zm61 0l3 10h11l-9 7 4 10-9-7-9 7 4-10-9-7h11zM30 218l4 10h10l-8 6 3 11-9-7-8 7 3-11-9-6h11zm61 0l4 10h10l-8 6 3 11-9-7-8 7 3-11-9-6h11zm61 0l3 10h11l-9 6 4 11-9-7-9 7 4-11-9-6h11zm61 0l3 10h11l-9 6 3 11-8-7-9 7 3-11-8-6h10zm61 0l3 10h11l-9 6 3 11-8-7-9 7 3-11-8-6h10zm60 0l4 10h10l-8 6 3 11-9-7-8 7 3-11-9-6h11z'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {ctor: '[]'}
						}
					}
				}
			}),
		_1: {ctor: '[]'}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$umFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$clipPath,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 0h683v512H0z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$clipPath('url(#a)'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$transform('scale(.9375)'),
							_1: {ctor: '[]'}
						}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M0 0h973v39H0zm0 79h973v39H0zm0 79h973v39H0zm0 78h973v40H0zm0 79h973v39H0zm0 79h973v39H0zm0 79h973v39H0z'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#bd3d44'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 39h973v40H0zm0 79h973v40H0zm0 79h973v39H0zm0 79h973v39H0zm0 78h973v40H0zm0 79h973v40H0z'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#192f5d'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M0 0h389v276H0z'),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$path,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M32 12l4 11h11l-9 6 4 11-10-6-9 6 4-11-10-6h12zm65 0l4 11h11l-9 6 4 11-10-6-9 6 4-11-10-6h12zm65 0l4 11h11l-9 6 3 11-9-6-9 6 3-11-9-6h12zm65 0l4 11h11l-9 6 3 11-9-6-9 6 3-11-9-6h11zm65 0l3 11h12l-9 6 3 11-9-6-9 6 3-11-9-6h11zm65 0l3 11h12l-10 6 4 11-9-6-10 6 4-11-9-6h11zM65 39l3 11h12l-9 7 3 11-9-7-9 7 3-11-9-7h11zm65 0l3 11h12l-10 7 4 11-9-7-10 7 4-11-9-7h11zm65 0l3 11h12l-10 7 4 11-9-7-10 7 4-11-9-7h11zm64 0l4 11h11l-9 7 4 11-10-7-9 7 4-11-10-7h12zm65 0l4 11h11l-9 7 4 11-10-7-9 7 4-11-10-7h12zM32 67l4 11h11l-9 7 4 10-10-6-9 6 4-10-10-7h12zm65 0l4 11h11l-9 7 4 10-10-6-9 6 4-10-10-7h12zm65 0l4 11h11l-9 7 3 10-9-6-9 6 3-10-9-7h12zm65 0l4 11h11l-9 7 3 10-9-6-9 6 3-10-9-7h11zm65 0l3 11h12l-9 7 3 10-9-6-9 6 3-10-9-7h11zm65 0l3 11h12l-10 7 4 10-9-6-10 6 4-10-9-7h11zM65 95l3 10h12l-9 7 3 11-9-7-9 7 3-11-9-7h11zm65 0l3 10h12l-10 7 4 11-9-7-10 7 4-11-9-7h11zm65 0l3 10h12l-10 7 4 11-9-7-10 7 4-11-9-7h11zm64 0l4 10h11l-9 7 4 11-10-7-9 7 4-11-10-7h12zm65 0l4 10h11l-9 7 4 11-10-7-9 7 4-11-10-7h12zM32 122l4 11h11l-9 7 4 11-10-7-9 7 4-11-10-7h12zm65 0l4 11h11l-9 7 4 11-10-7-9 7 4-11-10-7h12zm65 0l4 11h11l-9 7 3 11-9-7-9 7 3-11-9-7h12zm65 0l4 11h11l-9 7 3 11-9-7-9 7 3-11-9-7h11zm65 0l3 11h12l-9 7 3 11-9-7-9 7 3-11-9-7h11zm65 0l3 11h12l-10 7 4 11-9-7-10 7 4-11-9-7h11zM65 150l3 11h12l-9 6 3 11-9-7-9 7 3-11-9-6h11zm65 0l3 11h12l-10 6 4 11-9-7-10 7 4-11-9-6h11zm65 0l3 11h12l-10 6 4 11-9-7-10 7 4-11-9-6h11zm64 0l4 11h11l-9 6 4 11-10-7-9 7 4-11-10-6h12zm65 0l4 11h11l-9 6 4 11-10-7-9 7 4-11-10-6h12zM32 177l4 11h11l-9 7 4 11-10-7-9 7 4-11-10-7h12zm65 0l4 11h11l-9 7 4 11-10-7-9 7 4-11-10-7h12zm65 0l4 11h11l-9 7 3 11-9-7-9 7 3-11-9-7h12zm65 0l4 11h11l-9 7 3 11-9-7-9 7 3-11-9-7h11zm65 0l3 11h12l-9 7 3 11-9-7-9 7 3-11-9-7h11zm65 0l3 11h12l-10 7 4 11-9-7-10 7 4-11-9-7h11zM65 205l3 11h12l-9 6 3 11-9-6-9 6 3-11-9-6h11zm65 0l3 11h12l-10 6 4 11-9-6-10 6 4-11-9-6h11zm65 0l3 11h12l-10 6 4 11-9-6-10 6 4-11-9-6h11zm64 0l4 11h11l-9 6 4 11-10-6-9 6 4-11-10-6h12zm65 0l4 11h11l-9 6 4 11-10-6-9 6 4-11-10-6h12zM32 232l4 11h11l-9 7 4 11-10-7-9 7 4-11-10-7h12zm65 0l4 11h11l-9 7 4 11-10-7-9 7 4-11-10-7h12zm65 0l4 11h11l-9 7 3 11-9-7-9 7 3-11-9-7h12zm65 0l4 11h11l-9 7 3 11-9-7-9 7 3-11-9-7h11zm65 0l3 11h12l-9 7 3 11-9-7-9 7 3-11-9-7h11zm65 0l3 11h12l-10 7 4 11-9-7-10 7 4-11-9-7h11z'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
											_1: {ctor: '[]'}
										}
									},
									{ctor: '[]'}),
								_1: {ctor: '[]'}
							}
						}
					}
				}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$ugFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$version('1'),
					_1: {ctor: '[]'}
				}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$clipPath,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M-85 0h682v512H-85z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$clipPath('url(#a)'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$transform('translate(80) scale(.9375)'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
							_1: {ctor: '[]'}
						}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#ffe700'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M-128 341h768v86h-768z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M-128 256h768v85h-768z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#de3908'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M-128 171h768v85h-768z'),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$path,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill('#ffe700'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$d('M-128 85h768v86h-768z'),
											_1: {ctor: '[]'}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$svg$Svg$path,
										{
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$d('M-128 0h768v85h-768z'),
											_1: {ctor: '[]'}
										},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$svg$Svg$path,
											{
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$fill('#de3908'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$d('M-128 427h768v85h-768z'),
													_1: {ctor: '[]'}
												}
											},
											{ctor: '[]'}),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$uaFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$g,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#ffd500'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#005bbb'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v240H0z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {ctor: '[]'}
				}
			}),
		_1: {ctor: '[]'}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$tzFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$clipPath,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M10 0h160v120H10z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$clipPath('url(#a)'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$transform('matrix(4 0 0 4 -40 0)'),
							_1: {ctor: '[]'}
						}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#09f'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 0h180v120H0z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 0h180L0 120V0z'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#090'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M0 120h40l140-95V0h-40L0 95v25z'),
									_1: {ctor: '[]'}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$path,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M0 91L137 0h14L0 100v-9zm29 29L180 20v9L43 120H29z'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$fill('#ff0'),
											_1: {ctor: '[]'}
										}
									},
									{ctor: '[]'}),
								_1: {ctor: '[]'}
							}
						}
					}
				}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$twFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$clipPath,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 0h683v512H0z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$clipPath('url(#a)'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$transform('scale(.9375)'),
							_1: {ctor: '[]'}
						}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#de2110'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 0h768v512H0z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#08399c'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M0 0h386v256H0z'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M282 179l-47-10 10 47-36-32-15 46-15-46-36 32 9-47-47 10 32-36-46-15 46-15-32-36 47 10-10-47 36 32 15-46 15 45 36-32-10 47 48-10-32 37 46 14-46 16z'),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$path,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill('#005387'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$d('M238 175l-14 8-15 8h-34l-14-9-15-8-8-15-9-15 1-16v-17l9-15 8-14 15-8 15-9 16 1 17-1 15 9 15 9 7 15 9 14v34l-9 14z'),
											_1: {ctor: '[]'}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$svg$Svg$path,
										{
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$d('M245 128a52 52 0 1 1-104 0 52 52 0 0 1 104 0z'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
												_1: {ctor: '[]'}
											}
										},
										{ctor: '[]'}),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$tvFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$version('1'),
					_1: {ctor: '[]'}
				}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$clipPath,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$clipPath('url(#a)'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$g,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$transform('matrix(.64508 0 0 .92059 0 23)'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#009fca'),
									_1: {ctor: '[]'}
								}
							}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M506-20h486v516H506z'),
									_1: {ctor: '[]'}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$rect,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$ry('0'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$height('521'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$width('523'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$y('-25'),
													_1: {ctor: '[]'}
												}
											}
										}
									},
									{ctor: '[]'}),
								_1: {ctor: '[]'}
							}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M0 0h396v197H0z'),
										_1: {ctor: '[]'}
									}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M0 0v15l94 48 36 1L0 0z'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill('#c00'),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$path,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M40 0l115 60V0H40z'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$fill('#006'),
											_1: {ctor: '[]'}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$svg$Svg$path,
										{
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$fill('#c00'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$d('M170 0v76H0v44h170v76h53v-76h170V76H223V0h-53z'),
												_1: {ctor: '[]'}
											}
										},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$svg$Svg$path,
											{
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$d('M238 0v56L350 0H238z'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$fill('#006'),
													_1: {ctor: '[]'}
												}
											},
											{ctor: '[]'}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$svg$Svg$path,
												{
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$d('M241 63l32-1L395 0l-32 1-122 62z'),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$fill('#c00'),
														_1: {ctor: '[]'}
													}
												},
												{ctor: '[]'}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$svg$Svg$path,
													{
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$d('M0 133v42l79-42H0z'),
														_1: {
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$fill('#006'),
															_1: {ctor: '[]'}
														}
													},
													{ctor: '[]'}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$svg$Svg$path,
														{
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$d('M303 134h-33l123 62-1-14-89-48zM31 197l115-61h-30L0 197'),
															_1: {
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$fill('#c00'),
																_1: {ctor: '[]'}
															}
														},
														{ctor: '[]'}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$svg$Svg$path,
															{
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$d('M395 17l-94 47h92v69h-78l78 42 1 22-42-1-114-56v57h-83v-57L49 197H0v196h786V0H395M0 22v41l83 1L0 22z'),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$svg$Svg_Attributes$fill('#006'),
																	_1: {ctor: '[]'}
																}
															},
															{ctor: '[]'}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$svg$Svg$g,
																{
																	ctor: '::',
																	_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$svg$Svg_Attributes$transform('scale(.79241 .79977)'),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$svg$Svg_Attributes$fill('#009fca'),
																			_1: {ctor: '[]'}
																		}
																	}
																},
																{
																	ctor: '::',
																	_0: A2(
																		_elm_lang$svg$Svg$path,
																		{
																			ctor: '::',
																			_0: _elm_lang$svg$Svg_Attributes$d('M496 0h496v496H496z'),
																			_1: {ctor: '[]'}
																		},
																		{ctor: '[]'}),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			_elm_lang$svg$Svg$rect,
																			{
																				ctor: '::',
																				_0: _elm_lang$svg$Svg_Attributes$rx('0'),
																				_1: {
																					ctor: '::',
																					_0: _elm_lang$svg$Svg_Attributes$ry('0'),
																					_1: {
																						ctor: '::',
																						_0: _elm_lang$svg$Svg_Attributes$height('251'),
																						_1: {
																							ctor: '::',
																							_0: _elm_lang$svg$Svg_Attributes$width('526'),
																							_1: {
																								ctor: '::',
																								_0: _elm_lang$svg$Svg_Attributes$y('245'),
																								_1: {
																									ctor: '::',
																									_0: _elm_lang$svg$Svg_Attributes$x('-2'),
																									_1: {ctor: '[]'}
																								}
																							}
																						}
																					}
																				}
																			},
																			{ctor: '[]'}),
																		_1: {ctor: '[]'}
																	}
																}),
															_1: {ctor: '[]'}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$ttFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$path,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '[]'}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M464 480L0 1v479h464zM176 0l464 479V0H176z'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#e00000'),
							_1: {ctor: '[]'}
						}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M28 0h118l469 480H492L28 0z'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {ctor: '[]'}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$trFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$g,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#f31930'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M407 247c0 67-55 120-122 120s-122-53-122-120 55-119 122-119 122 53 122 119z'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M413 247a97 97 0 0 1-195 0c0-53 44-95 98-95s97 42 97 95z'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#f31830'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M431 191l-1 45-42 11 41 15-1 40 27-32 40 14-23-34 28-34-43 12-26-37z'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {ctor: '[]'}
						}
					}
				}
			}),
		_1: {ctor: '[]'}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$tnFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$clipPath,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M-85 0h682v512H-85z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$clipPath('url(#a)'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$transform('translate(80) scale(.9375)'),
							_1: {ctor: '[]'}
						}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#e70013'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M-128 0h768v512h-768z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M386 256a129 129 0 1 1-258 0 129 129 0 0 1 258 0z'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M257 341a86 86 0 0 1 0-171c11 0 25 3 34 10-63 2-78 55-78 76s10 70 78 77c-8 5-23 8-34 8z'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill('#e70013'),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$path,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill('#e70013'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$d('M332 292l-39-14-25 32 1-41-39-15 40-11 2-42 23 35 40-11-26 32z'),
											_1: {ctor: '[]'}
										}
									},
									{ctor: '[]'}),
								_1: {ctor: '[]'}
							}
						}
					}
				}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$toFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$g,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#c10000'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 0h250v200H0z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$g,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#c10000'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$path,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M103 31h40v140h-40z'),
										_1: {ctor: '[]'}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$svg$Svg$path,
										{
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$d('M193 81v40H53V81z'),
											_1: {ctor: '[]'}
										},
										{ctor: '[]'}),
									_1: {ctor: '[]'}
								}
							}),
						_1: {ctor: '[]'}
					}
				}
			}),
		_1: {ctor: '[]'}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$tmFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$version('1'),
					_1: {ctor: '[]'}
				}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$clipPath,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M43 0h682v512H43z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$clipPath('url(#a)'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$transform('translate(-40) scale(.9375)'),
							_1: {ctor: '[]'}
						}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#28ae66'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 0h768v512H0z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M263 137c28 14 61 0 73-18 13-17 14-47-7-73 33 27 40 58 24 84-22 29-71 28-90 7z'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#ca3745'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M48 0h164v512H48z'),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$path,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M116 505s6-11 21-14 17 7 26 7c8 0 22-7 22-7s-14 13-24 13-14-7-25-6c-10 1-20 7-20 7z'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$fill('#faae29'),
											_1: {ctor: '[]'}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$svg$Svg$path,
										{
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$d('M145 505s-6-11-21-14-17 7-26 7c-8 0-22-7-22-7s14 13 24 13 14-7 25-6c10 1 20 7 20 7z'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$fill('#faae29'),
												_1: {ctor: '[]'}
											}
										},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$svg$Svg$g,
											{
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$fill('#faae29'),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: A2(
													_elm_lang$svg$Svg$path,
													{
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$d('M96 488c-1-3-4-15-3-17 3-1 10 12 9 23-4 2-20-1-20-5 2-4 10-3 14-1z'),
														_1: {ctor: '[]'}
													},
													{ctor: '[]'}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$svg$Svg$path,
														{
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$d('M87 477c-1-3-2-16 0-17 2 0 7 14 5 25-5 1-20-7-19-10 2-4 10 0 14 2z'),
															_1: {ctor: '[]'}
														},
														{ctor: '[]'}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$svg$Svg$path,
															{
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$d('M79 465c0-3-1-16 1-16 3 0 7 15 4 25-5 0-19-10-18-13 2-4 10 2 13 4z'),
																_1: {ctor: '[]'}
															},
															{ctor: '[]'}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$svg$Svg$path,
																{
																	ctor: '::',
																	_0: _elm_lang$svg$Svg_Attributes$d('M73 453c0-3 1-16 3-16 3 1 5 16 1 25-5-1-18-13-17-16 3-3 10 3 13 7z'),
																	_1: {ctor: '[]'}
																},
																{ctor: '[]'}),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$svg$Svg$path,
																	{
																		ctor: '::',
																		_0: _elm_lang$svg$Svg_Attributes$d('M69 440c0-3 3-16 5-15s3 16-3 24c-4-1-15-16-14-18 3-3 9 5 12 9z'),
																		_1: {ctor: '[]'}
																	},
																	{ctor: '[]'}),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_elm_lang$svg$Svg$path,
																		{
																			ctor: '::',
																			_0: _elm_lang$svg$Svg_Attributes$d('M70 425c0 13-3 13-7 4-2-4-2-19 0-20 2 0 7 11 7 16z'),
																			_1: {ctor: '[]'}
																		},
																		{ctor: '[]'}),
																	_1: {ctor: '[]'}
																}
															}
														}
													}
												}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$svg$Svg$g,
												{
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$fill('#faae29'),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: A2(
														_elm_lang$svg$Svg$path,
														{
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$d('M164 489c1-3 5-15 3-16-3-1-10 11-9 22 5 2 20-1 20-4-1-5-10-3-14-2z'),
															_1: {ctor: '[]'}
														},
														{ctor: '[]'}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$svg$Svg$path,
															{
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$d('M173 478c1-3 3-15 1-16-3 0-8 13-6 24 5 1 20-7 19-10-2-4-10 0-14 2z'),
																_1: {ctor: '[]'}
															},
															{ctor: '[]'}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$svg$Svg$path,
																{
																	ctor: '::',
																	_0: _elm_lang$svg$Svg_Attributes$d('M181 467c1-3 1-16-1-17-3 0-7 15-3 25 5 0 18-10 17-12-2-4-10 1-13 4z'),
																	_1: {ctor: '[]'}
																},
																{ctor: '[]'}),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$svg$Svg$path,
																	{
																		ctor: '::',
																		_0: _elm_lang$svg$Svg_Attributes$d('M187 454c0-3-1-16-3-16-3 1-5 16 0 25 5 0 17-13 16-16-3-3-10 4-13 7z'),
																		_1: {ctor: '[]'}
																	},
																	{ctor: '[]'}),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_elm_lang$svg$Svg$path,
																		{
																			ctor: '::',
																			_0: _elm_lang$svg$Svg_Attributes$d('M191 441c0-3-3-15-5-15-2 1-2 16 3 25 5-2 16-17 14-19-3-3-9 5-12 9z'),
																			_1: {ctor: '[]'}
																		},
																		{ctor: '[]'}),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			_elm_lang$svg$Svg$path,
																			{
																				ctor: '::',
																				_0: _elm_lang$svg$Svg_Attributes$d('M190 426c0 13 3 14 7 4 2-4 2-19 0-19s-7 10-7 15z'),
																				_1: {ctor: '[]'}
																			},
																			{ctor: '[]'}),
																		_1: {ctor: '[]'}
																	}
																}
															}
														}
													}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$svg$Svg$path,
													{
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$d('M111 362l-38 21v34l38 20h38l37-20v-34l-37-21h-38z'),
														_1: {
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$fill('#28ae66'),
															_1: {ctor: '[]'}
														}
													},
													{ctor: '[]'}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$svg$Svg$path,
														{
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$d('M130 435v-35h55v16l-37 19h-18zm0-71v36H75v-17l37-19h18z'),
															_1: {
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$fill('#faae29'),
																_1: {ctor: '[]'}
															}
														},
														{ctor: '[]'}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$svg$Svg$path,
															{
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$d('M130 364v36h55v-17l-37-19h-18zm0 71v-35H75v16l37 19h18z'),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
																	_1: {ctor: '[]'}
																}
															},
															{ctor: '[]'}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$svg$Svg$path,
																{
																	ctor: '::',
																	_0: _elm_lang$svg$Svg_Attributes$d('M101 414H79l22 10v-10zm-26 2v-16h35v13h7l9 4v12l-5 5h7v-17h2v18h-18l-37-19z'),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$svg$Svg_Attributes$fill('#faae29'),
																		_1: {ctor: '[]'}
																	}
																},
																{ctor: '[]'}),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$svg$Svg$path,
																	{
																		ctor: '::',
																		_0: _elm_lang$svg$Svg_Attributes$d('M159 414h22l-22 10v-10zm26 2v-16h-35v13h-7l-10 4v12l6 5h-7v-17h-2v18h18l37-19z'),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
																			_1: {ctor: '[]'}
																		}
																	},
																	{ctor: '[]'}),
																_1: {ctor: '[]'}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$tkFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$path,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fill('#00247d'),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '[]'}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M108 355c-7 0 63-37 121-85 76-62 240-161 289-177 5-2-11 8-13 12-51 61-10 176 54 233 20 15 19 16 55 17v4l-506-4zm-4 6s-5 4-5 6c0 3 5 7 5 7l499 6 9-6-13-8-495-5z'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#fed100'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M107 109l-4 12 10-7 11 7-4-12 10-7h-13l-4-13-4 13H96zm78 57l8-6h-10l-4-10-3 10h-10l8 6-3 11 8-7 9 7zM40 181l-4-13-4 13H19l10 7-4 12 11-7 10 7-4-12 11-7zm78 122l-5-14-4 14H94l12 9-5 14 12-9 12 9-4-14 12-9z'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {ctor: '[]'}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$tlFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$clipPath,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 0h683v512H0z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$clipPath('url(#a)'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$transform('scale(.9375)'),
							_1: {ctor: '[]'}
						}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#cb000f'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 0h1031v512H0z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 0c3 0 512 257 512 257L0 512V0z'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#f8c00c'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M0 0c2 0 341 257 341 257L0 512V0z'),
									_1: {ctor: '[]'}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$path,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M188 298l-61-13-31 53-5-60-61-14 55-24-3-60 40 44 55-26-28 54 39 46z'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
											_1: {ctor: '[]'}
										}
									},
									{ctor: '[]'}),
								_1: {ctor: '[]'}
							}
						}
					}
				}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$tjFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$path,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fill('#060'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '[]'}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v343H0z'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#c00'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v137H0z'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M301 234a9 9 0 0 1 16 4v34h6v-34a9 9 0 0 1 16-4 20 20 0 1 0-38 0'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#f8c300'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M305 225a14 14 0 0 1 15 6 14 14 0 0 1 15-6 15 15 0 0 0-30 0'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M317 258a26 26 0 0 1-44 17 27 27 0 0 1-41 12c3 25 40 20 43-4 12 20 37 14 45-11z'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$id('a'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$fill('#f8c300'),
											_1: {ctor: '[]'}
										}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$use,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$transform('matrix(-1 0 0 1 640 0)'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#a'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$width('100%'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$height('100%'),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$fill('#f8c300'),
														_1: {ctor: '[]'}
													}
												}
											}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$svg$Svg$path,
										{
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$d('M292 303c-5 11-16 13-25 4l8-4c-1-3 0-7 2-9 3 1 6 4 7 8 5-1 8 1 8 1z'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$id('b'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$fill('#f8c300'),
													_1: {ctor: '[]'}
												}
											}
										},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$svg$Svg$use,
											{
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$transform('rotate(9 320 551)'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#b'),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$width('100%'),
														_1: {
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$height('100%'),
															_1: {
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$fill('#f8c300'),
																_1: {ctor: '[]'}
															}
														}
													}
												}
											},
											{ctor: '[]'}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$svg$Svg$use,
												{
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$transform('rotate(19 320 551)'),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#b'),
														_1: {
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$width('100%'),
															_1: {
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$height('100%'),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$svg$Svg_Attributes$fill('#f8c300'),
																	_1: {ctor: '[]'}
																}
															}
														}
													}
												},
												{ctor: '[]'}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$svg$Svg$path,
													{
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$d('M253 328a233 233 0 0 1 134 0'),
														_1: {
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$fill('none'),
															_1: {
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$stroke('#f8c300'),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$svg$Svg_Attributes$strokeWidth('11'),
																	_1: {ctor: '[]'}
																}
															}
														}
													},
													{ctor: '[]'}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$svg$Svg$g,
														{
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$transform('translate(320 165) scale(.68571)'),
															_1: {
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$fill('#f8c300'),
																_1: {ctor: '[]'}
															}
														},
														{
															ctor: '::',
															_0: A2(
																_elm_lang$svg$Svg$path,
																{
																	ctor: '::',
																	_0: _elm_lang$svg$Svg_Attributes$id('c'),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$svg$Svg_Attributes$transform('scale(.00005)'),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$svg$Svg_Attributes$d('M301930 415571l-790463-574305h977066l-790463 574305L0-513674z'),
																			_1: {ctor: '[]'}
																		}
																	}
																},
																{ctor: '[]'}),
															_1: {ctor: '[]'}
														}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$svg$Svg$g,
															{
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$id('d'),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$svg$Svg_Attributes$transform('translate(320 261) scale(.68571)'),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$svg$Svg_Attributes$fill('#f8c300'),
																		_1: {ctor: '[]'}
																	}
																}
															},
															{
																ctor: '::',
																_0: A2(
																	_elm_lang$svg$Svg$use,
																	{
																		ctor: '::',
																		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
																			_1: {
																				ctor: '::',
																				_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#c'),
																				_1: {
																					ctor: '::',
																					_0: _elm_lang$svg$Svg_Attributes$transform('translate(-70 -121)'),
																					_1: {ctor: '[]'}
																				}
																			}
																		}
																	},
																	{ctor: '[]'}),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_elm_lang$svg$Svg$use,
																		{
																			ctor: '::',
																			_0: _elm_lang$svg$Svg_Attributes$height('100%'),
																			_1: {
																				ctor: '::',
																				_0: _elm_lang$svg$Svg_Attributes$width('100%'),
																				_1: {
																					ctor: '::',
																					_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#c'),
																					_1: {
																						ctor: '::',
																						_0: _elm_lang$svg$Svg_Attributes$transform('translate(-121 -70)'),
																						_1: {ctor: '[]'}
																					}
																				}
																			}
																		},
																		{ctor: '[]'}),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			_elm_lang$svg$Svg$use,
																			{
																				ctor: '::',
																				_0: _elm_lang$svg$Svg_Attributes$height('100%'),
																				_1: {
																					ctor: '::',
																					_0: _elm_lang$svg$Svg_Attributes$width('100%'),
																					_1: {
																						ctor: '::',
																						_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#c'),
																						_1: {
																							ctor: '::',
																							_0: _elm_lang$svg$Svg_Attributes$transform('translate(-140)'),
																							_1: {ctor: '[]'}
																						}
																					}
																				}
																			},
																			{ctor: '[]'}),
																		_1: {ctor: '[]'}
																	}
																}
															}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$svg$Svg$use,
																{
																	ctor: '::',
																	_0: _elm_lang$svg$Svg_Attributes$height('100%'),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$svg$Svg_Attributes$width('100%'),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#d'),
																			_1: {
																				ctor: '::',
																				_0: _elm_lang$svg$Svg_Attributes$transform('matrix(-1 0 0 1 640 0)'),
																				_1: {
																					ctor: '::',
																					_0: _elm_lang$svg$Svg_Attributes$fill('#f8c300'),
																					_1: {ctor: '[]'}
																				}
																			}
																		}
																	}
																},
																{ctor: '[]'}),
															_1: {ctor: '[]'}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$thFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$g,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#001b9a'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 163h640v160H0z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#e70000'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v83H0zm0 400h640v80H0z'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}
				}
			}),
		_1: {ctor: '[]'}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$tgFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$clipPath,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 0h683v512H0z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$clipPath('url(#a)'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$transform('scale(.9375)'),
							_1: {ctor: '[]'}
						}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#ffe300'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 0h768v512H0z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#118600'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M0 208h768v103H0zM0 0h768v103H0z'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#d80000'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M0 0h307v311H0z'),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$path,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M134 128l19-53 17 53h58l-46 35 21 58c-1-2-50-36-50-36l-49 34 19-56-44-34 55-1z'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
											_1: {ctor: '[]'}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$svg$Svg$path,
										{
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$fill('#118600'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$d('M0 409h768v103H0z'),
												_1: {ctor: '[]'}
											}
										},
										{ctor: '[]'}),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$tfFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M0-21l12 38-32-23h40l-32 23z'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$id('a'),
								_1: {ctor: '[]'}
							}
						}
					},
					{ctor: '[]'}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fill('#002395'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M0 0h293v197H0z'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#002395'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 0h96v192H0z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#ed2939'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M192 0h96v192h-96z'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M426 220l15 24h44v86l-33-52-44 71h22l22-41 47 84 47-84 23 41h21l-44-71-33 52v-47h20l14-24h-34v-15h44l15-24H426zm52 105h-48v16h48zm91 0h-48v16h48z'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$use,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$height('100%'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$width('100%'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#a'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$x('416'),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$y('362'),
														_1: {
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$transform('scale(1.2)'),
															_1: {ctor: '[]'}
														}
													}
												}
											}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$svg$Svg$use,
										{
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$height('100%'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$width('100%'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#a'),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$x('371'),
														_1: {
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$y('328'),
															_1: {
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$transform('scale(1.2)'),
																_1: {ctor: '[]'}
															}
														}
													}
												}
											}
										},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$svg$Svg$use,
											{
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$height('100%'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$width('100%'),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#a'),
														_1: {
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$x('461'),
															_1: {
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$y('328'),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$svg$Svg_Attributes$transform('scale(1.2)'),
																	_1: {ctor: '[]'}
																}
															}
														}
													}
												}
											},
											{ctor: '[]'}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$svg$Svg$use,
												{
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$height('100%'),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$width('100%'),
														_1: {
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#a'),
															_1: {
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$x('333'),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$svg$Svg_Attributes$y('227'),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$svg$Svg_Attributes$transform('scale(1.2)'),
																		_1: {ctor: '[]'}
																	}
																}
															}
														}
													}
												},
												{ctor: '[]'}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$svg$Svg$use,
													{
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$height('100%'),
														_1: {
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$width('100%'),
															_1: {
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#a'),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$svg$Svg_Attributes$x('499'),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$svg$Svg_Attributes$y('227'),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$svg$Svg_Attributes$transform('scale(1.2)'),
																			_1: {ctor: '[]'}
																		}
																	}
																}
															}
														}
													},
													{ctor: '[]'}),
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$tdFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$g,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#000067'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M0 0h214v480H0z'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('red'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M426 0h214v480H426z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#ff0'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M214 0h212v480H214z'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}
				}
			}),
		_1: {ctor: '[]'}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$tcFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$version('1'),
					_1: {ctor: '[]'}
				}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$path,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$d('M640 480V0H0v480h640z'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fill('#006'),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '[]'}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#006'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M0 0h374v232H0z'),
							_1: {ctor: '[]'}
						}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M0 0v26l332 206h42v-26L42 0H0zm374 0v26L42 232H0v-26L332 0h42z'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M156 0v232h62V0h-62zM0 77v78h374V77H0z'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 93v46h374V93H0zM168 0v232h38V0h-38zM0 232l125-77h27L28 232H0zM0 0l125 77H97L0 17V0zm221 77L346 0h28L249 77h-28zm153 155l-125-77h28l97 60v17z'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#c00'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M613 212v80c0 66-26 126-103 163-76-37-102-97-102-163v-80h205z'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$path,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M606 221v74c0 61-24 117-96 151-71-34-95-90-95-151v-74h191z'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$fill('#fdc300'),
											_1: {ctor: '[]'}
										}
									},
									{ctor: '[]'}),
								_1: {ctor: '[]'}
							}
						}
					}
				}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$szFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$version('1'),
					_1: {ctor: '[]'}
				}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$clipPath,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M-85 0h682v512H-85z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$clipPath('url(#a)'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$transform('translate(80) scale(.9375)'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
							_1: {ctor: '[]'}
						}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#3e5eb9'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M-128 0h768v512h-768z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#ffd900'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M-128 91h768v330h-768z'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#b10c0c'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M-128 128h768v256h-768z'),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {ctor: '[]'}
						}
					}
				}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$syFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$rect,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$y('160'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$width('100%'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$height('160'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$ry('0'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$rx('0'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				}
			},
			{ctor: '[]'}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$rect,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$y('320'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$width('100%'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$height('160'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$ry('0'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$rx('0'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v160H0z'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('red'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
								_1: {ctor: '[]'}
							}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M202 281l-29-21-29 21 11-34-29-21h36l11-35 11 34h35l-28 22 11 34zm308 0l-29-21-29 21 11-34-29-21h35l11-35 12 34h35l-28 22 11 34z'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#090'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
									_1: {ctor: '[]'}
								}
							}
						},
						{ctor: '[]'}),
					_1: {ctor: '[]'}
				}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$sxFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$version('1'),
					_1: {ctor: '[]'}
				}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$clipPath,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 0h683v512H0z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$clipPath('url(#a)'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$transform('scale(.9375)'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
							_1: {ctor: '[]'}
						}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M0 0h768v256H341L0 0z'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#ed2939'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 512h768V256H341L0 512z'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#002395'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M0 0l341 256L0 512V0z'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {ctor: '[]'}
						}
					}
				}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$sdFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$clipPath,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 0h683v512H0z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$clipPath('url(#a)'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$transform('scale(.9375)'),
							_1: {ctor: '[]'}
						}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M0 341h1024v171H0z'),
							_1: {ctor: '[]'}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M0 171h1024v170H0z'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('red'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M0 0h1025v171H0z'),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$path,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M0 0v512l341-256L0 0z'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$fill('#009a00'),
											_1: {ctor: '[]'}
										}
									},
									{ctor: '[]'}),
								_1: {ctor: '[]'}
							}
						}
					}
				}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$svFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$version('1'),
					_1: {ctor: '[]'}
				}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$path,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fill('#0f47af'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '[]'}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M0 160h640v160H0z'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$stFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$path,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fill('#12ad2b'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '[]'}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fill('#ffce00'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M0 137h640v206H0z'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M0 0v480l240-240'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#d21034'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$g,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$id('c'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$transform('translate(352 240) scale(.34286)'),
								_1: {ctor: '[]'}
							}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$g,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$id('b'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: A2(
										_elm_lang$svg$Svg$path,
										{
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$id('a'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$d('M0-200V0h100'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$transform('rotate(18 0 -200)'),
													_1: {ctor: '[]'}
												}
											}
										},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$svg$Svg$use,
											{
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$height('100%'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$width('100%'),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#a'),
														_1: {
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$transform('scale(-1 1)'),
															_1: {ctor: '[]'}
														}
													}
												}
											},
											{ctor: '[]'}),
										_1: {ctor: '[]'}
									}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$use,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$height('100%'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$width('100%'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#b'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$transform('rotate(72)'),
													_1: {ctor: '[]'}
												}
											}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$svg$Svg$use,
										{
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$height('100%'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$width('100%'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#b'),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$transform('rotate(144)'),
														_1: {ctor: '[]'}
													}
												}
											}
										},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$svg$Svg$use,
											{
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$height('100%'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$width('100%'),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#b'),
														_1: {
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$transform('rotate(-144)'),
															_1: {ctor: '[]'}
														}
													}
												}
											},
											{ctor: '[]'}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$svg$Svg$use,
												{
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$height('100%'),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$width('100%'),
														_1: {
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#b'),
															_1: {
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$transform('rotate(-72)'),
																_1: {ctor: '[]'}
															}
														}
													}
												},
												{ctor: '[]'}),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$use,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$height('100%'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$width('100%'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#c'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$x('700'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$transform('translate(-523)'),
												_1: {ctor: '[]'}
											}
										}
									}
								}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}
				}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$srFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$path,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fill('#377e3f'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '[]'}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M0 96h640v288H0z'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#b40a2d'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M0 144h640v192H0z'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M320 153l56 174-147-107h182L264 327z'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#ecc81d'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {ctor: '[]'}
				}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$soFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$clipPath,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M-85 0h682v512H-85z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$clipPath('url(#a)'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$transform('translate(80) scale(.9375)'),
							_1: {ctor: '[]'}
						}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#40a6ff'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M-128 0h768v512h-768z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M336 381l-82-53-82 54 30-88-82-54 102-1 31-87 32 87h102l-82 55 31 87z'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}
				}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$ssFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$path,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$d('M0 336h640v144H0z'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fill('#078930'),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '[]'}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M0 144h640v192H0z'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v144H0z'),
						_1: {ctor: '[]'}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M0 168h640v144H0z'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#da121a'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 0l416 240L0 480z'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#0f47af'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M201 195L62 240l139 45-86-118v146z'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill('#fcdd09'),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {ctor: '[]'}
						}
					}
				}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$snFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$g,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#0b7226'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M0 0h213v480H0z'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#ff0'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M213 0h214v480H213z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#bc0000'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M427 0h213v480H427z'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}
				}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fill('#0b7226'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M342 219h72l-57 43 21 70-57-44-56 42 20-68-56-43h70l22-71z'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$smFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$version('1'),
					_1: {ctor: '[]'}
				}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$g,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#19b6ef'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M0 240h640v240H0z'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v240H0z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {ctor: '[]'}
				}
			}),
		_1: {ctor: '[]'}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$slFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$g,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#0000cd'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M0 320h640v160H0z'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 161h640v159H0z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#00cd00'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v161H0z'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}
				}
			}),
		_1: {ctor: '[]'}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$skFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$path,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fill('#ee1c25'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '[]'}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fill('#0b4ea2'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v320H0z'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v160H0z'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M233 371c-43-21-105-62-105-143 0-82 4-119 4-119h202s4 37 4 119c0 81-62 122-105 143z'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M233 360c-39-19-96-57-96-131 0-75 4-109 4-109h184s4 34 4 109c0 74-57 112-96 131z'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#ee1c25'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M241 209c11 0 32 1 51-6l-1 15 1 14c-17-6-39-6-51-5v41h-16v-41c-12-1-34-1-51 5l1-14-1-15c19 7 40 6 51 6v-26c-10 0-24 1-40 6v-29c16 5 30 6 40 6-1-17-6-37-6-37h28s-5 20-6 37c10 0 24-1 40-6v29c-16-5-30-6-40-6v26z'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$path,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M233 263c-20 0-31 28-31 28s-5-13-22-13c-11 0-19 10-24 19 20 31 52 51 77 63 25-12 57-32 77-63-5-9-13-19-24-19-17 0-22 13-22 13s-11-28-31-28z'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$fill('#0b4ea2'),
											_1: {ctor: '[]'}
										}
									},
									{ctor: '[]'}),
								_1: {ctor: '[]'}
							}
						}
					}
				}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$siFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$clipPath,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M-15 0h683v512H-15z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$clipPath('url(#a)'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$transform('translate(14) scale(.9375)'),
							_1: {ctor: '[]'}
						}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M-62 0H962v512H-62z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#de2918'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M-62 341H962v171H-62z'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#08399c'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M-62 171H962v170H-62z'),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$path,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M228 93c-4 62-6 95-15 111-10 17-20 29-60 44-40-15-49-27-60-44-9-16-11-49-15-111l6-2 27-8c9-2 17-4 42-4s33 2 42 4l27 8 6 2z'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$fill('#de2918'),
											_1: {ctor: '[]'}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$svg$Svg$path,
										{
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$d('M223 91c-4 61-7 90-12 103-10 23-25 36-58 48-33-12-48-25-58-48-5-13-8-41-11-103 11-4 20-7 27-8 9-2 17-4 42-5 25 1 33 3 42 5l28 8z'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$fill('#08399c'),
												_1: {ctor: '[]'}
											}
										},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$svg$Svg$path,
											{
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$d('M153 110l2 4h6l-4 3 4 3-6 1-2 3-2-3-6-1 4-3-4-2 6-2 2-3z'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$fill('#fc0'),
													_1: {ctor: '[]'}
												}
											},
											{ctor: '[]'}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$svg$Svg$path,
												{
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$d('M208 180l-4-3-2-5-6-5-3-4-5-5-3-5-3-2-1-2-5 4-3 5-3 3-4-3-3-5-10-18-10 18-3 5-4 3-3-3-3-5-5-4-1 2-3 2-3 5-5 5-3 4-6 5-2 5-4 3c2 17 12 30 18 36 7 6 20 15 37 20 16-5 30-14 37-20 6-6 16-19 18-36z'),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
														_1: {ctor: '[]'}
													}
												},
												{ctor: '[]'}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$svg$Svg$path,
													{
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$d('M169 84l2 4 7 1-5 2 5 3-7 1-1 4-3-4-6-1 4-3-4-2 7-1 1-4zm-33 0l2 4 7 1-5 2 5 3-6 1-2 4-3-4-6-1 5-3-5-2 7-1 1-4z'),
														_1: {
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$fill('#fc0'),
															_1: {ctor: '[]'}
														}
													},
													{ctor: '[]'}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$svg$Svg$path,
														{
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$d('M200 203h-15l-8-5-9 1-9 3-6 1-6-1-9-3-9-1-8 5h-15l-3-6 11 1h7l8-4h10l8 4h13l8-4h9l8 4h7l11-1-3 6zm-87 10l8-1 8-4h9l9 4 6 1 6-1 9-4h9l8 4 8 1 5-6-1-1-5 2-7-1-8-4h-9l-9 4-6 1-6-1-9-4h-9l-8 4-7 1-5-1 4 6z'),
															_1: {
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$fill('#08399c'),
																_1: {ctor: '[]'}
															}
														},
														{ctor: '[]'}),
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}
						}
					}
				}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$sjFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$path,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fill('#ef2b2d'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '[]'}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M180 0h120v480H180z'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M0 180h640v120H0z'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#002868'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M210 0h60v480h-60z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#002868'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M0 210h640v60H0z'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}
				}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$shFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$version('1'),
					_1: {ctor: '[]'}
				}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$path,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$d('M640 480V0H0v480h640z'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fill('#006'),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '[]'}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M0 73h76L0 27V0h43l107 65V0h60v65L316 0h44v27l-76 46h76v74h-76l76 46v27h-44l-106-65v65h-60v-65L43 220H0v-27l76-46H0V73z'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#ce1126'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M332 0L212 73h28L360 0h-28zm28 220l-120-73h29l91 56v17zM120 73L0 0v18l91 55h29zm0 74L0 220h29l120-73h-29z'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#ce1126'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 89h163V0h35v89h162v43H198v88h-35v-88H0V89z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M400 641c0 16-3 34-24 42-21-8-24-26-24-42h48z'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#8fc5ff'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$transform('matrix(4.4862 0 0 4.4867 -1191 -2609)'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$stroke('#fff'),
											_1: {ctor: '[]'}
										}
									}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M376 683c9-4 15-9 19-16h-2l-23-3c-2-1-10 1-13 2 3 7 9 13 19 17z'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill('#366cc9'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$transform('matrix(4.4862 0 0 4.4867 -1191 -2609)'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$stroke('#000'),
												_1: {ctor: '[]'}
											}
										}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$path,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M400 641v-18c-8-3-19-4-24-4s-16 1-24 4v18h48z'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$transform('matrix(4.4862 0 0 4.4867 -1191 -2609)'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$stroke('#fff'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$fill('#ff0'),
													_1: {ctor: '[]'}
												}
											}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$svg$Svg$path,
										{
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$d('M494 210h-2l-3 1-3 2 1 2 1 1c-1 0-1 1 1 2h3v3l3 1 7 1v-1l-3-1v-3c1-1 2-1 1-3l-2-3c-2 0-2-2-3-3l-1 1z'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$fill('#ff0'),
												_1: {ctor: '[]'}
											}
										},
										{ctor: '[]'}),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$sgFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$clipPath,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$clipPath('url(#a)'),
						_1: {ctor: '[]'}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M-20 0h720v480H-20z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#df0000'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M-20 0h720v240H-20z'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M146 40a84 84 0 0 0 1 165 86 86 0 1 1-1-165z'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$path,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$d('M133 110l5 15-13-9-13 9 5-15-13-9h16l5-16 5 15 16 1zm18 52l4 15-12-9-13 9 4-15-12-9h15l5-16 5 16h16zm58 0l5 15-13-9-13 9 5-15-13-10h16l5-15 5 15h16zm17-52l5 15-13-9-13 9 5-15-13-9h16l5-16 5 16h16zm-46-34l5 15-13-9-13 9 5-15-13-10h16l5-15 5 15h16z'),
											_1: {ctor: '[]'}
										}
									},
									{ctor: '[]'}),
								_1: {ctor: '[]'}
							}
						}
					}
				}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$seFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$clipPath,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M-53 0h682v512H-53z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$clipPath('url(#a)'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$transform('translate(50) scale(.9375)'),
						_1: {ctor: '[]'}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$g,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#006aa7'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M-121 0h256v205h-256zm0 307h256v205h-256z'),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$path,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill('#fecc00'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$d('M-121 205h256v102h-256z'),
											_1: {ctor: '[]'}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$svg$Svg$path,
										{
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$fill('#fecc00'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$d('M134 0h102v512H134z'),
												_1: {ctor: '[]'}
											}
										},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$svg$Svg$path,
											{
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$fill('#fecc00'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$d('M233 205h461v102H233z'),
													_1: {ctor: '[]'}
												}
											},
											{ctor: '[]'}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$svg$Svg$path,
												{
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$fill('#006aa7'),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$d('M236 307h461v205H236zm0-307h461v205H236z'),
														_1: {ctor: '[]'}
													}
												},
												{ctor: '[]'}),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$scFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$clipPath,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 0h683v512H0z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$clipPath('url(#a)'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$transform('scale(.9375)'),
							_1: {ctor: '[]'}
						}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('red'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 0h992v512H0z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 512l992-171v171H0z'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#090'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M0 512l992-341v170L0 512z'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$path,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M0 512V0h331L0 512z'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$fill('#009'),
											_1: {ctor: '[]'}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$svg$Svg$path,
										{
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$d('M0 512L331 0h330L0 512z'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$fill('#ff0'),
												_1: {ctor: '[]'}
											}
										},
										{ctor: '[]'}),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$pnFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$version('1'),
					_1: {ctor: '[]'}
				}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$clipPath,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M-15-7h30V8h-30z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#00247d'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$g,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$clipPath('url(#a)'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$transform('translate(320 160) scale(21.33333)'),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$circle,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$r('20'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#00247d'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M-20-10l40 20m-40 0l40-20'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$stroke('#fff'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$strokeWidth('3'),
											_1: {ctor: '[]'}
										}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$path,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M-20-10l40 20m-40 0l40-20'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$stroke('#cf142b'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$strokeWidth('2'),
												_1: {ctor: '[]'}
											}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$svg$Svg$path,
										{
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$d('M0 0l20 10h-3L-3 0m3 0l20-10h3L3 0M0 0l-20 10h-3L-3 0m3 0l-20-10h3L3 0'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
												_1: {ctor: '[]'}
											}
										},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$svg$Svg$path,
											{
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$d('M-20 0h40M0-10v20'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$stroke('#fff'),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$strokeWidth('5'),
														_1: {ctor: '[]'}
													}
												}
											},
											{ctor: '[]'}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$svg$Svg$path,
												{
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$d('M-20 0h40M0-10v20'),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$stroke('#cf142b'),
														_1: {
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$strokeWidth('3'),
															_1: {ctor: '[]'}
														}
													}
												},
												{ctor: '[]'}),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$sbFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$clipPath,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 0h683v512H0z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$clipPath('url(#a)'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$transform('scale(.9375)'),
							_1: {ctor: '[]'}
						}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M0 507L987 0H0v507z'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#0000d6'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M1024 0L27 512h997V0z'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#006000'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M1024 0h-55L0 485v27h55l969-484V0z'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill('#fc0'),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$path,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$d('M71 9l12 35h39L91 65l11 34-31-21-31 21 12-34-31-21h39zm192 0l11 35h39l-31 21 12 34-31-21-32 21 12-34-31-21h39zm0 145l11 34h39l-31 21 12 35-31-22-32 22 12-35-31-21h39zm-95-72l11 35h39l-31 21 12 34-31-21-32 21 12-34-31-21h39zm-97 72l12 34h39l-31 21 11 35-31-22-31 22 12-35-31-21h39z'),
											_1: {ctor: '[]'}
										}
									},
									{ctor: '[]'}),
								_1: {ctor: '[]'}
							}
						}
					}
				}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$saFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$version('1'),
					_1: {ctor: '[]'}
				}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$clipPath,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M-85 0h682v512H-85z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$clipPath('url(#a)'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$transform('translate(80) scale(.9375)'),
							_1: {ctor: '[]'}
						}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#199d00'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M-128 0h768v512h-768z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M355 375l28 1c1 1 0 5-1 4h-8c0-3-7-2-7 0h-12v-5z'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#209000'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}
				}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$rwFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$path,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fill('#20603d'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '[]'}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fill('#fad201'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v360H0z'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#00a1de'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v240H0z'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$g,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$transform('translate(511 125) scale(.66667)'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$g,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$id('b'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: A2(
										_elm_lang$svg$Svg$path,
										{
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$id('a'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$d('M116 0L36 5l76 25-79-16 68 44-72-36 53 60-60-53 36 72-44-68 16 79L5 36l-5 80L-1-1z'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$fill('#e5be01'),
													_1: {ctor: '[]'}
												}
											}
										},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$svg$Svg$use,
											{
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$height('100%'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$width('100%'),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#a'),
														_1: {
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$transform('scale(1 -1)'),
															_1: {ctor: '[]'}
														}
													}
												}
											},
											{ctor: '[]'}),
										_1: {ctor: '[]'}
									}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$use,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$height('100%'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$width('100%'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#b'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$transform('scale(-1 1)'),
													_1: {ctor: '[]'}
												}
											}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$svg$Svg$circle,
										{
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$r('34'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$fill('#e5be01'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$stroke('#00a1de'),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$strokeWidth('3'),
														_1: {ctor: '[]'}
													}
												}
											}
										},
										{ctor: '[]'}),
									_1: {ctor: '[]'}
								}
							}
						}),
					_1: {ctor: '[]'}
				}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$ruFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$g,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#0039a6'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 160h640v320H0z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#d52b1e'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M0 320h640v160H0z'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}
				}
			}),
		_1: {ctor: '[]'}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$rsFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$version('1'),
					_1: {ctor: '[]'}
				}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$clipPath,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M60 0h1200v900H60z'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$transform('translate(-32) scale(.53333)'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$clipPath('url(#a)'),
						_1: {ctor: '[]'}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 0h1350v900H0z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#0c4076'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M0 0h1350v600H0z'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#c6363c'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M0 0h1350v300H0z'),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {ctor: '[]'}
						}
					}
				}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$roFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$g,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#00319c'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M0 0h213v480H0z'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#ffde00'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M213 0h214v480H213z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#de2110'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M427 0h213v480H427z'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}
				}
			}),
		_1: {ctor: '[]'}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$reFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$g,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#00267f'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 0h213v480H0z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#f31830'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M427 0h213v480H427z'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}
				}
			}),
		_1: {ctor: '[]'}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$qaFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$path,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fill('#8d1b3d'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '[]'}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M0 0v480h158l98-27-98-26 98-27-98-27 98-26-98-27 98-27-98-26 98-27-98-27 98-26-98-27 98-27-98-26 98-27-98-27 98-26-98-27H0z'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$pmFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$g,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#00267f'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 0h213v480H0z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#f31830'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M427 0h213v480H427z'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}
				}
			}),
		_1: {ctor: '[]'}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$pyFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$version('1'),
					_1: {ctor: '[]'}
				}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$path,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fill('#0038a8'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M0 320h640v160H0z'),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '[]'}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M0 160h640v160H0z'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#d52b1e'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v160H0z'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {ctor: '[]'}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$psFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$clipPath,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M-118 0h683v512h-683z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$clipPath('url(#a)'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$transform('translate(111) scale(.9375)'),
						_1: {ctor: '[]'}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$g,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M-246 0H778v171H-246z'),
									_1: {ctor: '[]'}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$path,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$d('M-246 171H778v170H-246z'),
											_1: {ctor: '[]'}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$svg$Svg$path,
										{
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$fill('#090'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$d('M-246 341H778v171H-246z'),
												_1: {ctor: '[]'}
											}
										},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$svg$Svg$path,
											{
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$d('M-246 512l512-256L-246 0v512z'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$fill('red'),
													_1: {ctor: '[]'}
												}
											},
											{ctor: '[]'}),
										_1: {ctor: '[]'}
									}
								}
							}
						}),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$pwFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$clipPath,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M-70 0h640v480H-70z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$clipPath('url(#a)'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$transform('translate(70)'),
							_1: {ctor: '[]'}
						}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#4aadd6'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M-173 0h846v480h-846z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M336 232a136 130 0 1 1-272 0 136 130 0 1 1 272 0z'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#ffde00'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}
				}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$prFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$clipPath,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M-37 0h682v512H-37z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$clipPath('url(#a)'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$transform('translate(35) scale(.9375)'),
							_1: {ctor: '[]'}
						}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#ed0000'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M-37 0h768v512H-37z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M-37 102h768v103H-37zm0 205h768v103H-37z'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M-37 0l440 256-440 255V0z'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill('#0050f0'),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$path,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M156 325l-47-35-47 36 17-58-47-36 59-1 18-58 18 58h58l-46 36 17 58z'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
											_1: {ctor: '[]'}
										}
									},
									{ctor: '[]'}),
								_1: {ctor: '[]'}
							}
						}
					}
				}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$ptFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$version('1'),
					_1: {ctor: '[]'}
				}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$path,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fill('red'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M256 0h384v480H256z'),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '[]'}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fill('#060'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M0 0h256v480H0z'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$plFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$g,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#e9e8e7'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M640 480H0V0h640z'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#d4213d'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M640 480H0V240h640z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {ctor: '[]'}
				}
			}),
		_1: {ctor: '[]'}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$pkFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$clipPath,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M-52 0h682v512H-52z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$clipPath('url(#a)'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$transform('translate(49) scale(.9375)'),
							_1: {ctor: '[]'}
						}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#0c590b'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M-95 0h768v512H-95z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M-95 0H98v512H-95z'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$g,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: A2(
										_elm_lang$svg$Svg$path,
										{
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$d('M404 225l-31-6-17 27-3-32-31-7 29-13-3-31 21 23 30-12-16 27 21 24z'),
											_1: {ctor: '[]'}
										},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$svg$Svg$path,
											{
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$d('M415 306c-27 61-100 88-161 59a122 122 0 0 1 12-226l-12 11a112 112 0 0 0 161 156z'),
												_1: {ctor: '[]'}
											},
											{ctor: '[]'}),
										_1: {ctor: '[]'}
									}
								}),
							_1: {ctor: '[]'}
						}
					}
				}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$phFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$path,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fill('#0038a8'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v240H0z'),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '[]'}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fill('#ce1126'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M0 240h640v240H0z'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M416 240L0 480V0'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$g,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$transform('translate(149 240) scale(5.33333)'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#fcd116'),
								_1: {ctor: '[]'}
							}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$circle,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$r('9'),
									_1: {ctor: '[]'}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$g,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$id('d'),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$svg$Svg$g,
											{
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$id('c'),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: A2(
													_elm_lang$svg$Svg$g,
													{
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$id('b'),
														_1: {ctor: '[]'}
													},
													{
														ctor: '::',
														_0: A2(
															_elm_lang$svg$Svg$path,
															{
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$d('M-1 0h1-1z'),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$svg$Svg_Attributes$transform('scale(19)'),
																	_1: {ctor: '[]'}
																}
															},
															{ctor: '[]'}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$svg$Svg$path,
																{
																	ctor: '::',
																	_0: _elm_lang$svg$Svg_Attributes$id('a'),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$svg$Svg_Attributes$d('M-1 0h1z'),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$svg$Svg_Attributes$transform('scale(19.2381)'),
																			_1: {ctor: '[]'}
																		}
																	}
																},
																{ctor: '[]'}),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$svg$Svg$use,
																	{
																		ctor: '::',
																		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
																			_1: {
																				ctor: '::',
																				_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#a'),
																				_1: {
																					ctor: '::',
																					_0: _elm_lang$svg$Svg_Attributes$transform('scale(1 -1)'),
																					_1: {ctor: '[]'}
																				}
																			}
																		}
																	},
																	{ctor: '[]'}),
																_1: {ctor: '[]'}
															}
														}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$svg$Svg$use,
														{
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$height('100%'),
															_1: {
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$width('100%'),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#b'),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$svg$Svg_Attributes$transform('rotate(45)'),
																		_1: {ctor: '[]'}
																	}
																}
															}
														},
														{ctor: '[]'}),
													_1: {ctor: '[]'}
												}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$svg$Svg$use,
												{
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$height('100%'),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$width('100%'),
														_1: {
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#c'),
															_1: {
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$transform('rotate(90)'),
																_1: {ctor: '[]'}
															}
														}
													}
												},
												{ctor: '[]'}),
											_1: {ctor: '[]'}
										}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$svg$Svg$use,
										{
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$height('100%'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$width('100%'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#d'),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$transform('scale(-1)'),
														_1: {ctor: '[]'}
													}
												}
											}
										},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$svg$Svg$g,
											{
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$transform('translate(-2)'),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: A2(
													_elm_lang$svg$Svg$g,
													{
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$id('f'),
														_1: {
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$transform('translate(38)'),
															_1: {ctor: '[]'}
														}
													},
													{
														ctor: '::',
														_0: A2(
															_elm_lang$svg$Svg$path,
															{
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$id('e'),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$svg$Svg_Attributes$d('M5 0L2 1v4l-3-3-3 1 2-3z'),
																	_1: {ctor: '[]'}
																}
															},
															{ctor: '[]'}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$svg$Svg$use,
																{
																	ctor: '::',
																	_0: _elm_lang$svg$Svg_Attributes$height('100%'),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$svg$Svg_Attributes$width('100%'),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#e'),
																			_1: {
																				ctor: '::',
																				_0: _elm_lang$svg$Svg_Attributes$transform('scale(1 -1)'),
																				_1: {ctor: '[]'}
																			}
																		}
																	}
																},
																{ctor: '[]'}),
															_1: {ctor: '[]'}
														}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$svg$Svg$use,
														{
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$height('100%'),
															_1: {
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$width('100%'),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#f'),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$svg$Svg_Attributes$transform('rotate(120)'),
																		_1: {ctor: '[]'}
																	}
																}
															}
														},
														{ctor: '[]'}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$svg$Svg$use,
															{
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$height('100%'),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$svg$Svg_Attributes$width('100%'),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#f'),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$svg$Svg_Attributes$transform('rotate(-120)'),
																			_1: {ctor: '[]'}
																		}
																	}
																}
															},
															{ctor: '[]'}),
														_1: {ctor: '[]'}
													}
												}
											}),
										_1: {ctor: '[]'}
									}
								}
							}
						}),
					_1: {ctor: '[]'}
				}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$pgFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$g,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M2 0L1 480h640L2 0z'),
						_1: {ctor: '[]'}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M641 480V0H1l640 480z'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('red'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {ctor: '[]'}
				}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M178 54h-4c-1-3-4-4-6-3h-12l7 3c2 5 8 6 8 6-1 9-9-1-16 4-5 3-5 6-8 12 0 2-4 6-4 6l6-1-2 3 7-1-2 1c2 1 8-1 8-1v2l8-3 3 2 1-4 4 1 1-4c6 8 8 16 19 18l-1-4 9 4 1-2c4 4 8 4 11 4l-2-5 2 1-3-8 3 1-4-6 1-1v-3c6 2 14 5 15 12 1 11-11 14-19 13 6 5 17 3 22-2l4-8c1 3 3 7 3 11-1 9-13 12-21 13 9 5 25-1 26-14 0-11-7-16-10-21l-1-5 3 1-2-4-4-10h2l-8-10 2-1-12-8 3-1c-6-3-13-1-19 3l1-3h-2v-3l2-3-3-1 2-5-3 1 1-5-4 1 2-4v-4c-7 1-8 2-12 8-6 11-4 16-3 27z'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$stroke('#fc0'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#fc0'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$transform('matrix(2.21989 0 0 2.21194 1 0)'),
								_1: {ctor: '[]'}
							}
						}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M216 70l10 6c-1-4-9-5-10-6z'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$stroke('red'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('red'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$transform('matrix(2.21989 0 0 2.21194 1 0)'),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M175 399l-14-9-19 9 4-16-14-15 16-1 10-19 6 16 21 4-13 10zm36-79l-6-3-7 4 1-8-5-4 7-2 3-6 3 6 8 1-5 5zm32-45l-14-7-14 8 2-16-12-11 16-3 7-14 7 14 16 2-11 11zm-66-63l-17-9-16 9 3-18-14-13 19-3 8-17 8 16 19 3-13 13zm-60 65l-17-10-17 10 4-19-15-13 20-2 7-18 8 18 20 2-15 13z'),
									_1: {ctor: '[]'}
								}
							}
						},
						{ctor: '[]'}),
					_1: {ctor: '[]'}
				}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$pfFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$version('1'),
					_1: {ctor: '[]'}
				}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$clipPath,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$clipPath('url(#a)'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M80 0h480v480H80z'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill('#de2010'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$d('M-40 360h720v120H-40zm0-360h720v120H-40z'),
											_1: {ctor: '[]'}
										}
									}
								},
								{ctor: '[]'}),
							_1: {ctor: '[]'}
						}
					}
				}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$peFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$version('1'),
					_1: {ctor: '[]'}
				}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$path,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fill('#d91023'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '[]'}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M213 0h214v480H213z'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$paFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$clipPath,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$clipPath('url(#a)'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M92 0h478v480H92z'),
										_1: {ctor: '[]'}
									}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill('#db0000'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$d('M323 4h358v221H323z'),
											_1: {ctor: '[]'}
										}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$path,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$fill('#0000ab'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$d('M3 225h320v255H3zm212-47l-42-30-42 30 16-48-42-30h52l15-48 17 48h51l-41 30 16 48z'),
												_1: {ctor: '[]'}
											}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$svg$Svg$path,
										{
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$d('M517 414l-43-28-42 28 16-45-42-28 52-1 16-45 17 45h52l-42 28 16 46z'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$fill('#d80000'),
													_1: {ctor: '[]'}
												}
											}
										},
										{ctor: '[]'}),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$nzFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$version('1'),
					_1: {ctor: '[]'}
				}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$clipPath,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 0h600v300H0z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$clipPath,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$id('b'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M0 0l300 150H0zm300 0h300L300 150zm0 150h300v150zm0 0v150H0z'),
									_1: {ctor: '[]'}
								},
								{ctor: '[]'}),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#00247d'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
							_1: {ctor: '[]'}
						}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$clipPath('url(#a)'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M0 0l600 300M0 300L600 0'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$transform('scale(.60681 .73139)'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$stroke('#fff'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$strokeWidth('60'),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$clipPath('url(#b)'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 0l600 300M0 300L600 0'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$transform('scale(.60681 .73139)'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$stroke('#cc142b'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$strokeWidth('40'),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$style('line-height:normal;text-indent:0;text-align:start;text-decoration-line:none;text-decoration-style:solid;text-decoration-color:#000;text-transform:none;block-progression:tb;isolation:auto;mix-blend-mode:normal'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$clipPath('url(#a)'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M152 0v79H0v61h152v79h60v-79h152V79H212V0z'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$color('#000'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$fontWeight('400'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$fontFamily('sans-serif'),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$overflow('visible'),
														_1: {
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
															_1: {ctor: '[]'}
														}
													}
												}
											}
										}
									}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$style('line-height:normal;text-indent:0;text-align:start;text-decoration-line:none;text-decoration-style:solid;text-decoration-color:#000;text-transform:none;block-progression:tb;isolation:auto;mix-blend-mode:normal'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M164 0v92H0v36h164v91h36v-91h164V92H200V0z'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$color('#000'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$fontWeight('400'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$fontFamily('sans-serif'),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$overflow('visible'),
														_1: {
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$fill('#cc142b'),
															_1: {ctor: '[]'}
														}
													}
												}
											}
										}
									}
								},
								{ctor: '[]'}),
							_1: {ctor: '[]'}
						}
					}
				}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$omFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$version('1'),
					_1: {ctor: '[]'}
				}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$clipPath,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$clipPath('url(#a)'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
						_1: {ctor: '[]'}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#ef2d29'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M-3-22h702v553H-3z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#009025'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M175 317h535v208H175z'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M175-35h564v190H175z'),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {ctor: '[]'}
						}
					}
				}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$nrFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$clipPath,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M-55 0h683v512H-55z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$clipPath('url(#a)'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$transform('translate(51) scale(.9375)'),
							_1: {ctor: '[]'}
						}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#002170'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M-140 0H884v512H-140z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#ffb20d'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M-140 234H884v44H-140z'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M162 438l-33-33-11 45-12-45-32 34 13-45-45 14 33-33-45-11 45-12-34-32 45 13-14-45 33 33 11-45 12 45 31-34-12 45 45-14-33 33 45 11-45 12 34 32-45-13z'),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {ctor: '[]'}
						}
					}
				}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$nuFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$clipPath,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 0h496v372H0z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$transform('scale(1.2902)'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$clipPath('url(#a)'),
						_1: {ctor: '[]'}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M0 0h500v248H0z'),
									_1: {ctor: '[]'}
								}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 0v19l119 61 45 1L0 0z'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#c00'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M51 0l145 75V0H51z'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill('#006'),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$path,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill('#c00'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$d('M215 0v96H0v55h215v97h66v-97h215V96H281V0h-66z'),
											_1: {ctor: '[]'}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$svg$Svg$path,
										{
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$d('M300 0v71L442 1 300 0z'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$fill('#006'),
												_1: {ctor: '[]'}
											}
										},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$svg$Svg$path,
											{
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$d('M305 79h39L499 1h-41L305 79z'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$fill('#c00'),
													_1: {ctor: '[]'}
												}
											},
											{ctor: '[]'}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$svg$Svg$path,
												{
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$d('M0 168v52l99-52-99-1z'),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$fill('#006'),
														_1: {ctor: '[]'}
													}
												},
												{ctor: '[]'}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$svg$Svg$path,
													{
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$d('M382 170l-41-1 155 78-1-18-113-59zM39 248l146-76h-39L0 248'),
														_1: {
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$fill('#c00'),
															_1: {ctor: '[]'}
														}
													},
													{ctor: '[]'}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$svg$Svg$path,
														{
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$d('M498 22L380 80l116 1v87h-99l98 53 2 27h-53l-143-71v71H196v-71L61 248H1v248h991V0H499M1 28L0 79l104 2L1 28z'),
															_1: {
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$fill('#006'),
																_1: {ctor: '[]'}
															}
														},
														{ctor: '[]'}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$svg$Svg$g,
															{
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$svg$Svg_Attributes$fill('#ffd900'),
																	_1: {ctor: '[]'}
																}
															},
															{
																ctor: '::',
																_0: A2(
																	_elm_lang$svg$Svg$path,
																	{
																		ctor: '::',
																		_0: _elm_lang$svg$Svg_Attributes$d('M496 0h496v496H496z'),
																		_1: {ctor: '[]'}
																	},
																	{ctor: '[]'}),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_elm_lang$svg$Svg$path,
																		{
																			ctor: '::',
																			_0: _elm_lang$svg$Svg_Attributes$d('M0 248h523v248H0z'),
																			_1: {ctor: '[]'}
																		},
																		{ctor: '[]'}),
																	_1: {ctor: '[]'}
																}
															}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$svg$Svg$g,
																{
																	ctor: '::',
																	_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
																	_1: {ctor: '[]'}
																},
																{
																	ctor: '::',
																	_0: A2(
																		_elm_lang$svg$Svg$path,
																		{
																			ctor: '::',
																			_0: _elm_lang$svg$Svg_Attributes$d('M291 125a43 43 0 1 1-86 0 43 43 0 0 1 86 0z'),
																			_1: {
																				ctor: '::',
																				_0: _elm_lang$svg$Svg_Attributes$fill('#000067'),
																				_1: {ctor: '[]'}
																			}
																		},
																		{ctor: '[]'}),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			_elm_lang$svg$Svg$path,
																			{
																				ctor: '::',
																				_0: _elm_lang$svg$Svg_Attributes$fill('#fff40d'),
																				_1: {
																					ctor: '::',
																					_0: _elm_lang$svg$Svg_Attributes$d('M240 114l8-24 9 24h26l-21 15 8 25-22-15-21 15 8-25-21-15zm149 4l4-11 4 11h13l-11 7 5 12-11-7-11 7 4-12-10-7zm-145 86l4-12 4 12h13l-10 7 4 11-11-7-11 7 5-11-11-7zm0-167l4-12 4 12h13l-10 7 4 11-11-7-11 7 5-11-11-7zM99 118l4-11 4 11h13l-10 7 4 12-11-7-11 7 4-12-10-7z'),
																					_1: {ctor: '[]'}
																				}
																			},
																			{ctor: '[]'}),
																		_1: {ctor: '[]'}
																	}
																}),
															_1: {ctor: '[]'}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$nfFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$version('1'),
					_1: {ctor: '[]'}
				}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$g,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M195 0h250v480H195z'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#198200'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 0h195v480H0zm445 0h195v480H445z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M314 351c-17 30 33 28 36 4 36-16 49-57 38-93-9-39-40-69-42-110-2-34-44-42-44-2-14 39-33 77-26 118-11 27-54 58-13 82 17 13 34-6 51 1z'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#198200'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$stroke('#000'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$strokeLinecap('round'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$strokeLinejoin('round'),
												_1: {ctor: '[]'}
											}
										}
									}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$strokeLinejoin('round'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M280 329v3s-6-2-8-5c4-1 8 2 8 2z'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$stroke('#000'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
												_1: {ctor: '[]'}
											}
										}
									}
								},
								{ctor: '[]'}),
							_1: {ctor: '[]'}
						}
					}
				}
			}),
		_1: {ctor: '[]'}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$npFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$clipPath,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0-16h512v512H0z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$g,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$clipPath('url(#a)'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$transform('translate(0 15) scale(.9375)'),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$g,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$path,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M7 490h378L137 238h258L7-9v499z'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$stroke('#000063'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$strokeWidth('14'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$fill('#ce0000'),
													_1: {ctor: '[]'}
												}
											}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$svg$Svg$path,
										{
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$d('M181 356l-27 9 21 20-29-2 12 26-25-12v28l-19-21-10 27-10-26-20 20 2-27-27 11 13-25-30 1 22-19-28-10 27-9-21-20 29 2-12-26 26 12-1-29 19 21 11-26 9 26 20-21-2 28 27-11-12 25 29-1-22 18zm-33-185l-11 9 6 4c13-10 23-20 30-36 2 21-17 69-68 70-55 0-74-51-72-71 10 18 16 27 32 37l5-5-11-8 14-4-7-12 14 1-2-15 13 7 4-13 9 11 8-10 5 14 12-9-2 15 14-2-6 13 13 4z'),
												_1: {ctor: '[]'}
											}
										},
										{ctor: '[]'}),
									_1: {ctor: '[]'}
								}
							}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$noFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$path,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fill('#ef2b2d'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '[]'}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M180 0h120v480H180z'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M0 180h640v120H0z'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#002868'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M210 0h60v480h-60z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#002868'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M0 210h640v60H0z'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}
				}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$nlFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$g,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$transform('scale(1.25 .9375)'),
					_1: {ctor: '[]'}
				}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$rect,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$rx('0'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$ry('0'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$height('510'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$width('512'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$rect,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$rx('0'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$ry('0'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$height('170'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$width('512'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$y('342'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$fill('#21468b'),
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#ae1c28'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M0 0h512v170H0z'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}
				}
			}),
		_1: {ctor: '[]'}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$niFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$version('1'),
					_1: {ctor: '[]'}
				}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$path,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fill('#0067c6'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '[]'}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M0 160h640v160H0z'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$ngFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$g,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#008753'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M427 0h213v480H427zM0 0h213v480H0z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {ctor: '[]'}
				}
			}),
		_1: {ctor: '[]'}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$neFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$path,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fill('#0db02b'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '[]'}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v320H0z'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#e05206'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v160H0z'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$circle,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$cx('320'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$cy('240'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$r('68'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill('#e05206'),
										_1: {ctor: '[]'}
									}
								}
							}
						},
						{ctor: '[]'}),
					_1: {ctor: '[]'}
				}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$ncFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$g,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#00267f'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 0h213v480H0z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#f31830'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M427 0h213v480H427z'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}
				}
			}),
		_1: {ctor: '[]'}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$naFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$clipPath,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$clipPath('url(#a)'),
						_1: {ctor: '[]'}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M-26 0v346L513 0H-26z'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#3662a2'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M666 480l-1-360-543 360h544z'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill('#38a100'),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$path,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M-26 372v108H92L665 95V1L549 0-26 372z'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$fill('#c70000'),
											_1: {ctor: '[]'}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$svg$Svg$path,
										{
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$fill('#ffe700'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$d('M220 172l-22-13-13 22-12-22-22 13 1-26h-26l13-21-22-13 23-12-13-22h25V53l22 13 12-22 13 22 21-13v26h25l-13 21 22 13-22 12 13 22h-26z'),
												_1: {ctor: '[]'}
											}
										},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$svg$Svg$path,
											{
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$d('M232 112a46 46 0 1 1-47-46c27 0 47 21 47 46z'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$fill('#3662a2'),
													_1: {ctor: '[]'}
												}
											},
											{ctor: '[]'}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$svg$Svg$path,
												{
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$d('M222 112a36 36 0 1 1-73 0 36 36 0 0 1 73 0z'),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$fill('#ffe700'),
														_1: {ctor: '[]'}
													}
												},
												{ctor: '[]'}),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}
				}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$mzFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$version('1'),
					_1: {ctor: '[]'}
				}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$clipPath,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 0h683v512H0z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$clipPath('url(#a)'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$transform('scale(.9375)'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
							_1: {ctor: '[]'}
						}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#009a00'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 0h768v160H0z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M0 160h768v16H0z'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M0 176h768v160H0z'),
									_1: {ctor: '[]'}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$path,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$d('M0 336h768v16H0z'),
											_1: {ctor: '[]'}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$svg$Svg$path,
										{
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$fill('#ffca00'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$d('M0 352h768v160H0z'),
												_1: {ctor: '[]'}
											}
										},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$svg$Svg$path,
											{
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$d('M0 0v512l336-256L0 0z'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$fill('red'),
													_1: {ctor: '[]'}
												}
											},
											{ctor: '[]'}),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$myFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$width('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$height('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$path,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fill('#cc0001'),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '[]'}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M0 446h640v34H0z'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$id('a'),
							_1: {ctor: '[]'}
						}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$use,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#a'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$transform('translate(0 -69)'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$width('100%'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$height('100%'),
									_1: {ctor: '[]'}
								}
							}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$use,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#a'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$transform('translate(0 -137)'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$width('100%'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$height('100%'),
										_1: {ctor: '[]'}
									}
								}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$use,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#a'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$transform('translate(0 -206)'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$width('100%'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$height('100%'),
											_1: {ctor: '[]'}
										}
									}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$use,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#a'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$transform('translate(0 -274)'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$width('100%'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$height('100%'),
												_1: {ctor: '[]'}
											}
										}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$use,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#a'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$transform('translate(0 -343)'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$width('100%'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$height('100%'),
													_1: {ctor: '[]'}
												}
											}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$svg$Svg$use,
										{
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#a'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$transform('translate(0 -412)'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$width('100%'),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$height('100%'),
														_1: {ctor: '[]'}
													}
												}
											}
										},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$svg$Svg$path,
											{
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$d('M0 0h373v274H0z'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$fill('#010066'),
													_1: {ctor: '[]'}
												}
											},
											{ctor: '[]'}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$svg$Svg$g,
												{
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$fill('#fc0'),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: A2(
														_elm_lang$svg$Svg$path,
														{
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$d('M150 49a89 89 0 1 0 48 163 79 79 0 0 1-26 4 79 79 0 1 1 27-152 89 89 0 0 0-49-15z'),
															_1: {ctor: '[]'}
														},
														{ctor: '[]'}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$svg$Svg$path,
															{
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$d('M297 183l-37-19 11 40-25-34-8 41-8-41-25 34 11-40-37 19 28-31-43 1 39-16-39-16 43 1-28-31 37 20-11-40 25 33 8-41 8 41 25-33-11 40 37-20-28 31 43-1-39 16 39 17-43-2z'),
																_1: {ctor: '[]'}
															},
															{ctor: '[]'}),
														_1: {ctor: '[]'}
													}
												}),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$mxFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$version('1'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$width('100%'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$height('100%'),
					_1: {ctor: '[]'}
				}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$path,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$d('M427 0h213v480H427z'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fill('#ce1126'),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '[]'}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M213 0h214v480H213z'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M0 0h213v480H0z'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#006847'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {ctor: '[]'}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$mwFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$version('1'),
					_1: {ctor: '[]'}
				}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$g,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#f41408'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#21873b'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 320h640v160H0z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v160H0z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}
				}
			}),
		_1: {ctor: '[]'}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$mvFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$path,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fill('#d21034'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '[]'}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fill('#007e3a'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M120 120h400v240H120z'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$circle,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$r('80'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$cy('240'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$cx('350'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
									_1: {ctor: '[]'}
								}
							}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$circle,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$r('80'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$cy('240'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$cx('380'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill('#007e3a'),
										_1: {ctor: '[]'}
									}
								}
							}
						},
						{ctor: '[]'}),
					_1: {ctor: '[]'}
				}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$muFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$g,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M0 360h640v120H0z'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#00a04d'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M0 120h640v120H0z'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#151f6d'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v120H0z'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#ee2737'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M0 240h640v120H0z'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill('#ffcd00'),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {ctor: '[]'}
						}
					}
				}
			}),
		_1: {ctor: '[]'}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$mtFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$version('1'),
					_1: {ctor: '[]'}
				}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$g,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#ce0000'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M320 0h320v480H320z'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 0h320v480H0z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {ctor: '[]'}
				}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M59 137v47h59c0 10 10 20 20 20v60h48v-60c9 0 19-10 19-20h60v-47h-60c0-10-10-20-19-20V57h-48v60c-10 0-20 10-20 20H59z'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#a0a0a0'),
							_1: {ctor: '[]'}
						}
					}
				},
				{ctor: '[]'}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$msFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$version('1'),
					_1: {ctor: '[]'}
				}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$path,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fill('#006'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '[]'}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M44 23h169v121c2 48-29 78-84 92-40-10-85-30-85-91V23z'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$stroke('#000'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#00a2bd'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$transform('matrix(1.2096 0 0 1.2172 360 169)'),
										_1: {ctor: '[]'}
									}
								}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M616 361c-7 57-50 81-100 94-45-11-92-31-102-93l202-1z'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#a53d08'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M0 0v29l344 225h43v-28L43 0H0zm387 0v29L43 254H0v-28L344 0h43z'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M161 0v254h65V0h-65zM0 85v85h387V85H0z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#c00'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M0 102v51h387v-51H0zM174 0v254h39V0h-39zM0 254l129-84h29L29 254H0zM0 0l129 85h-29L0 19V0zm229 85L358 0h29L258 85h-29zm158 169l-129-84h29l100 65v19z'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}
				}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$mrFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$path,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fill('#006233'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '[]'}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$circle,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$cx('320'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$cy('180'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$r('155'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#ffc400'),
								_1: {ctor: '[]'}
							}
						}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M243 11a150 150 0 0 0-73 129 150 150 0 0 0 150 150 150 150 0 0 0 150-150 150 150 0 0 0-73-129H243z'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#006233'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$g,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$id('b'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$transform('matrix(5 0 0 5 320 140)'),
								_1: {ctor: '[]'}
							}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$id('a'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M0-12L-4-1l6 2'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$fill('#ffc400'),
											_1: {ctor: '[]'}
										}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$use,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$height('100%'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$width('100%'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#a'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$transform('scale(-1 1)'),
													_1: {ctor: '[]'}
												}
											}
										}
									},
									{ctor: '[]'}),
								_1: {ctor: '[]'}
							}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$use,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$height('100%'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$width('100%'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#b'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$transform('rotate(72 320 140)'),
											_1: {ctor: '[]'}
										}
									}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$use,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$height('100%'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$width('100%'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#b'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$transform('rotate(144 320 140)'),
												_1: {ctor: '[]'}
											}
										}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$use,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$height('100%'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$width('100%'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#b'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$transform('rotate(-144 320 140)'),
													_1: {ctor: '[]'}
												}
											}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$svg$Svg$use,
										{
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$height('100%'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$width('100%'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#b'),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$transform('rotate(-72 320 140)'),
														_1: {ctor: '[]'}
													}
												}
											}
										},
										{ctor: '[]'}),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$mqFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$g,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#00267f'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 0h213v480H0z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#f31830'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M427 0h213v480H427z'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}
				}
			}),
		_1: {ctor: '[]'}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$mpFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$version('1'),
					_1: {ctor: '[]'}
				}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$clipPath,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$clipPath('url(#a)'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#0071bc'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M-160 0h960v480h-960z'),
									_1: {ctor: '[]'}
								}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M370 366s15-16 30-13c4-17 21-19 21-19s-2-18 19-22c1-13 14-24 14-24s-3-20 11-24c-9-16 2-27 2-27 0-1-14-25-1-32-13-11-9-24-9-24s-14-3-9-20c-12-2-14-21-14-21s-18 3-20-12c-12 2-14-10-14-10s-23 6-28-11c-9 4-13-4-13-4s-13 6-21-6c-15 10-24-1-24-1s-20 14-27 4c-12 12-23 6-23 6s-9 17-23 12c-4 15-21 16-21 16s2 13-18 16c-3 16-13 18-13 18s1 16-9 20c4 9-5 19-5 19s9 12-4 25c13 3 4 25 4 25s17 7 6 21c12 4 8 14 9 20 7 3 14 1 11 17 24 3 12 16 12 16s12 0 7 9c21 0 23 15 23 15s19-5 22 3c2 7-8 56-8 56s-16 0-28-12c-28-1-22-20-22-20-1 0-10 4-14-11-19 3-18-12-18-12 0-1-9-4-5-12-20 2-18-17-18-17-4-2-6-6-5-9-3-1-20-2-11-24-16-10-6-21-6-21s-23-12-5-25c-13-19 1-28 1-28s-18-19 0-32c-3-27 14-34 14-34s-9-22 14-31c2-23 18-24 18-24s1-18 26-16c5-16 23-13 23-13s5-19 29-10c12-24 30-11 30-11s12-8 17-6c8-12 23 0 33 2 4-1 17-11 27 1 13-8 24 7 24 7s18-9 27 12c38-3 33 22 33 22s30-7 23 23c28 2 25 20 25 20s17 13 10 25c15 1 10 16 10 16s12 4 2 23c22 18 4 36 4 36s12 15 1 32c3 26-10 33-10 33s3 18-12 23c0 20-20 23-20 23s6 9-14 18c0 14-20 15-20 15s-2 25-28 18c-6 20-36 14-36 14l-6-43z'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$stroke('#000'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$strokeWidth('2'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
												_1: {ctor: '[]'}
											}
										}
									}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M344 172c3 2 5 5 6 12l1 16 13 116 11 85 1 13s-3 9-11 10c-5 12-35 15-38 15s-13-4-18-4c-6 1-16 5-21 4-4-1-15-4-16-11-13-4-15-14-15-14l13-98 14-123s1-17 8-19c7-1 42 1 52-2z'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$stroke('#000'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$strokeWidth('2'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$fill('#8c8a8c'),
													_1: {ctor: '[]'}
												}
											}
										}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$path,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M405 387s-2 4 7 8m12-18s10-3 16 0m14-26s-2 5 6 11m-1-22s6 4 16 4m-75 9s0 11-6 16m26-34s9 2 17-2m45-15s2 3 13 2m-55-9s13 4 20 1m5-48l4 13m5-51s0 7-6 11m43-40s-9 7-7 10m-35-15s5 8-3 13m-18-44s8 0 11 6m-25-27h6m24-26s1 1-2 4m-51-4s4 7 3 14m20-35l7-3m-33-22s-2 8 1 11m-11 25c0 8 7 6 2 14m-18-21l-10 9m-17-13s5 4 4 10m-16-14l-5 9m-18-11l-6 10m-26-9s3 7-1 12m-6-48s0 5-3 10m-29 1c0 1 2 6-7 8m-10 45l9 2m-31 19l11-4m-28 17h9m-14 6s3 1 1 13m-35-44l5 7m-19 26c0-1 4 6 10 7m23 25l8-2m-11 26s0-4 5-7m-12 18s5 6 8 7m-11 5s6-5 12-5m-14 21s0 5 16 4m-14 15s4-11 14-15m-1 28s1-4 9-7m0 25l7-5m0 19s3 4 12-2m-54 5c1 0 13-3 18 4m-13 7s13-2 15-1m33 3s-2 4 14-2m6 9c-3 5 1 9-3 11m-47-4s6-2 5-10m0 22c1 0 10-4 12-2m6 14s1-9 4-10m10 22s8 0 11-3m4-25s7 4 22 0m-17 33l2 13'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$stroke('#000'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$strokeWidth('2'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$fill('none'),
													_1: {ctor: '[]'}
												}
											}
										}
									},
									{ctor: '[]'}),
								_1: {ctor: '[]'}
							}
						}
					}
				}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$moFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$path,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fill('#00785e'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '[]'}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fill('#fbd116'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M295 109l41 29-16-47-15 47 40-29z'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$g,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M320 332H218a146 146 0 0 1-4-4h106a2 2 0 0 1 1 2l-1 2zm0-32c1-1 2-4 1-7a12 12 0 0 0-1-4c-6 5-17 14-32 19a81 81 0 0 1-24 3h-63a144 144 0 0 0 6 8h61c20 0 38-7 52-19zm-110-24a32 32 0 0 1-9 2 81 81 0 0 0 119 2 441 441 0 0 0 5-59 441 441 0 0 0-5-67c-7 6-19 18-25 38a81 81 0 0 0-3 23c0 17 5 32 14 45a81 81 0 0 1-10-84 32 32 0 0 1-7-13 81 81 0 0 0 5 88 95 95 0 0 0-73-30 33 33 0 0 1 7 9c27 0 51 12 68 30a95 95 0 0 0-97-15 81 81 0 0 0 82 52 82 82 0 0 1-71-21zm110 88h-53c16 7 34 10 53 10a11 11 0 0 0 1-4 11 11 0 0 0-1-6zm0-24h-94a144 144 0 0 0 8 6h86l1-3-1-3zm0 12h-77a144 144 0 0 0 15 8h62a8 8 0 0 0 1-4 8 8 0 0 0-1-4z'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#fbd116'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M200 175l26 23-7-34-14 32 30-17zm37-32h35l-28-21 11 34 11-33z'),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {ctor: '[]'}
						}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$use,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$height('100%'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$width('100%'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#a'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$transform('matrix(-1 0 0 1 640 0)'),
										_1: {ctor: '[]'}
									}
								}
							}
						},
						{ctor: '[]'}),
					_1: {ctor: '[]'}
				}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$mnFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$path,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fill('#c4272f'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '[]'}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fill('#015197'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M213 0h214v480H213z'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$circle,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$cx('107'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$cy('189'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$r('35'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#f9cf02'),
									_1: {ctor: '[]'}
								}
							}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$circle,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$cx('107'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$cy('173'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$r('38'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill('#c4272f'),
										_1: {ctor: '[]'}
									}
								}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M91 132a16 16 0 0 0 32 0c0-7-4-7-4-10 0-2 2-5-2-9 2 4-2 5-2 8l2 8a3 3 0 0 1-7 0c0-4 3-7 3-11 0-5 0-7-3-11-2-4-6-7-3-10-5 1-2 8-2 12s-4 6-4 11 3 5 3 9a3 3 0 0 1-7 0l2-8c0-3-4-4-2-8-4 4-2 7-2 9 0 3-4 3-4 10z'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#f9cf02'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
										_1: {ctor: '[]'}
									}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$circle,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$cx('107'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$cy('180'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$r('25'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$fill('#f9cf02'),
												_1: {ctor: '[]'}
											}
										}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$path,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M37 230v153h32V230zm108 0v153h32V230zm-70 26v13h64v-13zm0 89v13h64v-13zm0-115h64l-32 20zm0 134h64l-32 19z'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$fill('#f9cf02'),
											_1: {ctor: '[]'}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$svg$Svg$circle,
										{
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$cx('107'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$cy('307'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$r('34'),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$fill('#f9cf02'),
														_1: {
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$stroke('#c4272f'),
															_1: {
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$strokeWidth('4'),
																_1: {ctor: '[]'}
															}
														}
													}
												}
											}
										},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$svg$Svg$path,
											{
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$d('M107 273a17 17 0 0 1 0 34 17 17 0 1 0 0 34'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$fill('none'),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$stroke('#c4272f'),
														_1: {
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$strokeWidth('4'),
															_1: {ctor: '[]'}
														}
													}
												}
											},
											{ctor: '[]'}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$svg$Svg$circle,
												{
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$r('6'),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$cy('290'),
														_1: {
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$cx('107'),
															_1: {
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$fill('#c4272f'),
																_1: {ctor: '[]'}
															}
														}
													}
												},
												{ctor: '[]'}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$svg$Svg$circle,
													{
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$r('6'),
														_1: {
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$cy('324'),
															_1: {
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$cx('107'),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$svg$Svg_Attributes$fill('#c4272f'),
																	_1: {ctor: '[]'}
																}
															}
														}
													},
													{ctor: '[]'}),
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$mmFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$g,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$use,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#a'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$transform('rotate(-144)'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$width('18'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$height('12'),
											_1: {ctor: '[]'}
										}
									}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$use,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#a'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$transform('rotate(-72)'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$width('18'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$height('12'),
												_1: {ctor: '[]'}
											}
										}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$use,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#a'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$width('18'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$height('12'),
												_1: {ctor: '[]'}
											}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$svg$Svg$use,
										{
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#a'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$transform('rotate(72)'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$width('18'),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$height('12'),
														_1: {ctor: '[]'}
													}
												}
											}
										},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$svg$Svg$use,
											{
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#a'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$transform('rotate(144)'),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$width('18'),
														_1: {
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$height('12'),
															_1: {ctor: '[]'}
														}
													}
												}
											},
											{ctor: '[]'}),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v160H0z'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#fecb00'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M0 320h640v160H0z'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#ea2839'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M0 160h640v160H0z'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#34b233'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$use,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#a'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$x('9'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$y('6'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$width('18'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$height('12'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$transform('matrix(40 0 0 40 -40 0)'),
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}
				}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$mlFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$g,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('red'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M426 0h214v480H426z'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#009a00'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 0h213v480H0z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#ff0'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M213 0h214v480H213z'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}
				}
			}),
		_1: {ctor: '[]'}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$mhFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$g,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#3b5aa3'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M0 467L640 0v87L0 480v-13z'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#e2ae57'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M22 480l618-301V84L0 480h22zM175 15l-6 103-27-66 10 70-41-56 27 64-55-42 43 53-62-27 54 41-68-9 64 25-100 9 101 7-64 26 67-9-54 40 63-27-43 54 54-42-27 63 44-55-12 69 27-64 7 101 9-101 24 64-9-69 44 55-29-64 55 44-44-55 65 27-57-42 69 12-66-26 104-6-104-10 68-23-71 9 59-41-66 27 45-56-55 44 26-67-43 57 10-70-26 66-10-103z'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}
				}
			}),
		_1: {ctor: '[]'}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$mkFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$path,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fill('#d20000'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '[]'}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M0 0h96l224 231L544 0h96L0 480h96l224-231 224 231h96zm640 192v96L0 192v96zM280 0l40 206L360 0zm0 480l40-206 40 206z'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#ffe600'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$circle,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$r('77'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$cy('240'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$cx('320'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#ffe600'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$stroke('#d20000'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$strokeWidth('17'),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					},
					{ctor: '[]'}),
				_1: {ctor: '[]'}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$mdFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$version('1'),
					_1: {ctor: '[]'}
				}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$g,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#00319c'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M0 0h213v480H0z'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#ffde00'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M213 0h214v480H213z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#de2110'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M427 0h213v480H427z'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}
				}
			}),
		_1: {ctor: '[]'}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$mgFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$g,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#ff3319'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M213 0h427v240H213z'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#00cc28'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M213 240h427v240H213z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M0 0h213v480H0z'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}
				}
			}),
		_1: {ctor: '[]'}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$mfFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$g,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#00267f'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 0h213v480H0z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#f31830'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M427 0h213v480H427z'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}
				}
			}),
		_1: {ctor: '[]'}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$meFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$version('1'),
					_1: {ctor: '[]'}
				}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$path,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fill('#d3ae3b'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '[]'}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fill('#c40308'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M24 24h592v432H24z'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M361 238c0-10 5-17 5-17l-13-14c-12 4-23 5-33-1-10 6-21 5-33 1l-13 14s5 7 5 17-2 17-3 22-2 15 0 21c3 7 6 12 17 17s17 7 21 11l6 6 6-6c4-4 10-6 21-11s14-10 17-17c2-6 1-16 0-21s-3-12-3-22z'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#d4af3a'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {ctor: '[]'}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$maFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$path,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fill('#c1272d'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M640 0H0v480h640z'),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '[]'}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M320 179l-36 110 94-68H262l94 68z'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('none'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$stroke('#006233'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$strokeWidth('12'),
								_1: {ctor: '[]'}
							}
						}
					}
				},
				{ctor: '[]'}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$mcFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$g,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#f31830'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v240H0z'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 240h640v240H0z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {ctor: '[]'}
				}
			}),
		_1: {ctor: '[]'}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$lyFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$clipPath,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M167-20h666v500H167z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$clipPath('url(#a)'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$transform('matrix(.96 0 0 .96 -160 19)'),
						_1: {ctor: '[]'}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#239e46'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0-20h1000v500H0z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0-20h1000v375H0z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#e70013'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M0-20h1000v125H0z'),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$path,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M544 186a54 54 0 1 0 0 88 63 63 0 1 1 0-88m-14 44l84-27-51 71v-88l52 71z'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
											_1: {ctor: '[]'}
										}
									},
									{ctor: '[]'}),
								_1: {ctor: '[]'}
							}
						}
					}
				}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$lvFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$g,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#ab231d'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v192H0zm0 288h640v192H0z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {ctor: '[]'}
				}
			}),
		_1: {ctor: '[]'}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$luFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$path,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fill('#00a1de'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M0 240h640v240H0z'),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '[]'}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fill('#ed2939'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v240H0z'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M0 160h640v160H0z'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {ctor: '[]'}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$lsFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$path,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '[]'}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M0 336h640v144H0z'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#009543'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v144H0z'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#00209f'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M320 153c-3 0-6 3-6 3v32l-10 11h9l-1 19-49 66-7-3-12 27s31 20 76 19c50-1 77-20 77-20l-13-27-6 3-50-65v-19h8l-11-11v-32s-3-3-5-3z'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$stroke('#000'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$strokeWidth('2'),
									_1: {ctor: '[]'}
								}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M337 230h-34s-12-25-10-44c2-18 12-27 26-27 17 0 25 8 28 27 3 18-10 44-10 44z'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('none'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$stroke('#000'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$strokeWidth('8'),
											_1: {ctor: '[]'}
										}
									}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M260 292l-4 9 7-2-3-7zm5 11l-8 2 9 4-1-6zm3-11l4 11 9-2-3-6-10-3zm6 15l1 4 12 3-5-10-8 3zm13-9l4 10 9-4-3-4-10-2zm6 14l1 4 14 2-6-10-9 4zm13-11l5 9 13-5-1-3-17-1zm8 12l3 5 16-1-6-9-13 5zm17-12l4 8 11-5-3-4-12 1zm17 6l-10 5 2 4 14-2-6-7zm3-8l6 7 8-7-3-3-11 3zm16 3l-8 7 2 4 11-3-5-8zm11-13l3 3-6 9-6-8 9-4zm4 8l4 7-7 2-1-3 4-6z'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {ctor: '[]'}
						}
					}
				}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$ltFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$g,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$transform('scale(.64143 .96773)'),
					_1: {ctor: '[]'}
				}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$rect,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$transform('scale(.93865 .69686)'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$rx('0'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$ry('0'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$width('1063'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$height('709'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$fill('#007308'),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$rect,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$transform('scale(.93865 .69686)'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$rx('0'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$ry('0'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$width('1063'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$y('476'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$height('236'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$fill('#bf0000'),
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#ffb300'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M0 0h998v165H0z'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}
				}
			}),
		_1: {ctor: '[]'}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$lrFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$clipPath,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 0h683v512H0z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$clipPath('url(#a)'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$transform('scale(.9375)'),
							_1: {ctor: '[]'}
						}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 0h768v512H0z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#006'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M0 0h233v233H0z'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#c00'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M0 465h768v47H0z'),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$path,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill('#c00'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$d('M0 465h768v47H0zm0-92h768v46H0zm0-94h766v47H0zM233 0h535v47H233zm0 186h535v47H233zm0-93h535v47H233z'),
											_1: {ctor: '[]'}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$svg$Svg$path,
										{
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$d('M166 177l-50-31-51 32 19-51-50-31 62-1 19-51 20 51h62l-50 32 19 50z'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
												_1: {ctor: '[]'}
											}
										},
										{ctor: '[]'}),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$lkFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$version('1'),
					_1: {ctor: '[]'}
				}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$path,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fill('#ffb700'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '[]'}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M27 240l88-213h88v426h-88z'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#ff5b00'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#005641'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M27 27h88v426H27z'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#8d2029'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M229 27h387v426H229z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {ctor: '[]'}
				}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$liFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$version('1'),
					_1: {ctor: '[]'}
				}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$path,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fill('#002b7f'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v240H0z'),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '[]'}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fill('#ce1126'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M0 240h640v240H0z'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$lcFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$g,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#65cfff'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M319 42l163 395-323 1L319 42z'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M319 97l141 340H181L319 97z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M319 240l163 198H159l160-198z'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill('#ffce00'),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {ctor: '[]'}
						}
					}
				}
			}),
		_1: {ctor: '[]'}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$kzFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$version('1'),
					_1: {ctor: '[]'}
				}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$g,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#6fdcff'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$g,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#ffe400'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$transform('translate(-195 8) scale(1.0673)'),
								_1: {ctor: '[]'}
							}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$rect,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$rx('85'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$ry('81'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$height('161'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$width('170'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$y('104'),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$x('426'),
														_1: {ctor: '[]'}
													}
												}
											}
										}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$g,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$transform('matrix(2.1824 0 0 2.0629 -405 -273)'),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$svg$Svg$path,
											{
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$d('M360 248c1 2 1 16 15 30 14 13 38 16 38 16s0 2-2 2l-14-2-8-4-2 2c-1 0-7-7-10-8-2-2-11-11-13-15l-5-8-4 2-6-12c-2-7-2-11-1-11l2 10c2 5 5 7 5 7l-3-9c-1-6-2-14-1-16l2-2s-2 3-1 11 5 14 6 14c1-1 0-2-1-7s1-7 2-7l1 7zm-10 13c-2-3-7-12-8-11l8 14v4l-9-8c1 2 8 10 7 11s-6-5-6-5c0 1 6 6 5 7s-3-3-3-3l3 6c0 1-2-3-2-1l4 4h-2l5 2 12 13c5 4 18 10 19 10s3-2 2-3c0-1-13-5-17-9l-14-12-3-1h3l-4-2h3s-5-2-4-3l3 1-4-3 3 1-3-4 4 3c1-1-1-8-1-8l3 1c1-1-1-2-4-4zm46 49c-1 0-2 0-1-2l7-2 4-3c1-1 2 1 1 2l-5 3-6 2zm13-5c-1-2 0-3 2-4l5-5c2-1 24-10 31-15s28-20 34-31c5-10 3-11 3-12l2 4-2 10s9-5 12-13 5-15 7-15-3 13-5 18c-3 5-6 7-5 8 0 1 8-5 11-10s5-9 6-8c0 1-3 11-7 16l-9 9c1 1 7 2 13-3 6-4 6-10 7-9 1 0-1 8-6 13s-14 6-13 7l16-4c-1 2-21 10-21 10h9c5-1 10-5 11-5 0 2-4 5-10 7-6 1-9 4-10 4l12-1-15 5 13-2-19 6c1 1 16-3 16-3l-27 9 23-5-12 4 9-1-24 7c-1 1 12-2 12 0s-28 11-28 9 17-6 17-7l-10 1 6-4h-5l9-5h-3l20-8-10 2 12-6c-1-1-7 3-7 2l10-6-6 1c0-1 10-9 8-9-1 0-3 3-4 1 1-2 9-5 7-7-3-1-13 1-17 3s-18 17-22 19l-17 8-7 5c-7 1-7 3-10 4l-12 6zm-16 7c-2 1-3 3-2 4l4-2h8l8-1 11-1 3-1h-12l-10 1h-10z'),
												_1: {ctor: '[]'}
											},
											{ctor: '[]'}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$svg$Svg$rect,
												{
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$rx('2'),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$ry('1'),
														_1: {
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$height('3'),
															_1: {
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$width('3'),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$svg$Svg_Attributes$y('309'),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$svg$Svg_Attributes$x('402'),
																		_1: {ctor: '[]'}
																	}
																}
															}
														}
													}
												},
												{ctor: '[]'}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$svg$Svg$path,
													{
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$d('M445 308c2-1 6 1 9 2 6 2 17 1 17 2l-3 3c-2 1-9-1-9-1l4 2h-6l3 1h-5v2h-4v2l-5-1c-2 0 1 1 0 1-1 1-4-1-4-1l-1 2-3-1-1 1-2-1c-1 0 0 2-2 2-1 0-1-3-2-2l-1 2-2-2c-1-1-1 2-2 2l-1-2-1 2-2-3-1 2-1-1c-1 0-2 2-3 1v-1h-2v-1l-3 1h-3l2-2v-4c2-1 6 1 12-1l22-6z'),
														_1: {ctor: '[]'}
													},
													{ctor: '[]'}),
												_1: {ctor: '[]'}
											}
										}
									}),
								_1: {ctor: '[]'}
							}
						}),
					_1: {ctor: '[]'}
				}
			}),
		_1: {ctor: '[]'}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$lbFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$clipPath,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M-85 0h682v512H-85z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$clipPath('url(#a)'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$transform('translate(80) scale(.9375)'),
						_1: {ctor: '[]'}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$g,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('red'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M-128 384h768v128h-768zm0-384h768v128h-768z'),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$path,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$d('M-128 128h768v256h-768z'),
											_1: {ctor: '[]'}
										}
									},
									{ctor: '[]'}),
								_1: {ctor: '[]'}
							}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M252 130c-8 16-13 16-26 26-5 5-13 8-3 13-10 5-15 8-20 18l2 3s10-5 11-3-13 10-15 11l-11 7c-13 11-21 8-29 24l26-3c5 18-13 21-26 29l-21 13c5 18 21 7 34 2l3 3v5l-26 13-32 18v5c11 3 26 6 37 0 13-5 15-10 31-10-18 13-31 18-52 21v10c16 0 26 0 39-2l34-11c8 0 15 8 13 16-8 28-39 23-50 47l42-16c10-5 21-10 34-8 16 5 16 16 36 21l-5-13c5 3 11 3 16 5 13 5 15 11 31 8-13-16-16-13-26-23-10-16-16-39 0-42l18 5c18 3 18-2 44 8 16 5 21 13 39 8-7-18-36-31-54-37 21-13 15 6 44-2v-5c-21-16-29-29-57-29l44-5v-5l-45-12c1-1 2-4 5-5 8 6 33 5 34 5 0-6-12-12-23-17 0 0-44-27-44-30 1-7 18 1 37 7-6-11-16-16-26-18l15-3c-10-23-36-21-52-31-10-8-10-13-26-21z'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#007900'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$strokeLinejoin('round'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M224 303c2-6 4-12-7-17-12-5 6 21 7 17zm14-12c-3 0-4 9 1 11 5 1 1-11-1-11zm13-1c-2 0-2 12 6 10 9-2 0-11-6-10zm16-31c2-3 0-15-7-10-8 5 5 11 7 10zm-16-10c2-1 2-8-4-6s2 7 4 6zm-14 3s-5-6-8-5c-5 4 8 5 8 5zm-50 20c2 0 16-3 21-8 5-6-25 2-25 2l4 6zm141-35c1-2-7-7-12-5-2 4 12 6 12 5zm-28-14c2-2-3-12-13-7-11 6 10 10 13 7zm-32-6s3-8 9-6c7 5-8 7-9 6zm-6-6c-1-2-7-1-14 4-8 5 16 1 14-4zm19-22s6-3 8 0c3 4-8 0-8 0zm-6-3c-1-2-8-3-8 1-1 3 9 3 8-1zm-17 0c0-1-11 0-14 6 5 3 16-2 14-6zm-22 7s-13 8-14 14c0 5 17-10 17-10s1-5-3-4zm-15-8c1-2 7-6 8-5 0 1-6 6-8 5zm5 32c0-3-16-3-10 5 5 6 11-4 10-5zm-15 10c-1-1-2-6-5-6-1 0-11 2-12 4 0 1 4 9 6 9 1 1 10-6 11-7zm88 55c1-1 17-7 23-2 7 10-23 5-23 2zm46 11c4-6-11-13-18-6 3 8 15 12 18 6z'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$stroke('#fff'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$strokeLinecap('round'),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$strokeWidth('3'),
														_1: {
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
															_1: {ctor: '[]'}
														}
													}
												}
											}
										}
									}
								},
								{ctor: '[]'}),
							_1: {ctor: '[]'}
						}
					}
				}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$laFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$clipPath,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$clipPath('url(#a)'),
						_1: {ctor: '[]'}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#e90012'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M-40 0h720v480H-40z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#003dd2'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M-40 119h720v242H-40z'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M423 240a103 103 0 1 1-206 0 103 103 0 1 1 206 0z'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {ctor: '[]'}
						}
					}
				}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$kyFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$version('1'),
					_1: {ctor: '[]'}
				}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$path,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fill('#006'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '[]'}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#006'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M0 0h400v200H0z'),
							_1: {ctor: '[]'}
						}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M0 0v27l334 215h43v-27L42 0H0zm377 0v27L42 242H0v-27L334 0h43z'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M157 0v242h63V0h-63zM0 81v81h377V81H0z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#c00'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M0 97v48h377V97H0zM169 0v242h38V0h-38zM0 242l126-80h28L28 242H0zM0 0l126 81H97L0 18V0zm223 81L348 0h29L251 81h-28zm154 161l-126-80h28l98 62v18z'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}
				}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$kwFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$clipPath,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 0h683v512H0z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$clipPath('url(#a)'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$transform('scale(.9375)'),
							_1: {ctor: '[]'}
						}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 171h1024v170H0z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#f31830'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M0 341h1024v171H0z'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#00d941'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M0 0h1024v171H0z'),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$path,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M0 0v512l255-171 1-170L0 0z'),
										_1: {ctor: '[]'}
									},
									{ctor: '[]'}),
								_1: {ctor: '[]'}
							}
						}
					}
				}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$krFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$clipPath,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M-96 0h683v512H-96z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$clipPath('url(#a)'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$transform('translate(90) scale(.9375)'),
							_1: {ctor: '[]'}
						}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M611 512h-731V0h731z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M252 256a113 113 0 1 1-225 0 113 113 0 0 1 225 0z'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M393 263a145 145 0 1 1-291 0 146 146 0 0 1 291 0z'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill('#c70000'),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$path,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M-49 126l83-96 20 17-84 97zm27 24l84-97 19 17-83 97z'),
										_1: {ctor: '[]'}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$svg$Svg$path,
										{
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$d('M-49 126l83-96 20 17-84 97z'),
											_1: {ctor: '[]'}
										},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$svg$Svg$path,
											{
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$d('M-49 126l83-96 20 17-84 97zm55 48l84-96 19 17-83 96z'),
												_1: {ctor: '[]'}
											},
											{ctor: '[]'}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$svg$Svg$path,
												{
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$d('M-49 126l83-96 20 17-84 97z'),
													_1: {ctor: '[]'}
												},
												{ctor: '[]'}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$svg$Svg$path,
													{
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$d('M-49 126l83-96 20 17-84 97zm508-96l83 97-20 17-83-97zm-55 47l83 97-20 17-83-97z'),
														_1: {ctor: '[]'}
													},
													{ctor: '[]'}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$svg$Svg$path,
														{
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$d('M418 133l78-68 15 17-84 76-9-25z'),
															_1: {
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
																_1: {ctor: '[]'}
															}
														},
														{ctor: '[]'}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$svg$Svg$path,
															{
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$d('M514 372l-80 96-20-17 81-95zM432 53l83 97-20 17-83-97zm109 342l-80 96-20-17 81-96zm-55-46l-80 96-20-17 81-96z'),
																_1: {ctor: '[]'}
															},
															{ctor: '[]'}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$svg$Svg$path,
																{
																	ctor: '::',
																	_0: _elm_lang$svg$Svg_Attributes$d('M105 237c4 37 11 78 68 82 21 1 63-5 77-63 19-56 75-72 113-42 22 14 28 37 29 54-1 54-32 101-72 122-46 27-110 28-166-13-25-24-60-67-49-140z'),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$svg$Svg_Attributes$fill('#3d5897'),
																		_1: {ctor: '[]'}
																	}
																},
																{ctor: '[]'}),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$svg$Svg$path,
																	{
																		ctor: '::',
																		_0: _elm_lang$svg$Svg_Attributes$d('M436 371l79 67-15 17-87-72 23-12z'),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
																			_1: {ctor: '[]'}
																		}
																	},
																	{ctor: '[]'}),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_elm_lang$svg$Svg$path,
																		{
																			ctor: '::',
																			_0: _elm_lang$svg$Svg_Attributes$d('M-2 357l83 98-20 17-83-98z'),
																			_1: {ctor: '[]'}
																		},
																		{ctor: '[]'}),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			_elm_lang$svg$Svg$path,
																			{
																				ctor: '::',
																				_0: _elm_lang$svg$Svg_Attributes$d('M-16 437l78-68 15 17-84 76-9-25z'),
																				_1: {
																					ctor: '::',
																					_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
																					_1: {ctor: '[]'}
																				}
																			},
																			{ctor: '[]'}),
																		_1: {
																			ctor: '::',
																			_0: A2(
																				_elm_lang$svg$Svg$path,
																				{
																					ctor: '::',
																					_0: _elm_lang$svg$Svg_Attributes$d('M26 334l83 97-20 17-83-97zm-56 47l83 98-20 17-83-98z'),
																					_1: {ctor: '[]'}
																				},
																				{ctor: '[]'}),
																			_1: {ctor: '[]'}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$kpFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$clipPath,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M5 0h683v512H5z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$clipPath('url(#a)'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$transform('translate(-5) scale(.93768)'),
							_1: {ctor: '[]'}
						}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$stroke('#000'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M776 512H-76V1h852z'),
									_1: {ctor: '[]'}
								}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#3e5698'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M776 419H-76v93h852z'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#c60000'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M776 398H-76V114h852z'),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$path,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill('#3e5698'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$d('M776 1H-76v92h852z'),
											_1: {ctor: '[]'}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$svg$Svg$path,
										{
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$d('M329 256c0 64-54 115-119 115-66 0-119-51-119-115 0-63 53-115 119-115 65 0 119 52 119 115z'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
												_1: {ctor: '[]'}
											}
										},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$svg$Svg$path,
											{
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$fill('#c40000'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$d('M176 271l-57-41h71l22-67 22 66h71l-58 41 21 66-57-40-58 41z'),
													_1: {ctor: '[]'}
												}
											},
											{ctor: '[]'}),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$kgFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$width('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$height('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$clipPath,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M-85 0h683v512H-85z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$clipPath('url(#a)'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$transform('translate(80) scale(.9375)'),
							_1: {ctor: '[]'}
						}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#be0027'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M-128 0h769v512h-769z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#ff0'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M356 256a99 99 0 1 1-199 0 99 99 0 0 1 199 0z'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#be0027'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M343 256a86 86 0 1 1-172 0 86 86 0 0 1 172 0z'),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$path,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill('#ff0'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$d('M331 256a74 74 0 1 1-148 0 74 74 0 0 1 148 0z'),
											_1: {ctor: '[]'}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$svg$Svg$circle,
										{
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$cx('257'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$cy('258'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$r('144'),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$fill('#ff0'),
														_1: {ctor: '[]'}
													}
												}
											}
										},
										{ctor: '[]'}),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$knFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$clipPath,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M-80 0h683v512H-80z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$clipPath('url(#a)'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$transform('translate(75) scale(.9375)'),
							_1: {ctor: '[]'}
						}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#ffe900'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M-108 0h738v512h-738z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M-108 0l1 369L467 0h-575z'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#35a100'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M631 512l-2-384L50 512h581z'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill('#c70000'),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$path,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M-108 397l1 115H18l612-410-1-101-124-1-613 397z'),
										_1: {ctor: '[]'}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$svg$Svg$path,
										{
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$d('M380 157l-9-43 33 27 38-24-18 41 34 27-44-1-18 41-9-42-45-2zM105 336l-10-43 34 27 38-24-18 41 34 27-45-1-17 41-10-42-44-2z'),
												_1: {ctor: '[]'}
											}
										},
										{ctor: '[]'}),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$kiFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$version('1'),
					_1: {ctor: '[]'}
				}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$clipPath,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M-86 0h682v512H-86z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$clipPath('url(#a)'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$transform('translate(81) scale(.9375)'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
							_1: {ctor: '[]'}
						}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#e73e2d'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M-164 0h836v306h-836z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M-165 303h840v209h-840V303z'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#005989'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M-166 454c132 33 270 2 404 16 122 3 246-9 366 2 51-89-129-28-178-41-179 3-358 0-536 0-20 3-40 11-56 23zm0-73c136 31 278 5 416 15 122-1 244 4 366-4-14-90-165-7-233-30-166 1-333-4-499-2-18 3-35 10-50 21zm0-72c126 34 258 0 387 16 122-5 245 2 367-1 90-60-132-35-179-36-129 5-259-3-388-1-61-3-134-18-187 22z'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {ctor: '[]'}
						}
					}
				}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$jpFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$clipPath,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M-88 32h640v480H-88z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$clipPath('url(#a)'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$transform('translate(88 -32)'),
							_1: {ctor: '[]'}
						}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M-128 32h720v480h-720z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$ellipse,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$rx('195'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$ry('195'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$transform('translate(-168 9) scale(.76554)'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$cy('344'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$cx('523'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$fill('#d30000'),
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}
				}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$khFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$version('1'),
					_1: {ctor: '[]'}
				}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$path,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fill('#032ea1'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '[]'}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fill('#e00025'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M0 120h640v240H0z'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$keFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$strokeMiterlimit('10'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M-29 48l2 1 47-81c3-1 4-4 6-6 1-2 5-9 6-18-7 6-11 13-12 15s-3 5-2 8z'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$id('a'),
								_1: {ctor: '[]'}
							}
						}
					},
					{ctor: '[]'}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v144H0z'),
						_1: {ctor: '[]'}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M0 336h640v144H0z'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#060'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$g,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$id('b'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$transform('matrix(3 0 0 3 320 240)'),
									_1: {ctor: '[]'}
								}
							},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$use,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$height('100%'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$width('100%'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#a'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$stroke('#000'),
													_1: {ctor: '[]'}
												}
											}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$svg$Svg$use,
										{
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$height('100%'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$width('100%'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#a'),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
														_1: {ctor: '[]'}
													}
												}
											}
										},
										{ctor: '[]'}),
									_1: {ctor: '[]'}
								}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$use,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$height('100%'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$width('100%'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#b'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$transform('matrix(-1 0 0 1 640 0)'),
												_1: {ctor: '[]'}
											}
										}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$path,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M641 168H377c-9-24-39-72-57-72s-48 48-57 72H0v144h263c9 24 39 72 57 72s48-48 57-72h264V168z'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$fill('#b00'),
											_1: {ctor: '[]'}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$svg$Svg$path,
										{
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$id('c'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$d('M377 312c9-24 15-48 15-72s-6-48-15-72c-9 24-15 48-15 72s6 48 15 72'),
												_1: {ctor: '[]'}
											}
										},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$svg$Svg$use,
											{
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$height('100%'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$width('100%'),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#c'),
														_1: {
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$transform('matrix(-1 0 0 1 640 0)'),
															_1: {ctor: '[]'}
														}
													}
												}
											},
											{ctor: '[]'}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$svg$Svg$g,
												{
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$transform('matrix(3 0 0 3 320 240)'),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
														_1: {ctor: '[]'}
													}
												},
												{
													ctor: '::',
													_0: A2(
														_elm_lang$svg$Svg$ellipse,
														{
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$rx('4'),
															_1: {
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$ry('6'),
																_1: {ctor: '[]'}
															}
														},
														{ctor: '[]'}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$svg$Svg$path,
															{
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$id('d'),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$svg$Svg_Attributes$d('M1 6s4 8 4 21-4 21-4 21z'),
																	_1: {ctor: '[]'}
																}
															},
															{ctor: '[]'}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$svg$Svg$use,
																{
																	ctor: '::',
																	_0: _elm_lang$svg$Svg_Attributes$height('100%'),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$svg$Svg_Attributes$width('100%'),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#d'),
																			_1: {
																				ctor: '::',
																				_0: _elm_lang$svg$Svg_Attributes$transform('scale(-1)'),
																				_1: {ctor: '[]'}
																			}
																		}
																	}
																},
																{ctor: '[]'}),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$svg$Svg$use,
																	{
																		ctor: '::',
																		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
																			_1: {
																				ctor: '::',
																				_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#d'),
																				_1: {
																					ctor: '::',
																					_0: _elm_lang$svg$Svg_Attributes$transform('scale(-1 1)'),
																					_1: {ctor: '[]'}
																				}
																			}
																		}
																	},
																	{ctor: '[]'}),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_elm_lang$svg$Svg$use,
																		{
																			ctor: '::',
																			_0: _elm_lang$svg$Svg_Attributes$height('100%'),
																			_1: {
																				ctor: '::',
																				_0: _elm_lang$svg$Svg_Attributes$width('100%'),
																				_1: {
																					ctor: '::',
																					_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#d'),
																					_1: {
																						ctor: '::',
																						_0: _elm_lang$svg$Svg_Attributes$transform('scale(1 -1)'),
																						_1: {ctor: '[]'}
																					}
																				}
																			}
																		},
																		{ctor: '[]'}),
																	_1: {ctor: '[]'}
																}
															}
														}
													}
												}),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$joFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$clipPath,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M-118 0h683v512h-683z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$clipPath('url(#a)'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$transform('translate(110) scale(.9375)'),
						_1: {ctor: '[]'}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$g,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M-118 0H906v171H-118z'),
									_1: {ctor: '[]'}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$path,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$d('M-118 171H906v170H-118z'),
											_1: {ctor: '[]'}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$svg$Svg$path,
										{
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$fill('#090'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$d('M-118 341H906v171H-118z'),
												_1: {ctor: '[]'}
											}
										},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$svg$Svg$path,
											{
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$d('M-118 512l512-256L-118 0v512z'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$fill('red'),
													_1: {ctor: '[]'}
												}
											},
											{ctor: '[]'}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$svg$Svg$path,
												{
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$d('M25 289l5-25H5l23-11-16-20 23 11 5-25 6 25 23-11-16 20 23 11H51l5 25-16-20z'),
														_1: {ctor: '[]'}
													}
												},
												{ctor: '[]'}),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$jmFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$g,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M0 0l320 240L0 480zm640 0L320 240l320 240z'),
						_1: {ctor: '[]'}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M0 0l320 240L640 0zm0 480l320-240 320 240z'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#090'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M640 0h-60L0 435v45h60L640 45z'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#fc0'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M0 0v45l580 435h60v-45L60 0z'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill('#fc0'),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {ctor: '[]'}
						}
					}
				}
			}),
		_1: {ctor: '[]'}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$isFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$clipPath,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$strokeWidth('0'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$clipPath('url(#a)'),
							_1: {ctor: '[]'}
						}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#003897'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 0h667v480H0z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 187h187V0h106v187h374v106H293v187H187V293H0V187z'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M0 213h213V0h54v213h400v54H267v213h-54V267H0v-54z'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill('#d72828'),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {ctor: '[]'}
						}
					}
				}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$jeFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0,0 30,18'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$clipPath,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M-5-6h40v30H-5z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$clipPath('url(#a)'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$transform('matrix(.75 0 0 .75 4 2)'),
						_1: {ctor: '[]'}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M-10-6h50v30h-50z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M-10-6v2L12 9l-22 13v2h3l22-13 21 13h4v-2L18 9 40-4v-2h-4L15 7-7-6h-3z'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill('#df112d'),
										_1: {ctor: '[]'}
									}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$g,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$transform('translate(-10 -6) scale(.20361)'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: A2(
										_elm_lang$svg$Svg$path,
										{
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$d('M133 22c3 13 1 29-13 38-14-9-16-25-13-38 3-3 19-5 26 0z'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$fill('#e8112d'),
												_1: {ctor: '[]'}
											}
										},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$svg$Svg$path,
											{
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$d('M120 20c5 0 10 1 13 3 0-5 2-9 5-12-3 0-4 1-4 2h-4c3 1 1 5-1 4-2 0-2-1-2-2a1 1 0 1 0-1 0l-3 1-2-3c0-2 3-3 3-2 0-2-2-3-3-2 1-2 1-4-1-6-2 2-2 4-1 6-1-1-4 0-4 2 1-1 4 0 4 2l-2 3-3-1a1 1 0 0 0 0-1 1 1 0 1 0-1 1l-2 2c-2 1-4-3-2-4h-3l-4-2 5 12c3-2 8-3 13-3z'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$fill('#f9dd16'),
													_1: {ctor: '[]'}
												}
											},
											{ctor: '[]'}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$svg$Svg$g,
												{
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$id('b'),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$stroke('#000'),
														_1: {
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$strokeWidth('0'),
															_1: {ctor: '[]'}
														}
													}
												},
												{
													ctor: '::',
													_0: A2(
														_elm_lang$svg$Svg$g,
														{
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$fill('#f9dd16'),
															_1: {ctor: '[]'}
														},
														{
															ctor: '::',
															_0: A2(
																_elm_lang$svg$Svg$path,
																{
																	ctor: '::',
																	_0: _elm_lang$svg$Svg_Attributes$d('M131 32l-1 1 2-1h1l-1-2 1 1-1-2h1-1v-1h-5l3-2c0-1-1-2-4-1l-6-1h4l4-1h-4l-5 1c0 2 4 2 7 2h3l-3 1h-8l-3-1-2 2v2c1 1 0 1-1 1l-2-1-2-1v1h1-1c-1 0 0 1 0 0h1l-1 1c0 1 0 0 0 0h2l-1 1h2l-1 1 3-1v1l2-1 1-1 2-1h4l2-1 5 1c1-1 2 0 2 1h-2v1h-1 1v1h1l1-1zm-19-8l-1 1h1v-1zm3 0l1 1h-1v-1z'),
																	_1: {ctor: '[]'}
																},
																{ctor: '[]'}),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$svg$Svg$path,
																	{
																		ctor: '::',
																		_0: _elm_lang$svg$Svg_Attributes$d('M113 24l2 1-1 2-1 1v-1l-1-2 1-1zm-4 3l1 2h2v1h1v-2c-2 0-2-1-3-2l-1-2-1-1v1l1 1-1-1v2h-1 1l1 1zm13 5v1l2-1-1 1 2-1h1v-1l-1-1c-1-2-4-1-4 0l2 1h-3l1 1h-1 1a2 2 0 0 1 1 0z'),
																		_1: {ctor: '[]'}
																	},
																	{ctor: '[]'}),
																_1: {ctor: '[]'}
															}
														}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$svg$Svg$path,
															{
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$d('M124 29h-2m-6 0v2m-4-6h1s0 1 0 0m2 0h-1s0 1 0 0m0 0v1h-1v-1'),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$svg$Svg_Attributes$fill('none'),
																	_1: {ctor: '[]'}
																}
															},
															{ctor: '[]'}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$svg$Svg$path,
																{
																	ctor: '::',
																	_0: _elm_lang$svg$Svg_Attributes$d('M113 28l1-1v-1l-1 1v-1 2z'),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$svg$Svg_Attributes$fill('#ff0016'),
																		_1: {ctor: '[]'}
																	}
																},
																{ctor: '[]'}),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$svg$Svg$path,
																	{
																		ctor: '::',
																		_0: _elm_lang$svg$Svg_Attributes$d('M113 26h-1m1 1h-1m1 0h-1m2-1h1m-1 1h1m-1 0h1'),
																		_1: {ctor: '[]'}
																	},
																	{ctor: '[]'}),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_elm_lang$svg$Svg$path,
																		{
																			ctor: '::',
																			_0: _elm_lang$svg$Svg_Attributes$d('M108 23l-1 1h1v-1zm0 1l-1 1h1v-1zm0 1l-1 1 1-1zm0 4l-1 1h1v-1zm0 1l-1 1 1-1zm0 1c0-1 0 0 0 0zm12 1l-1 1 1-1zm1 0l-1 1h1v-1zm-1-1c1 0 1 0 0 0zm9 1l-1 1 1-1zm0-1l-1 1h1v-1zm0 2zm-16-6l1 1v2l-1-2v-1z'),
																			_1: {
																				ctor: '::',
																				_0: _elm_lang$svg$Svg_Attributes$fill('#0051ba'),
																				_1: {ctor: '[]'}
																			}
																		},
																		{ctor: '[]'}),
																	_1: {ctor: '[]'}
																}
															}
														}
													}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$svg$Svg$use,
													{
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#b'),
														_1: {
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$transform('matrix(.9 0 0 .9 12 14)'),
															_1: {
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$height('18'),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$svg$Svg_Attributes$width('30'),
																	_1: {ctor: '[]'}
																}
															}
														}
													},
													{ctor: '[]'}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$svg$Svg$use,
														{
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#b'),
															_1: {
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$transform('matrix(.67 0 0 .75 39 28)'),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$svg$Svg_Attributes$height('18'),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$svg$Svg_Attributes$width('30'),
																		_1: {ctor: '[]'}
																	}
																}
															}
														},
														{ctor: '[]'}),
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}),
							_1: {ctor: '[]'}
						}
					}
				}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$itFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$g,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#009246'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 0h213v480H0z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#ce2b37'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M427 0h213v480H427z'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}
				}
			}),
		_1: {ctor: '[]'}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$ioFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$width('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$height('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$clipPath,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 0h683v512H0z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$clipPath('url(#a)'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$transform('scale(.9375)'),
						_1: {ctor: '[]'}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M0 0h1024v512H0z'),
									_1: {ctor: '[]'}
								}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#000063'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M652 434c-30 0-45 34-76 34-61 0-76-34-122-34-30 0-46 34-76 34-61 0-76-34-122-34-30 0-46 34-76 34-61 0-76-34-122-34-31 0-40 25-58 25v43c18 0 27-24 58-24 46 0 61 34 122 34 30 0 46-34 76-34 46 0 61 34 122 34 30 0 46-34 76-34 46 0 61 34 122 34 31 0 46-34 76-34 441 42 436-32 0-44zm0-85c-30 0-45 34-76 34-61 0-76-34-122-34-30 0-46 34-76 34-61 0-76-34-122-34-30 0-46 34-76 34-61 0-76-34-122-34-31 0-40 25-58 25v43c18 0 27-24 58-24 46 0 61 34 122 34 30 0 46-34 76-34 46 0 61 34 122 34 30 0 46-34 76-34 46 0 61 34 122 34 31 0 46-34 76-34 441 42 436-32 0-43zm0-84c-30 0-45 34-76 34-61 0-76-34-122-34-30 0-46 34-76 34-61 0-76-34-122-34-30 0-46 34-76 34-61 0-76-34-122-34-31 0-40 24-58 24v43c18 0 27-24 58-24 46 0 61 34 122 34 30 0 46-34 76-34 46 0 61 34 122 34 30 0 46-34 76-34 46 0 61 34 122 34 31 0 46-34 76-34 441 42 436-32 0-44zm0-85c-30 0-45 34-76 34-61 0-76-34-122-34-30 0-46 34-76 34-61 0-76-34-122-34-30 0-46 34-76 34-61 0-76-34-122-34-30 0-40 24-58 24v44c18 0 27-25 58-25 46 1 61 35 122 35 30 0 46-34 76-34 46 0 61 34 122 34 30 0 46-34 76-34 46 0 61 34 122 34 31 0 46-34 76-34 441 41 436-32 0-44zm0-85c-30 0-45 34-76 34-61 0-76-34-122-34-30 0-46 34-76 34-61 0-76-34-122-34-30 0-46 34-76 34-61 0-76-34-122-34-30 0-40 24-58 24v44c18 0 27-25 58-25 46 0 61 34 122 34 30 0 46-34 76-34 46 0 61 34 122 34 30 0 46-34 76-34 46 0 61 34 122 34 31 0 46-34 76-34 441 42 436-32 0-43zm0-85c-30 0-45 34-76 34-61 0-76-34-122-34-30 0-46 34-76 34-61 0-76-34-122-34-30 0-46 34-76 34-61 0-76-34-122-34-30 0-40 24-58 24v44c18 0 27-24 58-24 46 0 61 34 122 34 30 0 46-34 76-34 46 0 61 34 122 34 30 0 46-34 76-34 46 0 61 34 122 34 31 0 46-34 76-34 441 41 436-32 0-44z'),
										_1: {ctor: '[]'}
									}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#000063'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$d('M0 0h261v158H0z'),
											_1: {ctor: '[]'}
										}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$path,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$d('M0 0v18l232 140h29v-18L29 0H0zm261 0v18L29 158H0v-18L232 0h29z'),
											_1: {ctor: '[]'}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$svg$Svg$path,
										{
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$d('M109 0v158h43V0h-43zM0 53v52h261V53H0z'),
												_1: {ctor: '[]'}
											}
										},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$svg$Svg$path,
											{
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$fill('#c00'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$d('M0 63v32h261V63H0zM118 0v158h26V0h-26zM0 158l87-53h20l-87 53H0zM0 0l87 53H68L0 12V0zm155 53l87-53h19l-87 53h-19zm106 105l-87-53h20l67 41v12z'),
													_1: {ctor: '[]'}
												}
											},
											{ctor: '[]'}),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$irFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$version('1'),
					_1: {ctor: '[]'}
				}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$clipPath,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M-85 0h682v512H-85z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$clipPath('url(#a)'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$transform('translate(80) scale(.9375)'),
							_1: {ctor: '[]'}
						}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M-192 0h896v512h-896z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#da0000'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M-192 344h896v168h-896z'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#239f40'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M-192 0h896v168h-896z'),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$g,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$svg$Svg$path,
											{
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$d('M-184 143h49v4h-49zm8 17h3v4h-3zm41 0v4h-9v-4zm6-17h3v21h-3z'),
												_1: {ctor: '[]'}
											},
											{ctor: '[]'}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$svg$Svg$path,
												{
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$d('M-110 160v4h-18v-4zm-34-8h3v12h-3z'),
													_1: {ctor: '[]'}
												},
												{ctor: '[]'}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$svg$Svg$path,
													{
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$d('M-113 143h4v21h-4zm-8 0h3v21h-3zm-45 8v4h-18v-4zm40 0v4h-18v-4z'),
														_1: {ctor: '[]'}
													},
													{ctor: '[]'}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$svg$Svg$path,
														{
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$d('M-144 152h3v12h-3z'),
															_1: {ctor: '[]'}
														},
														{ctor: '[]'}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$svg$Svg$path,
															{
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$d('M-144 152h3v12h-3z'),
																_1: {ctor: '[]'}
															},
															{ctor: '[]'}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$svg$Svg$path,
																{
																	ctor: '::',
																	_0: _elm_lang$svg$Svg_Attributes$d('M-144 152h3v12h-3zm-40 0h4v12h-4zm29 0h3v12h-3zm-14 0h3v12h-3z'),
																	_1: {ctor: '[]'}
																},
																{ctor: '[]'}),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$svg$Svg$path,
																	{
																		ctor: '::',
																		_0: _elm_lang$svg$Svg_Attributes$d('M-153 160v4h-15v-4zm1-9v4h-9v-4z'),
																		_1: {ctor: '[]'}
																	},
																	{ctor: '[]'}),
																_1: {ctor: '[]'}
															}
														}
													}
												}
											}
										}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$svg$Svg$g,
										{
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$fill('#da0000'),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: A2(
												_elm_lang$svg$Svg$path,
												{
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$d('M280 197c8 11 34 68-16 106-24 17-9 18-8 21 38-20 50-47 50-72 0-24-13-46-26-55z'),
													_1: {ctor: '[]'}
												},
												{ctor: '[]'}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$svg$Svg$path,
													{
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$d('M285 195c19 9 59 58 15 112 28-6 62-86-15-112zm-58 0a73 73 0 0 0-15 112c-28-6-62-86 15-112z'),
														_1: {ctor: '[]'}
													},
													{ctor: '[]'}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$svg$Svg$path,
														{
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$d('M232 197c-8 11-34 68 16 106 24 17 9 18 8 21-38-20-50-47-50-72 0-24 13-46 26-55z'),
															_1: {ctor: '[]'}
														},
														{ctor: '[]'}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$svg$Svg$path,
															{
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$d('M304 319c-15 0-33-2-47-9l6 12c13 1 32 2 41-3zm-95 0c15 0 34-2 48-9l-7 12c-13 1-31 2-41-3zm27-139c3 8 11 10 20 5 6 4 16 4 19-4 2 20-18 15-19 11-8 8-22 3-20-12z'),
																_1: {ctor: '[]'}
															},
															{ctor: '[]'}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$svg$Svg$path,
																{
																	ctor: '::',
																	_0: _elm_lang$svg$Svg_Attributes$d('M256 332l8-9 1-121-9-8-9 8 2 121 7 9z'),
																	_1: {ctor: '[]'}
																},
																{ctor: '[]'}),
															_1: {ctor: '[]'}
														}
													}
												}
											}
										}),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$iqFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$path,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M0 160h640v160H0z'),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '[]'}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fill('#ce1126'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v160H0z'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M0 320h640v160H0z'),
						_1: {ctor: '[]'}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$g,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$transform('translate(-179 -93) scale(1.75182)'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#007a3d'),
								_1: {ctor: '[]'}
							}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M326 173l-2-1h1c3 1 4 0 6-1l1-1 1 1h2l2-2h1c1 2 0 4-2 4h-10zm5-5l-1-4 1-1 1 3c0 2 0 3-1 2zm-67-2l3 5-2 1-21 21h24c0-6 5-6 8-8 2 3 6 3 7 7v17h-67c-1 6-6 10-12 8 2-2 5-3 6-6 1-6-2-10-4-14l7-3c-2 7 6 6 13 6 0-3 0-6-2-6l6-4v9h47c0-3 0-8-2-8s0 7-2 7h-35l-1-7 12-11 15-14zm89 0l7 4-1 3v27c3 0 4-1 5-2l3 11h-14v-43zm-20 14l6-4v23h4l-1-26 6-6v42h-34c0-8 0-17 10-15v-4l-1-1 6-6 1 16h3v-19zm-12 19c1 1 3 1 3-1-1-1-4-1-3 1z'),
									_1: {ctor: '[]'}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$circle,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$cx('224'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$cy('214'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$r('2'),
												_1: {ctor: '[]'}
											}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$svg$Svg$path,
										{
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$d('M287 166l8 4-2 3v27l6-2c0 4 3 8 3 11h-15v-43z'),
											_1: {ctor: '[]'}
										},
										{ctor: '[]'}),
									_1: {ctor: '[]'}
								}
							}
						}),
					_1: {ctor: '[]'}
				}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$inFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$path,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fill('#f93'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v160H0z'),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '[]'}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M0 160h640v160H0z'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#128807'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M0 320h640v160H0z'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$g,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$transform('matrix(3.2 0 0 3.2 320 240)'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$circle,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$r('20'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill('#008'),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$circle,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$r('18'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
											_1: {ctor: '[]'}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$svg$Svg$circle,
										{
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$r('4'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$fill('#008'),
												_1: {ctor: '[]'}
											}
										},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$svg$Svg$g,
											{
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$id('d'),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: A2(
													_elm_lang$svg$Svg$g,
													{
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$id('c'),
														_1: {ctor: '[]'}
													},
													{
														ctor: '::',
														_0: A2(
															_elm_lang$svg$Svg$g,
															{
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$id('b'),
																_1: {ctor: '[]'}
															},
															{
																ctor: '::',
																_0: A2(
																	_elm_lang$svg$Svg$g,
																	{
																		ctor: '::',
																		_0: _elm_lang$svg$Svg_Attributes$id('a'),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$svg$Svg_Attributes$fill('#008'),
																			_1: {ctor: '[]'}
																		}
																	},
																	{
																		ctor: '::',
																		_0: A2(
																			_elm_lang$svg$Svg$circle,
																			{
																				ctor: '::',
																				_0: _elm_lang$svg$Svg_Attributes$r('1'),
																				_1: {
																					ctor: '::',
																					_0: _elm_lang$svg$Svg_Attributes$transform('rotate(8 -9 134)'),
																					_1: {ctor: '[]'}
																				}
																			},
																			{ctor: '[]'}),
																		_1: {
																			ctor: '::',
																			_0: A2(
																				_elm_lang$svg$Svg$path,
																				{
																					ctor: '::',
																					_0: _elm_lang$svg$Svg_Attributes$d('M0 18L1 7 0 2l-1 5 1 11z'),
																					_1: {ctor: '[]'}
																				},
																				{ctor: '[]'}),
																			_1: {ctor: '[]'}
																		}
																	}),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_elm_lang$svg$Svg$use,
																		{
																			ctor: '::',
																			_0: _elm_lang$svg$Svg_Attributes$height('100%'),
																			_1: {
																				ctor: '::',
																				_0: _elm_lang$svg$Svg_Attributes$width('100%'),
																				_1: {
																					ctor: '::',
																					_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#a'),
																					_1: {
																						ctor: '::',
																						_0: _elm_lang$svg$Svg_Attributes$transform('rotate(15)'),
																						_1: {ctor: '[]'}
																					}
																				}
																			}
																		},
																		{ctor: '[]'}),
																	_1: {ctor: '[]'}
																}
															}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$svg$Svg$use,
																{
																	ctor: '::',
																	_0: _elm_lang$svg$Svg_Attributes$height('100%'),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$svg$Svg_Attributes$width('100%'),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#b'),
																			_1: {
																				ctor: '::',
																				_0: _elm_lang$svg$Svg_Attributes$transform('rotate(30)'),
																				_1: {ctor: '[]'}
																			}
																		}
																	}
																},
																{ctor: '[]'}),
															_1: {ctor: '[]'}
														}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$svg$Svg$use,
														{
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$height('100%'),
															_1: {
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$width('100%'),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#c'),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$svg$Svg_Attributes$transform('rotate(60)'),
																		_1: {ctor: '[]'}
																	}
																}
															}
														},
														{ctor: '[]'}),
													_1: {ctor: '[]'}
												}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$svg$Svg$use,
												{
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$height('100%'),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$width('100%'),
														_1: {
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#d'),
															_1: {
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$transform('rotate(120)'),
																_1: {ctor: '[]'}
															}
														}
													}
												},
												{ctor: '[]'}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$svg$Svg$use,
													{
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$height('100%'),
														_1: {
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$width('100%'),
															_1: {
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#d'),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$svg$Svg_Attributes$transform('rotate(-120)'),
																	_1: {ctor: '[]'}
																}
															}
														}
													},
													{ctor: '[]'}),
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						}),
					_1: {ctor: '[]'}
				}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$imFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$version('1'),
					_1: {ctor: '[]'}
				}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$clipPath,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M-78 0h683v512H-78z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$clipPath('url(#a)'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$transform('translate(73) scale(.94)'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
							_1: {ctor: '[]'}
						}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#ba0000'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M629 512h-731V0h731z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M219 207a276 276 0 0 0-58 66c-7 5-11 13-10 20 0 9 4 15 8 21 3 3 6 5 9 5 7 1 8 3 11 4 14 19 34 32 48 43 10 5 16 10 18 12 4 9 4 16 3 20l-11 41c-2 11 8 9 9 6 4-5 10-1 20-34l12-17 5-2c8-9 2-15-2-16l-9-4-12-10a196 196 0 0 0-46-60l-11-5c-3-1-1-5 1-6 20-11 36-23 55-35l3-2-7-39-32-12-4 4z'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$stroke('#000'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$strokeWidth('3'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
											_1: {ctor: '[]'}
										}
									}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M265 258c7 5 51 14 57 15 9-1 20 0 29 3 8 4 17 3 22-1 8-4 11-12 14-18 2-3 2-7 0-10-2-7-1-8-1-12 9-20 11-45 13-63l2-21c5-8 13-11 16-13l41-10c11-4 4-11 2-10-7-1-7-9-40-1l-21-3-5-3c-11-2-13 5-12 10l1 10-4 15c-10 12-26 49-27 57 0 6-3 5-2 12 0 5-1 2 1 12 1 4-3 3-6 2-19-12-37-19-57-30l-3-2-31 25 6 34 5 2z'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$stroke('#000'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$strokeWidth('3'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
												_1: {ctor: '[]'}
											}
										}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$path,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M284 191c0-8-16-50-19-56-5-6-11-17-13-25-2-9-6-16-13-19-8-4-15-2-23-2-3 1-6 3-8 6-4 5-6 5-9 7-23 4-44 16-60 24-9 6-16 9-19 10-10 0-16-5-19-7l-32-28c-9-7-11 3-9 4 3 7-3 11 21 34l10 19-1 6c5 10 12 8 15 5l8-7 15-5c15 2 55-5 62-9 6-3 6 0 11-4l10-8c3-2 5 1 5 4 1 22 4 42 6 64v4l38 12 25-23-1-6z'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$stroke('#000'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$strokeWidth('3'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
													_1: {ctor: '[]'}
												}
											}
										}
									},
									{ctor: '[]'}),
								_1: {ctor: '[]'}
							}
						}
					}
				}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$ilFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$clipPath,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M-88 0h683v512H-88z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$clipPath('url(#a)'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$transform('translate(82) scale(.94)'),
							_1: {ctor: '[]'}
						}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M619 512h-731V0h731z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#00c'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M619 115h-731V48h731zm0 351h-731v-68h731zM136 191l111 191 112-190-223-1z'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M226 318l21 35 21-35h-42z'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$path,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M136 321l110-192 113 191-223 1z'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$fill('#00c'),
											_1: {ctor: '[]'}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$svg$Svg$path,
										{
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$d('M226 192l21-36 21 35-42 1zm-44 79l-22 36h41l-19-36zm-21-66h41l-20 36-21-36zm151 67l21 35h-42l21-35zm20-67h-41l20 36 21-36zm-114 0l-28 51 29 50 52 2 32-52-29-52-56 1z'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
												_1: {ctor: '[]'}
											}
										},
										{ctor: '[]'}),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$idFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$g,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#e70011'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v249H0z'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 240h640v240H0z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {ctor: '[]'}
				}
			}),
		_1: {ctor: '[]'}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$ieFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$g,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#009A49'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 0h213v480H0z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#FF7900'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M427 0h213v480H427z'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}
				}
			}),
		_1: {ctor: '[]'}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$huFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$g,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M640 480H0V0h640z'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#388d00'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M640 480H0V320h640z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#d43516'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M640 160H0V0h640z'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}
				}
			}),
		_1: {ctor: '[]'}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$hrFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$version('1'),
					_1: {ctor: '[]'}
				}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$path,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fill('#171796'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '[]'}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v320H0z'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('red'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v160H0z'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {ctor: '[]'}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$htFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$version('1'),
					_1: {ctor: '[]'}
				}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$path,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fill('#d21034'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '[]'}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fill('#00209f'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v240H0z'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$g,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#f1b517'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$stroke('#000'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$strokeWidth('0'),
								_1: {ctor: '[]'}
							}
						}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M244 180h152v120H244z'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$stroke('none'),
										_1: {ctor: '[]'}
									}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M350 267l-30 1h-31l-22 7c-7 2-6 4-11 5l-7 1-5 2v17h152v-16l-5-2-8-2c-5-1-4-3-10-5-7-1-23-8-23-8z'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill('#016a16'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$stroke('none'),
											_1: {ctor: '[]'}
										}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$g,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$transform('translate(-80) scale(1.6)'),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$svg$Svg$g,
											{
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$id('a'),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: A2(
													_elm_lang$svg$Svg$path,
													{
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$d('M245 144l1-1 2 11v4l-3-14z'),
														_1: {ctor: '[]'}
													},
													{ctor: '[]'}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$svg$Svg$path,
														{
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$d('M246 155l-5-12h2l5 14-2-2zm-4-4l-3-6h1l5 9-3-3z'),
															_1: {ctor: '[]'}
														},
														{ctor: '[]'}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$svg$Svg$path,
															{
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$d('M242 151l-11-12c-4 3-3 8-3 8l13 10 1-6z'),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$svg$Svg_Attributes$fill('#0a328c'),
																	_1: {ctor: '[]'}
																}
															},
															{ctor: '[]'}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$svg$Svg$path,
																{
																	ctor: '::',
																	_0: _elm_lang$svg$Svg_Attributes$d('M249 158l-9-8c-3 0 0 5 0 6l9 8v-6z'),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$svg$Svg_Attributes$fill('#d20014'),
																		_1: {ctor: '[]'}
																	}
																},
																{ctor: '[]'}),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$svg$Svg$path,
																	{
																		ctor: '::',
																		_0: _elm_lang$svg$Svg_Attributes$d('M237 155l-14-12c-3 3-1 10-1 10l15 8v-6z'),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$svg$Svg_Attributes$fill('#0a328c'),
																			_1: {ctor: '[]'}
																		}
																	},
																	{ctor: '[]'}),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_elm_lang$svg$Svg$path,
																		{
																			ctor: '::',
																			_0: _elm_lang$svg$Svg_Attributes$d('M249 164l-12-10c-4 1-1 7 0 8l12 6v-4z'),
																			_1: {
																				ctor: '::',
																				_0: _elm_lang$svg$Svg_Attributes$fill('#d20014'),
																				_1: {ctor: '[]'}
																			}
																		},
																		{ctor: '[]'}),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			_elm_lang$svg$Svg$path,
																			{
																				ctor: '::',
																				_0: _elm_lang$svg$Svg_Attributes$d('M236 162l-18-11c-2 2 0 6 0 6l1 6c0 2 1 4 3 5 1 6 8 7 10 1l4-7z'),
																				_1: {
																					ctor: '::',
																					_0: _elm_lang$svg$Svg_Attributes$fill('#0a328c'),
																					_1: {ctor: '[]'}
																				}
																			},
																			{ctor: '[]'}),
																		_1: {
																			ctor: '::',
																			_0: A2(
																				_elm_lang$svg$Svg$path,
																				{
																					ctor: '::',
																					_0: _elm_lang$svg$Svg_Attributes$d('M248 169l-12-8c-4 1 0 8 0 9l12 4v-5z'),
																					_1: {
																						ctor: '::',
																						_0: _elm_lang$svg$Svg_Attributes$fill('#d20014'),
																						_1: {ctor: '[]'}
																					}
																				},
																				{ctor: '[]'}),
																			_1: {ctor: '[]'}
																		}
																	}
																}
															}
														}
													}
												}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$svg$Svg$use,
												{
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$height('100%'),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$width('100%'),
														_1: {
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#a'),
															_1: {
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$transform('matrix(-1 0 0 1 500 0)'),
																_1: {ctor: '[]'}
															}
														}
													}
												},
												{ctor: '[]'}),
											_1: {ctor: '[]'}
										}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$svg$Svg$g,
										{
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$transform('translate(-80) scale(1.6)'),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: A2(
												_elm_lang$svg$Svg$path,
												{
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$d('M249 126l-1 9h3v-9l3-1-1-3h-7v3l3 1z'),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$fill('#016a16'),
														_1: {
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$stroke('none'),
															_1: {ctor: '[]'}
														}
													}
												},
												{ctor: '[]'}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$svg$Svg$g,
													{
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$id('b'),
														_1: {
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$fill('#016a16'),
															_1: {ctor: '[]'}
														}
													},
													{
														ctor: '::',
														_0: A2(
															_elm_lang$svg$Svg$path,
															{
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$d('M250 122c-8-8-14-4-16-3h3l-1 1 3-1-1 1 2-1-1 1h1c1 0 0 0 0 0 2 0 5 2 5 3'),
																_1: {ctor: '[]'}
															},
															{ctor: '[]'}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$svg$Svg$path,
																{
																	ctor: '::',
																	_0: _elm_lang$svg$Svg_Attributes$d('M248 123c-1-2-16-5-19 1l3-1v1l1-2v2l1-1v1l2-2v1l2-1-1 1m9 1c-2 0-10 3-12 6a13 13 0 0 1 1-1l1 1v-1 1h2v-1 1l1-1v1l1-2v1l1-1v1-2l1 1 1-1v1l4-3'),
																	_1: {ctor: '[]'}
																},
																{ctor: '[]'}),
															_1: {ctor: '[]'}
														}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$svg$Svg$use,
														{
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$height('100%'),
															_1: {
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$width('100%'),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#b'),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$svg$Svg_Attributes$transform('matrix(-1 0 0 1 500 0)'),
																		_1: {ctor: '[]'}
																	}
																}
															}
														},
														{ctor: '[]'}),
													_1: {ctor: '[]'}
												}
											}
										}),
									_1: {ctor: '[]'}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$hnFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$version('1'),
					_1: {ctor: '[]'}
				}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$path,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$d('M0 2h640v480H0z'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fill('#0073cf'),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '[]'}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M0 160h640v160H0z'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$hkFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$clipPath,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M-89 0h683v512H-89z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$clipPath('url(#a)'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$transform('translate(83) scale(.94)'),
						_1: {ctor: '[]'}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#ba0000'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M618 512h-731V0h731z'),
									_1: {ctor: '[]'}
								}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M242 248s-52-22-44-80c7-28 19-47 42-57l33-6-6 9c-3 7-1 13 2 19 4 7 7 14 8 24 1 13-4 25-15 33-6 5-14 7-21 13-5 5-8 10-9 18 0 16 5 18 10 27z'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
										_1: {ctor: '[]'}
									}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M235 242c-20-18-18-63-3-78'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$stroke('#ba0000'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$strokeWidth('2'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$fill('none'),
												_1: {ctor: '[]'}
											}
										}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$path,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$fill('#ba0000'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$d('M245 154l3 6-6-2-5 4 1-6-6-3 7-1v-6l4 5 6-1'),
												_1: {ctor: '[]'}
											}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$svg$Svg$path,
										{
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$d('M246 244s6-56 64-66c28-1 50 6 67 25 6 9 10 19 15 29-4-2-7-3-11-3-7-1-12 3-17 8-5 6-11 10-20 14-12 5-26 3-37-4-7-5-10-12-18-17-6-3-12-4-20-3-15 5-16 9-23 17z'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
													_1: {ctor: '[]'}
												}
											}
										},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$svg$Svg$path,
											{
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$d('M250 236c11-24 54-36 73-26'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$stroke('#ba0000'),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$strokeWidth('2'),
														_1: {
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$fill('none'),
															_1: {ctor: '[]'}
														}
													}
												}
											},
											{ctor: '[]'}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$svg$Svg$path,
												{
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$fill('#ba0000'),
														_1: {
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$d('M336 219l-4 5 1-7-6-2 6-2 1-6 3 6 6-1-4 4 3 6'),
															_1: {ctor: '[]'}
														}
													}
												},
												{ctor: '[]'}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$svg$Svg$path,
													{
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$d('M250 248s55-12 83 39c10 27 10 50-2 71-7 9-15 17-24 24v-11c-1-7-6-10-12-13-8-4-14-8-20-15-9-10-12-24-8-36 2-8 8-14 10-23 1-7 0-12-4-20-9-13-14-12-23-16z'),
														_1: {
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
															_1: {
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
																_1: {ctor: '[]'}
															}
														}
													},
													{ctor: '[]'}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$svg$Svg$path,
														{
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$d('M259 249c27 3 51 40 47 61'),
															_1: {
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$stroke('#ba0000'),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$svg$Svg_Attributes$strokeWidth('2'),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$svg$Svg_Attributes$fill('none'),
																		_1: {ctor: '[]'}
																	}
																}
															}
														},
														{ctor: '[]'}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$svg$Svg$path,
															{
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$svg$Svg_Attributes$fill('#ba0000'),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$svg$Svg_Attributes$d('M302 326l-6-3 7-2 1-6 3 6 6-2-4 5 3 6-6-3-5 5'),
																		_1: {ctor: '[]'}
																	}
																}
															},
															{ctor: '[]'}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$svg$Svg$path,
																{
																	ctor: '::',
																	_0: _elm_lang$svg$Svg_Attributes$d('M249 254s27 49-15 90c-22 17-44 24-68 18-11-4-20-10-30-16 4 0 8-1 11-3 6-3 8-9 9-16 1-8 4-15 9-23 7-11 19-18 32-18 9 1 16 4 25 3 6 0 12-2 18-8 10-13 8-17 9-27z'),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
																			_1: {ctor: '[]'}
																		}
																	}
																},
																{ctor: '[]'}),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$svg$Svg$path,
																	{
																		ctor: '::',
																		_0: _elm_lang$svg$Svg_Attributes$d('M250 262c5 27-24 61-45 63'),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$svg$Svg_Attributes$stroke('#ba0000'),
																			_1: {
																				ctor: '::',
																				_0: _elm_lang$svg$Svg_Attributes$strokeWidth('2'),
																				_1: {
																					ctor: '::',
																					_0: _elm_lang$svg$Svg_Attributes$fill('none'),
																					_1: {ctor: '[]'}
																				}
																			}
																		}
																	},
																	{ctor: '[]'}),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_elm_lang$svg$Svg$path,
																		{
																			ctor: '::',
																			_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
																			_1: {
																				ctor: '::',
																				_0: _elm_lang$svg$Svg_Attributes$fill('#ba0000'),
																				_1: {
																					ctor: '::',
																					_0: _elm_lang$svg$Svg_Attributes$d('M189 325l1-6 3 6 7-1-5 4 3 6-6-3-4 5 1-7-7-3'),
																					_1: {ctor: '[]'}
																				}
																			}
																		},
																		{ctor: '[]'}),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			_elm_lang$svg$Svg$path,
																			{
																				ctor: '::',
																				_0: _elm_lang$svg$Svg_Attributes$d('M243 253s-38 41-90 16c-24-16-38-34-40-59 0-11 2-22 5-33l6 9c6 5 12 5 19 4 8-2 15-2 25 0 13 3 23 13 27 25 2 8 2 16 5 24 3 6 7 10 14 14 16 5 19 2 29 0z'),
																				_1: {
																					ctor: '::',
																					_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
																					_1: {
																						ctor: '::',
																						_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
																						_1: {ctor: '[]'}
																					}
																				}
																			},
																			{ctor: '[]'}),
																		_1: {
																			ctor: '::',
																			_0: A2(
																				_elm_lang$svg$Svg$path,
																				{
																					ctor: '::',
																					_0: _elm_lang$svg$Svg_Attributes$d('M235 257c-23 13-65-3-74-22'),
																					_1: {
																						ctor: '::',
																						_0: _elm_lang$svg$Svg_Attributes$stroke('#ba0000'),
																						_1: {
																							ctor: '::',
																							_0: _elm_lang$svg$Svg_Attributes$strokeWidth('2'),
																							_1: {
																								ctor: '::',
																								_0: _elm_lang$svg$Svg_Attributes$fill('none'),
																								_1: {ctor: '[]'}
																							}
																						}
																					}
																				},
																				{ctor: '[]'}),
																			_1: {
																				ctor: '::',
																				_0: A2(
																					_elm_lang$svg$Svg$path,
																					{
																						ctor: '::',
																						_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
																						_1: {
																							ctor: '::',
																							_0: _elm_lang$svg$Svg_Attributes$fill('#ba0000'),
																							_1: {
																								ctor: '::',
																								_0: _elm_lang$svg$Svg_Attributes$d('M155 220l7-1-5 5 3 6-5-3-5 5 1-7-6-3 6-1 1-7'),
																								_1: {ctor: '[]'}
																							}
																						}
																					},
																					{ctor: '[]'}),
																				_1: {ctor: '[]'}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$hmFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$path,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fill('#006'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '[]'}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M0 0v31l373 243h46v-31L47 0H0zm419 0v31L47 274H0v-31L373 0h46z'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M175 0v274h70V0h-70zM0 91v91h419V91H0z'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M0 109v55h419v-55H0zM189 0v274h42V0h-42zM0 274l140-92h31L31 274H0zM0 0l140 91h-31L0 20V0zm248 91L388 0h31L280 91h-32zm171 183l-139-92h31l108 71v21z'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#c00'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M126 416l-28-2 24-14-16-23 26 10 9-26 8 26 26-10-15 23 23 14-27 2 4 28-19-20-19 20m370 2l-19-2 17-10-11-16 18 7 6-19 6 19 18-7-11 16 17 10-19 2 2 19-13-14-14 14m3-307l-19-2 17-10-11-16 18 7 6-18 6 18 18-7-11 16 17 10-19 2 2 19-13-14-14 14m-105 98l-19-2 17-10-11-16 18 7 6-19 6 19 18-7-11 16 17 10-19 2 2 19-13-14-13 14m206-48l-19-2 16-10-10-16 18 7 6-18 6 18 18-7-11 16 17 10-20 2 3 19-13-14-14 14m-22 41l-9 8 3 12-11-7-11 7 3-12-9-8 12-1 5-12 5 12'),
										_1: {ctor: '[]'}
									}
								}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}
				}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$gwFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$path,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fill('#ce1126'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M0 0h220v480H0z'),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '[]'}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fill('#fcd116'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M220 0h420v240H220z'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#009e49'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M220 240h420v240H220z'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$g,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$id('b'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$transform('matrix(80 0 0 80 110 240)'),
								_1: {ctor: '[]'}
							}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$id('a'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M0-1v1h1'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$transform('rotate(18 0 -1)'),
											_1: {ctor: '[]'}
										}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$use,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$height('100%'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$width('100%'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#a'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$transform('scale(-1 1)'),
													_1: {ctor: '[]'}
												}
											}
										}
									},
									{ctor: '[]'}),
								_1: {ctor: '[]'}
							}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$use,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$height('100%'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$width('100%'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#b'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$transform('rotate(72 110 240)'),
											_1: {ctor: '[]'}
										}
									}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$use,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$height('100%'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$width('100%'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#b'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$transform('rotate(144 110 240)'),
												_1: {ctor: '[]'}
											}
										}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$use,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$height('100%'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$width('100%'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#b'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$transform('rotate(-144 110 240)'),
													_1: {ctor: '[]'}
												}
											}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$svg$Svg$use,
										{
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$height('100%'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$width('100%'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#b'),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$transform('rotate(-72 110 240)'),
														_1: {ctor: '[]'}
													}
												}
											}
										},
										{ctor: '[]'}),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$gyFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$g,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#399408'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M2 0h638v480H2z'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M0 0l620 241L0 480V0z'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 20c4 0 559 218 556 220L2 463 0 20z'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#ffde08'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M2 1c2 0 291 241 291 241L2 477V1z'),
									_1: {ctor: '[]'}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$path,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M0 34c2-15 261 208 261 208L0 452V34z'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$fill('#de2110'),
											_1: {ctor: '[]'}
										}
									},
									{ctor: '[]'}),
								_1: {ctor: '[]'}
							}
						}
					}
				}
			}),
		_1: {ctor: '[]'}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$guFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$version('1'),
					_1: {ctor: '[]'}
				}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$path,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fill('#be0027'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
						_1: {ctor: '[]'}
					}
				}
			},
			{ctor: '[]'}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#3b5aa3'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M26 27h589v429H26z'),
							_1: {ctor: '[]'}
						}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M314 413c3 2 7 1 9 0a197 197 0 0 0 0-346c-3-2-6-2-9 0a199 199 0 0 0 0 346z'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#cbe0e5'),
								_1: {ctor: '[]'}
							}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M314 417c2 2 7 1 9 0 101-76 102-123 97-123H219c-3 0 2 48 95 123z'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#add2d9'),
									_1: {ctor: '[]'}
								}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M313 425c122-45 157-219 77-316-37-80-146-44-163 32-48 97-15 234 86 284zm0-18c114-50 133-219 52-306-68-53-132 28-137 94-16 79 13 171 85 212z'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#be0027'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
										_1: {ctor: '[]'}
									}
								}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}
				}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$gtFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$version('1'),
					_1: {ctor: '[]'}
				}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$path,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fill('#4997d0'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '[]'}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M213 0h214v480H213z'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$gqFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$version('1'),
					_1: {ctor: '[]'}
				}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$path,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fill('#e32118'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '[]'}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v320H0z'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#3e9a00'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v160H0z'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M0 0v480l180-240z'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#0073ce'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {ctor: '[]'}
				}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$grFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$clipPath,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 0h120v90H0z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$clipPath('url(#a)'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$transform('scale(5.33)'),
							_1: {ctor: '[]'}
						}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#0d5eaf'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 0h135v10H0z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M0 10h135v10H0z'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#0d5eaf'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M0 20h135v10H0z'),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$path,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$d('M0 30h135v10H0z'),
											_1: {ctor: '[]'}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$svg$Svg$path,
										{
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$fill('#0d5eaf'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$d('M0 40h135v10H0z'),
												_1: {ctor: '[]'}
											}
										},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$svg$Svg$path,
											{
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$d('M0 50h135v10H0z'),
													_1: {ctor: '[]'}
												}
											},
											{ctor: '[]'}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$svg$Svg$path,
												{
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$fill('#0d5eaf'),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$d('M0 60h135v10H0z'),
														_1: {ctor: '[]'}
													}
												},
												{ctor: '[]'}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$svg$Svg$path,
													{
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
														_1: {
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$d('M0 70h135v10H0z'),
															_1: {ctor: '[]'}
														}
													},
													{ctor: '[]'}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$svg$Svg$path,
														{
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$fill('#0d5eaf'),
															_1: {
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$d('M0 80h135v10H0zM0 0h50v50H0z'),
																_1: {ctor: '[]'}
															}
														},
														{ctor: '[]'}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$svg$Svg$g,
															{
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
																_1: {ctor: '[]'}
															},
															{
																ctor: '::',
																_0: A2(
																	_elm_lang$svg$Svg$path,
																	{
																		ctor: '::',
																		_0: _elm_lang$svg$Svg_Attributes$d('M20 0h10v50H20z'),
																		_1: {ctor: '[]'}
																	},
																	{ctor: '[]'}),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_elm_lang$svg$Svg$path,
																		{
																			ctor: '::',
																			_0: _elm_lang$svg$Svg_Attributes$d('M0 20h50v10H0z'),
																			_1: {ctor: '[]'}
																		},
																		{ctor: '[]'}),
																	_1: {ctor: '[]'}
																}
															}),
														_1: {ctor: '[]'}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$gmFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$clipPath,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0-48h640v480H0z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$clipPath('url(#a)'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$transform('translate(0 48)'),
							_1: {ctor: '[]'}
						}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('red'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0-128h640V85H0z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M0 85h640v36H0z'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#009'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M0 121h640v142H0z'),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$path,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$d('M0 263h640v36H0z'),
											_1: {ctor: '[]'}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$svg$Svg$path,
										{
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$fill('#090'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$d('M0 299h640v213H0z'),
												_1: {ctor: '[]'}
											}
										},
										{ctor: '[]'}),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$gpFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$g,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#00267f'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 0h213v480H0z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#f31830'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M427 0h213v480H427z'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}
				}
			}),
		_1: {ctor: '[]'}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$glFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$path,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '[]'}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M0 240h640v240H0zm80 0a160 160 0 1 0 320 0 160 160 0 0 0-320 0'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#d00c33'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$gnFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$g,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('red'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M0 0h213v480H0z'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#ff0'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M213 0h214v480H213z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#090'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M427 0h213v480H427z'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}
				}
			}),
		_1: {ctor: '[]'}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$giFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$path,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fill('#da000c'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '[]'}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v322H0z'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$g,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$transform('translate(-160) scale(1.875)'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$stroke('#000'),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$g,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$id('a'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#da000c'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$strokeLinecap('square'),
										_1: {ctor: '[]'}
									}
								}
							},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$path,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill('#000'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$stroke('none'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$d('M197 116h64v44h-64z'),
												_1: {ctor: '[]'}
											}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$svg$Svg$path,
										{
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$d('M230 154h-39l-9 6v6h48m-17-37c6 0 11 4 11 10v15h7V98h-40v56h12v-15c0-5 5-10 10-10z'),
											_1: {ctor: '[]'}
										},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$svg$Svg$path,
											{
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$fill('#000'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$stroke('none'),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$d('M205 60h18v34h-18z'),
														_1: {ctor: '[]'}
													}
												}
											},
											{ctor: '[]'}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$svg$Svg$path,
												{
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$d('M223 89h-16v-6h-12v6h-8v-6h-5v10h41m-36 0h35v5h-35zm14-45v35h6V73c0-3 2-6 6-7a7 7 0 0 1 7 7v10h6V48zm-2-5v5h29v-5zm-4-9v9h35v-9h-6v4h-6v-4h-10v4h-7v-4zm-13 126h48m31-3h-32l-10 5v7h42'),
													_1: {ctor: '[]'}
												},
												{ctor: '[]'}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$svg$Svg$path,
													{
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$d('M219 162h43'),
														_1: {
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$strokeLinecap('butt'),
															_1: {ctor: '[]'}
														}
													},
													{ctor: '[]'}),
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$use,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$height('100%'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$width('100%'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#a'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$transform('matrix(-1 0 0 1 512 0)'),
												_1: {ctor: '[]'}
											}
										}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$g,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill('#f8d80e'),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$svg$Svg$g,
											{
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$strokeLinecap('round'),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: A2(
													_elm_lang$svg$Svg$path,
													{
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$d('M273 150l-7 4a72 72 0 0 0-12 8l-2 4 2-1a4 4 0 0 1 3-1l4-3 10-6 3-2-1-3zm-13 7v4m3-5v4m2-6v4m3-5v4'),
														_1: {ctor: '[]'}
													},
													{ctor: '[]'}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$svg$Svg$path,
														{
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$d('M239 150l-1 3c5 3 11 5 16 9l4 3c1 1 0 2-1 2h-2l-1 2c3 2 6 1 8-2l-1-4-7-6-15-7zm15 8v3m3-1l-1 3m4-1l-2 3m3 3l-3-1m4-2l-3 1m-1 4l-1-3m0 0l-3 2m-9-16v3m6 0v4m-3-5v3'),
															_1: {ctor: '[]'}
														},
														{ctor: '[]'}),
													_1: {ctor: '[]'}
												}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$svg$Svg$path,
												{
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$d('M236 228v8h5v-4h7v4h5v-8zm0 11v8h17v-8h-5v4h-7v-4zm17-45h5v58h-5z'),
													_1: {ctor: '[]'}
												},
												{ctor: '[]'}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$svg$Svg$path,
													{
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$d('M253 199h5v50h-5zm3-20l10 7-10 6-11-6zm-15 4h-2v5h2l15 8 14-8h3v-5h-3l-14-8z'),
														_1: {ctor: '[]'}
													},
													{ctor: '[]'}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$svg$Svg$path,
														{
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$d('M255 164c-2 1-4 3-4 5v12c0 2 2 4 5 4 2 0 4-1 5-3l-2-1c0 2-2 2-3 2-2 0-3-1-3-3v-11c0-2 2-3 3-3h2c1-1 0-1-1-2h-2zm6 4l-2 2v7l2 1v-10z'),
															_1: {ctor: '[]'}
														},
														{ctor: '[]'}),
													_1: {ctor: '[]'}
												}
											}
										}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$svg$Svg$g,
										{
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$fill('#da000c'),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: A2(
												_elm_lang$svg$Svg$path,
												{
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$fill('#000'),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$d('M241 38h29v54h-29z'),
														_1: {
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$stroke('none'),
															_1: {ctor: '[]'}
														}
													}
												},
												{ctor: '[]'}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$svg$Svg$path,
													{
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$d('M239 38v45h9V70c0-3 2-8 8-8s8 5 8 8v13h9V38zm16 5h2v16h-2zm-9 3h3v12h-3zm17 0h3v12h-3zm-27-14v6h40v-6zm-4-7v7h48v-7h-6v4h-7v-4h-8v4h-6v-4h-8v4h-7v-4zm-9 73v4h66v-4zm-3-15v15h72V83h-7v6h-9v-6h-12v6h-16v-6h-12v6h-9v-6z'),
														_1: {ctor: '[]'}
													},
													{ctor: '[]'}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$svg$Svg$path,
														{
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$d('M229 102v55h13v-21c0-9 6-14 14-14s14 5 14 14v21h13v-55z'),
															_1: {
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$strokeLinejoin('round'),
																_1: {ctor: '[]'}
															}
														},
														{ctor: '[]'}),
													_1: {ctor: '[]'}
												}
											}
										}),
									_1: {ctor: '[]'}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$ghFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$path,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fill('#006b3f'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '[]'}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fill('#fcd116'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v320H0z'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#ce1126'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v160H0z'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M320 160l52 160-136-99h168l-136 99z'),
							_1: {ctor: '[]'}
						},
						{ctor: '[]'}),
					_1: {ctor: '[]'}
				}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$ggFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$path,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '[]'}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M256 0h128v480H256z'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#e8112d'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M0 176h640v128H0z'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#e8112d'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$id('a'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M110 287l23-24h210v-46H133l-23-24z'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#f9dd16'),
									_1: {ctor: '[]'}
								}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$use,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#a'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$transform('rotate(90 320 240)'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$height('24'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$width('36'),
											_1: {ctor: '[]'}
										}
									}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$use,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#a'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$transform('rotate(-90 320 240)'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$height('24'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$width('36'),
												_1: {ctor: '[]'}
											}
										}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$use,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#a'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$transform('rotate(180 320 240)'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$height('24'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$width('36'),
													_1: {ctor: '[]'}
												}
											}
										}
									},
									{ctor: '[]'}),
								_1: {ctor: '[]'}
							}
						}
					}
				}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$gfFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$path,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fill('#078930'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480z'),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '[]'}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fill('#fcdd09'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M0 0l640 480H0z'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#da121a'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M252 218h136l-110 80 42-129 42 129z'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {ctor: '[]'}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$geFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$path,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '[]'}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M272 0h96v480h-96z'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('red'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M0 192h640v96H0z'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('red'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$style('mix-blend-mode:multiply'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M147 373c1-17 4-31 4-31l-15 1-15-1s3 14 4 31c-17-1-31-4-31-4l1 15-1 15s14-3 31-4c-1 17-4 31-4 31l15-1 15 1s-3-14-4-31c17 1 31 4 31 4l-1-15 1-15s-14 3-31 4zM515 85c1-17 4-31 4-31l-15 1-15-1s3 14 4 31c-17-1-31-4-31-4l1 15-1 15s14-3 31-4c-1 17-4 31-4 31l15-1 15 1s-3-14-4-31c17 1 31 4 31 4l-1-15 1-15s-14 3-31 4zm-368 0c1-17 4-31 4-31l-15 1-15-1s3 14 4 31c-17-1-31-4-31-4l1 15-1 15s14-3 31-4c-1 17-4 31-4 31l15-1 15 1s-3-14-4-31c17 1 31 4 31 4l-1-15 1-15s-14 3-31 4zm368 288c1-17 4-31 4-31l-15 1-15-1s3 14 4 31c-17-1-31-4-31-4l1 15-1 15s14-3 31-4c-1 17-4 31-4 31l15-1 15 1s-3-14-4-31c17 1 31 4 31 4l-1-15 1-15s-14 3-31 4z'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('red'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
										_1: {ctor: '[]'}
									}
								}
							}
						},
						{ctor: '[]'}),
					_1: {ctor: '[]'}
				}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$gdFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$g,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('c'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$g,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$id('b'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$path,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill('#fcd116'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$transform('rotate(18 0 -1)'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$d('M0-1v1h1'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$id('a'),
													_1: {ctor: '[]'}
												}
											}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$svg$Svg$use,
										{
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$transform('scale(-1 1)'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#a'),
												_1: {ctor: '[]'}
											}
										},
										{ctor: '[]'}),
									_1: {ctor: '[]'}
								}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$use,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$transform('rotate(72)'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#b'),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$use,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$transform('rotate(144)'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#b'),
											_1: {ctor: '[]'}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$svg$Svg$use,
										{
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$transform('rotate(216)'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#b'),
												_1: {ctor: '[]'}
											}
										},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$svg$Svg$use,
											{
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$transform('rotate(288)'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#b'),
													_1: {ctor: '[]'}
												}
											},
											{ctor: '[]'}),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fill('#ce1126'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#007a5e'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M67 67h506v346H67z'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M67 67h506L67 413h506z'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#fcd116'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$circle,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$cx('320'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$cy('240'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$r('58'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$fill('#ce1126'),
											_1: {ctor: '[]'}
										}
									}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$use,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$height('100%'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$width('100%'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#c'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$transform('matrix(52.8 0 0 52.8 320 240)'),
												_1: {ctor: '[]'}
											}
										}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$use,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$height('100%'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$width('100%'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#d'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$x('-100'),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$transform('translate(-30)'),
														_1: {ctor: '[]'}
													}
												}
											}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$svg$Svg$use,
										{
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$height('100%'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$width('100%'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$id('d'),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#c'),
														_1: {
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$transform('matrix(31.2 0 0 31.2 320 34)'),
															_1: {ctor: '[]'}
														}
													}
												}
											}
										},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$svg$Svg$use,
											{
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$height('100%'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$width('100%'),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#d'),
														_1: {
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$x('100'),
															_1: {
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$transform('translate(30)'),
																_1: {ctor: '[]'}
															}
														}
													}
												}
											},
											{ctor: '[]'}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$svg$Svg$path,
												{
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$d('M102 241c8 13 22 28 34 33 0-14-5-31-11-45l-23 12z'),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$fill('#ce1126'),
														_1: {ctor: '[]'}
													}
												},
												{ctor: '[]'}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$svg$Svg$path,
													{
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$d('M90 195c11 21-27 73 36 86-8-11-13-28-11-42 13 5 27 19 32 30 17-59-42-55-57-74z'),
														_1: {
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$fill('#fcd116'),
															_1: {ctor: '[]'}
														}
													},
													{ctor: '[]'}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$svg$Svg$use,
														{
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$transform('translate(-30 415)'),
															_1: {
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$x('-100'),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#d'),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$svg$Svg_Attributes$width('100%'),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$svg$Svg_Attributes$height('100%'),
																			_1: {ctor: '[]'}
																		}
																	}
																}
															}
														},
														{ctor: '[]'}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$svg$Svg$use,
															{
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$transform('matrix(31.2 0 0 31.2 320 448)'),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#c'),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$svg$Svg_Attributes$width('100%'),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$svg$Svg_Attributes$height('100%'),
																			_1: {ctor: '[]'}
																		}
																	}
																}
															},
															{ctor: '[]'}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$svg$Svg$use,
																{
																	ctor: '::',
																	_0: _elm_lang$svg$Svg_Attributes$transform('translate(30 415)'),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$svg$Svg_Attributes$x('100'),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#d'),
																			_1: {
																				ctor: '::',
																				_0: _elm_lang$svg$Svg_Attributes$width('100%'),
																				_1: {
																					ctor: '::',
																					_0: _elm_lang$svg$Svg_Attributes$height('100%'),
																					_1: {ctor: '[]'}
																				}
																			}
																		}
																	}
																},
																{ctor: '[]'}),
															_1: {ctor: '[]'}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$gbFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$clipPath,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M-85 0h682v512H-85z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$clipPath('url(#a)'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$transform('translate(80) scale(.94)'),
						_1: {ctor: '[]'}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#006'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M-256 0H768v512H-256z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M-256 0v57l910 455h114v-57L-142 0h-114zM768 0v57l-910 455h-114v-57L654 0h114z'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M171 0v512h170V0H171zm-427 171v170H768V171H-256z'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$path,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M-256 205v102H768V205H-256zM205 0v512h102V0H205zm-461 512L85 341h77l-342 171h-76zm0-512L85 171H9L-256 38V0zm606 171L692 0h76L427 171h-77zm418 341L427 341h76l265 133v38z'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$fill('#c00'),
											_1: {ctor: '[]'}
										}
									},
									{ctor: '[]'}),
								_1: {ctor: '[]'}
							}
						}
					}
				}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$fmFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$clipPath,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M-81 0h682v512H-81z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$clipPath('url(#a)'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$transform('translate(76) scale(.94)'),
							_1: {ctor: '[]'}
						}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#6797d6'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M-252 0H772v512H-252z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M260 123l-33 22 13-36-33-22h40l13-36 12 36h40l-32 22 12 36m-32 245l-33-22 13 36-33 22h40l13 36 12-36h40l-32-22 12-36m-188-93l-25 31 2-38-38-12 39-11 1-38 22 30 39-11-25 30 22 31m275-12l24 31-1-38 37-12-38-11-1-38-23 30-38-11 25 30-23 31'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}
				}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$gaFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$g,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#ffe700'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M640 480H0V0h640z'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#36a100'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M640 160H0V0h640z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#006dbc'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M640 480H0V320h640z'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}
				}
			}),
		_1: {ctor: '[]'}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$frFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$g,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#00267f'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 0h213v480H0z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#f31830'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M427 0h213v480H427z'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}
				}
			}),
		_1: {ctor: '[]'}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$foFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$clipPath,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M-78 32h640v480H-78z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$clipPath('url(#a)'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$transform('translate(78 -32)'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$strokeWidth('0'),
								_1: {ctor: '[]'}
							}
						}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M-78 32h664v480H-78z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M-76 219h186V32h106v187h372v106H216v187H110V325H-76V219z'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#003897'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M-76 245h212V32h54v213h398v54H190v213h-54V299H-76v-54z'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill('#d72828'),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {ctor: '[]'}
						}
					}
				}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$fkFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$version('1'),
					_1: {ctor: '[]'}
				}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$linearGradient,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$stop,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$stopColor('#a43907'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$offset('0'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$stop,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$stopColor('#fff'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$offset('1'),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {ctor: '[]'}
						}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$linearGradient,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$id('b'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$y2('577'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#a'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$gradientUnits('userSpaceOnUse'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$x2('471'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$y1('592'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$x1('444'),
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}
						},
						{ctor: '[]'}),
					_1: {ctor: '[]'}
				}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fill('#006'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#006'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 0h400v200H0z'),
								_1: {ctor: '[]'}
							}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M0 0v26l317 203h40v-26L40 0H0zm357 0v26L40 229H0v-26L317 0h40z'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M149 0v229h59V0h-59zM0 76v76h357V76H0z'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M0 91v46h357V91H0zM161 0v229h35V0h-35zM0 229l119-77h27L27 229H0zM0 0l119 76H92L0 17V0zm211 76L330 0h27L238 76h-27zm146 153l-119-77h27l92 60v17z'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill('#c00'),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$path,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M671 322a13 13 0 0 0-2 0c-3 0-9 11-12 18l-9 13c-1 1-2 3-1 5-7 1-8 7-8 10l1 3 4 8c5 9 11 22 15 23 5 1 19-4 29-12a164 164 0 0 0 124 0c10 8 24 13 29 12 4-1 10-14 15-23l4-8 1-3c0-3-1-9-8-10 1-2 0-4-1-5l-9-13c-3-7-9-18-12-18-5-1-15 1-15 2v1l-21 19 5 27a147 147 0 0 1-101 0c4-12 6-26 6-27l-21-19v-1c0-1-8-3-13-2zm5 24c3 0 6 2 8 4v1l-4 11-14-10c2-3 6-6 10-6zm148 0c4 0 8 3 10 6-4 3-8 7-14 10l-4-11v-1c2-2 5-4 8-4zm-166 27l10 7-3 2h-6l-1-6a70 70 0 0 1 0-3zm184 0v3l-1 6h-6l-3-2 10-7z'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$transform('matrix(1.17 0 0 1.17 -389 -22)'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$stroke('#fff'),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$strokeWidth('10'),
														_1: {
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$fill('url(#b)'),
															_1: {ctor: '[]'}
														}
													}
												}
											}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$svg$Svg$path,
										{
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$d('M397 606s-76-21-75-102V397h149l1 106c0 81-75 103-75 103z'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$transform('matrix(1.48 0 0 1.54 -99 -521)'),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$stroke('#fff'),
														_1: {
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$strokeWidth('4'),
															_1: {
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$fill('#0072c4'),
																_1: {ctor: '[]'}
															}
														}
													}
												}
											}
										},
										{ctor: '[]'}),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$fjFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$version('1'),
					_1: {ctor: '[]'}
				}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$path,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$d('M0 0v480h640V0H0z'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fill('#68bfe5'),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '[]'}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$strokeMiterlimit('5'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M421 193v137c0 44 80 71 80 71s81-27 81-71V193z'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M490 241v62h-69v22h69v71l11 5 12-5v-71h69v-22h-69v-62z'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#d21034'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M421 193h161v53H421z'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill('#d21034'),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$path,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M421 193v137c0 44 80 71 80 71s81-27 81-71V193z'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$fill('none'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$stroke('#000'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$strokeWidth('3'),
													_1: {ctor: '[]'}
												}
											}
										}
									},
									{ctor: '[]'}),
								_1: {ctor: '[]'}
							}
						}
					}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M0 0v240h358V0H0z'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#002868'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$style('line-height:normal;text-indent:0;text-align:start;text-decoration-line:none;text-decoration-style:solid;text-decoration-color:#000;text-transform:none;block-progression:tb;isolation:auto;mix-blend-mode:normal'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 0v27l139 93L0 213v27h40l139-93 139 93h40v-27l-139-93 139-93V0h-40L179 93 40 0H0z'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$color('#000'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fontWeight('400'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$fontFamily('sans-serif'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$overflow('visible'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 0v18l152 102L0 222v18h27l152-102 152 102h27v-18L206 120 358 18V0h-27L179 102 27 0H0z'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$style('line-height:normal;text-indent:0;text-align:start;text-decoration-line:none;text-decoration-style:solid;text-decoration-color:#000;text-transform:none;block-progression:tb;isolation:auto;mix-blend-mode:normal'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$color('#000'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$fontWeight('400'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$fontFamily('sans-serif'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$overflow('visible'),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$fill('#ce1126'),
														_1: {ctor: '[]'}
													}
												}
											}
										}
									}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$style('line-height:normal;text-indent:0;text-align:start;text-decoration-line:none;text-decoration-style:solid;text-decoration-color:#000;text-transform:none;block-progression:tb;isolation:auto;mix-blend-mode:normal'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M149 0v80H0v80h149v80h60v-80h149V80H209V0h-60z'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$color('#000'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$fontWeight('400'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$fontFamily('sans-serif'),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$overflow('visible'),
														_1: {
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
															_1: {ctor: '[]'}
														}
													}
												}
											}
										}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$path,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$style('line-height:normal;text-indent:0;text-align:start;text-decoration-line:none;text-decoration-style:solid;text-decoration-color:#000;text-transform:none;block-progression:tb;isolation:auto;mix-blend-mode:normal'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$d('M161 0v96H0v48h161v96h36v-96h161V96H197V0h-36z'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$color('#000'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$fontWeight('400'),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$fontFamily('sans-serif'),
														_1: {
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$overflow('visible'),
															_1: {
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$fill('#ce1126'),
																_1: {ctor: '[]'}
															}
														}
													}
												}
											}
										}
									},
									{ctor: '[]'}),
								_1: {ctor: '[]'}
							}
						}
					}
				}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$fiFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$path,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '[]'}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fill('#003580'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M0 175h640v130H0z'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#003580'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M175 0h131v480H175z'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {ctor: '[]'}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$etFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$clipPath,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M-61 0h682v512H-61z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$clipPath('url(#a)'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$transform('translate(57) scale(.94)'),
							_1: {ctor: '[]'}
						}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#ffc621'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M-238 4H800v498H-238z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#ef2118'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M-240 343H799v169H-240z'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#298c08'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M-238 0H800v180H-238z'),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$ellipse,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$cx('534'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$rx('200'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$cy('353'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$transform('matrix(.54 0 0 .54 -26 74)'),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$ry('200'),
														_1: {
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$fill('#006bc6'),
															_1: {ctor: '[]'}
														}
													}
												}
											}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$svg$Svg$path,
										{
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$d('M214 188l-6 5 23 33 7-4-24-34zm30 78l-10-7 4-12h-48l-14-10 66-1 12-37 6 15-16 52zm76-71l-6-4-24 32 5 5 25-33zm-65 52l3-11h14l-16-46 6-16 21 62h39l-13 11h-54zm90 51l3-7-38-13-3 6 38 14zm-69-46h12l4 12 39-28h17l-53 39 12 37-14-8-17-52zm-19 102h7l1-41h-8v41zm21-80l4 11-10 8 39 27 5 17-54-38-31 23 3-16 44-32zm-103 13l3 7 38-12-2-7-39 12zm83-5l-9 8-11-8-14 46-14 10 19-63-31-23 16-1 44 31z'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$fill('#ffc621'),
												_1: {ctor: '[]'}
											}
										},
										{ctor: '[]'}),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$euFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$g,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('d'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$g,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$id('b'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$path,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M0-1v1z'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$id('a'),
											_1: {ctor: '[]'}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$svg$Svg$use,
										{
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$transform('scale(-1 1)'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#a'),
												_1: {ctor: '[]'}
											}
										},
										{ctor: '[]'}),
									_1: {ctor: '[]'}
								}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$g,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$id('c'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: A2(
										_elm_lang$svg$Svg$use,
										{
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$transform('rotate(72)'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#b'),
												_1: {ctor: '[]'}
											}
										},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$svg$Svg$use,
											{
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$transform('rotate(144)'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#b'),
													_1: {ctor: '[]'}
												}
											},
											{ctor: '[]'}),
										_1: {ctor: '[]'}
									}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$use,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$transform('scale(-1 1)'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#c'),
											_1: {ctor: '[]'}
										}
									},
									{ctor: '[]'}),
								_1: {ctor: '[]'}
							}
						}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fill('#039'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$g,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$transform('translate(320 242) scale(23.7037)'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#fc0'),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$use,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$height('100%'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$width('100%'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#d'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$y('-6'),
											_1: {ctor: '[]'}
										}
									}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$use,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$height('100%'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$width('100%'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#d'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$y('6'),
												_1: {ctor: '[]'}
											}
										}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$g,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$id('e'),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$svg$Svg$use,
											{
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$height('100%'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$width('100%'),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#d'),
														_1: {
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$x('-6'),
															_1: {ctor: '[]'}
														}
													}
												}
											},
											{ctor: '[]'}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$svg$Svg$use,
												{
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$height('100%'),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$width('100%'),
														_1: {
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#d'),
															_1: {
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$transform('rotate(-144 -2 -2)'),
																_1: {ctor: '[]'}
															}
														}
													}
												},
												{ctor: '[]'}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$svg$Svg$use,
													{
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$height('100%'),
														_1: {
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$width('100%'),
															_1: {
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#d'),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$svg$Svg_Attributes$transform('rotate(144 -2 -2)'),
																	_1: {ctor: '[]'}
																}
															}
														}
													},
													{ctor: '[]'}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$svg$Svg$use,
														{
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$height('100%'),
															_1: {
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$width('100%'),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#d'),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$svg$Svg_Attributes$transform('rotate(72 -5 -2)'),
																		_1: {ctor: '[]'}
																	}
																}
															}
														},
														{ctor: '[]'}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$svg$Svg$use,
															{
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$height('100%'),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$svg$Svg_Attributes$width('100%'),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#d'),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$svg$Svg_Attributes$transform('rotate(72 -5 1)'),
																			_1: {ctor: '[]'}
																		}
																	}
																}
															},
															{ctor: '[]'}),
														_1: {ctor: '[]'}
													}
												}
											}
										}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$svg$Svg$use,
										{
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$height('100%'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$width('100%'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#e'),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$transform('scale(-1 1)'),
														_1: {ctor: '[]'}
													}
												}
											}
										},
										{ctor: '[]'}),
									_1: {ctor: '[]'}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$esFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$version('1'),
					_1: {ctor: '[]'}
				}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$path,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fill('#c60b1e'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '[]'}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fill('#ffc400'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M0 120h640v240H0z'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$erFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$version('1'),
					_1: {ctor: '[]'}
				}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$g,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#be0027'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M0 480h640V240L0 480z'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#b4d7f4'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v240L0 0z'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#239e46'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}
				}
			}),
		_1: {ctor: '[]'}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$ehFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$clipPath,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M-159 0h683v512h-683z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$clipPath('url(#a)'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$transform('translate(149) scale(.94)'),
							_1: {ctor: '[]'}
						}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M-180 0H844v256H-180z'),
							_1: {ctor: '[]'}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#107b00'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M-180 256H844v256H-180z'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M-180 169H844v176H-180z'),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$path,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M310 196c-45-20-84 20-84 58 0 39 38 81 86 62-34-10-48-35-48-61 0-25 16-54 46-59z'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$fill('#f0f'),
											_1: {ctor: '[]'}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$svg$Svg$path,
										{
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$fill('#ff1800'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$d('M363 294l-26-19-26 19 10-30-26-19h32l10-31 10 31h32l-26 19'),
												_1: {ctor: '[]'}
											}
										},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$svg$Svg$path,
											{
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$d('M314 316a65 65 0 0 1-89-60c-1-39 38-79 90-61-30 5-51 30-52 59 0 22 13 54 51 62zM-180 0l349 257-349 255V0z'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$fill('red'),
													_1: {ctor: '[]'}
												}
											},
											{ctor: '[]'}),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$egFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$version('1'),
					_1: {ctor: '[]'}
				}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$path,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$d('M0 320h640v160H0z'),
				_1: {ctor: '[]'}
			},
			{ctor: '[]'}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fill('#ce1126'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v160H0z'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$eeFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$g,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$rect,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$rx('0'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$ry('0'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$height('478'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$width('100%'),
									_1: {ctor: '[]'}
								}
							}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$rect,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$rx('0'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$ry('0'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$height('159'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$width('100%'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$y('321'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#1291ff'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v159H0z'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}
				}
			}),
		_1: {ctor: '[]'}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$dzFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$path,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M320 0h320v480H320z'),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '[]'}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fill('#006233'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M0 0h320v480H0z'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M424 180a120 120 0 1 0 0 120 96 96 0 1 1 0-120m4 60l-108-35 67 92V183l-67 92z'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#d21034'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {ctor: '[]'}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$doFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$version('1'),
					_1: {ctor: '[]'}
				}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$clipPath,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M-223-115h958v718h-958z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$clipPath('url(#a)'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$transform('matrix(.67 0 0 .67 149 77)'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
							_1: {ctor: '[]'}
						}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#00319c'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M322 329h447v274H322z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#d62918'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M-257 330h446v273h-446z'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#00319c'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M-256-115h445v305h-445z'),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$path,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill('#d62918'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$d('M325-113h443v306H325z'),
											_1: {ctor: '[]'}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$svg$Svg$path,
										{
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$d('M-256 190H769v142H-256z'),
												_1: {ctor: '[]'}
											}
										},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$svg$Svg$path,
											{
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$d('M187-114h139v717H187z'),
													_1: {ctor: '[]'}
												}
											},
											{ctor: '[]'}),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$ecFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$version('1'),
					_1: {ctor: '[]'}
				}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$g,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#ffe800'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#00148e'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 240h640v240H0z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#da0010'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M0 360h640v120H0z'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}
				}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M301 273s-18 336 53 336 107-35 107-35l-1-185-159-116z'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$transform('matrix(.45 0 0 .64 72 -60)'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$stroke('#000'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#ffdf00'),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M301 273s-35 336 71 336c89 0 89-53 106-53l-17-124-160-159z'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$stroke('#000'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#ffdf00'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$transform('matrix(.58 0 0 .62 10 -10)'),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M337 308c0 18-36 213 53 266 35 18 88-18 88 0l-17-142-124-124z'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$transform('matrix(.58 0 0 .62 10 -10)'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$stroke('#000'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$fill('#0000c4'),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M372 344c0 17-18 159 35 195 36 35 125 25 125 25l-71-132-89-88z'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$stroke('#000'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$fill('#e10000'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$transform('matrix(.58 0 0 .62 10 -10)'),
												_1: {ctor: '[]'}
											}
										}
									}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$g,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$stroke('#000'),
										_1: {ctor: '[]'}
									}
								},
								{
									ctor: '::',
									_0: A2(
										_elm_lang$svg$Svg$path,
										{
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$d('M301 273s-18 336 53 336 107-35 107-35l-1-185-159-116z'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$transform('matrix(-.45 0 0 .64 568 -60)'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$fill('#ffdf00'),
													_1: {ctor: '[]'}
												}
											}
										},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$svg$Svg$path,
											{
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$d('M344 304c0 18-7 270 28 270s89-18 89-18l-1-167-116-85z'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$transform('matrix(-.45 0 0 .64 568 -60)'),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$fill('#0000c4'),
														_1: {ctor: '[]'}
													}
												}
											},
											{ctor: '[]'}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$svg$Svg$path,
												{
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$d('M301 273s-35 336 71 336c89 0 89-53 106-53l-17-124-160-159z'),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$transform('matrix(-.58 0 0 .62 630 -10)'),
														_1: {
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$fill('#ffdf00'),
															_1: {ctor: '[]'}
														}
													}
												},
												{ctor: '[]'}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$svg$Svg$path,
													{
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$d('M337 308c0 18-36 213 53 266 35 18 88-18 88 0l-17-142-124-124z'),
														_1: {
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$transform('matrix(-.58 0 0 .62 630 -10)'),
															_1: {
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$fill('#0000c4'),
																_1: {ctor: '[]'}
															}
														}
													},
													{ctor: '[]'}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$svg$Svg$path,
														{
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$d('M372 344c0 17-18 159 35 195 36 35 125 25 125 25l-71-132-89-88z'),
															_1: {
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$transform('matrix(-.58 0 0 .62 630 -10)'),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$svg$Svg_Attributes$fill('#e10000'),
																	_1: {ctor: '[]'}
																}
															}
														},
														{ctor: '[]'}),
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$path,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M380 236c0 48-28 88-62 88s-62-40-62-88c0-49 28-88 62-88s62 39 62 88z'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$fill('#a7cfff'),
												_1: {ctor: '[]'}
											}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$svg$Svg$path,
										{
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$d('M183 90s21-12 44-21c24-8 51-14 55-14 7 0 19 18 21 18s10-5 20-5 16 8 18 8h19c2 0-7-20 0-19 3 0 28 4 52 12s58 22 58 22-55 7-70 5c-2 1 0 13-3 8l-25-4-16 5-19 5 13 21-16 8s-10-24-14-24-6 17-11 16-7-16-11-20-25-5-34-7l-28-6c-7-2-14 5-17 5s4-6 1-7-5 3-7 3l-25-5c-2-1 5-4 3-4h-8z'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$fill('#984000'),
													_1: {ctor: '[]'}
												}
											}
										},
										{ctor: '[]'}),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$dkFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$path,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fill('#c60c30'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '[]'}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M206 0h68v480h-68z'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M0 206h640v68H0z'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {ctor: '[]'}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$dmFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$version('1'),
					_1: {ctor: '[]'}
				}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$clipPath,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M-85 0h683v512H-85z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$clipPath('url(#a)'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$transform('translate(80) scale(.94)'),
							_1: {ctor: '[]'}
						}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#108c00'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M-258 0H769v512H-258z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#ffd600'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M-260 178H773v50H-260z'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#ffd600'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M181 0h49v512h-49z'),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$path,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M228 0h48v512h-48z'),
										_1: {ctor: '[]'}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$svg$Svg$path,
										{
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$d('M-260 227H773v50H-260z'),
											_1: {ctor: '[]'}
										},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$svg$Svg$path,
											{
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$d('M-260 277H773v50H-260z'),
													_1: {ctor: '[]'}
												}
											},
											{ctor: '[]'}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$svg$Svg$path,
												{
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$d('M276 0h49v512h-49z'),
														_1: {ctor: '[]'}
													}
												},
												{ctor: '[]'}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$svg$Svg$rect,
													{
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$transform('scale(-1)'),
														_1: {
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$ry('138'),
															_1: {
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$width('274'),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$svg$Svg_Attributes$y('-394'),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$svg$Svg_Attributes$x('-395'),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$svg$Svg_Attributes$height('275'),
																			_1: {
																				ctor: '::',
																				_0: _elm_lang$svg$Svg_Attributes$fill('#e72910'),
																				_1: {ctor: '[]'}
																			}
																		}
																	}
																}
															}
														}
													},
													{ctor: '[]'}),
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						}
					}
				}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$cyFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$path,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '[]'}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$id('a'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M308 399a1 1 0 0 1 0-1h-1l-1-1-4-5-4-6-1-1-6-2-5-2 3-2 8 3 6 1 12 9-4 3a38 38 0 0 0-3 3h1l-1 1zm-43-13c-5 0-11-2-16-5s1-1 3-2c1-1 4-3 8-3h1c5 0 11 2 19 6 0 0-6 4-15 4zm-23-5l-3-1-1-3v-3a3 3 0 0 1 1 0c2 0 4 1 4 3l1 2-2 2zm41-5c-14-2-20-7-22-11-3-4-2-8-2-8h2c3 0 13 2 22 19zm-28-3c-6 0-11-1-14-3l-3-3a5 5 0 0 1 0-2 18 18 0 0 1 7-1c4 0 11 1 19 8l-9 1zm-29-1c-6 0-15-2-20-7 0 0 5-2 12-2h1c6 0 11 1 14 3l1 3-1 1c-1 1-3 2-7 2zm-20-10a3 3 0 0 1-2-1l-1-2-1-3a2 2 0 0 1 1-1l2 1a6 6 0 0 1 2 2v3l-1 1zm46-2l-2-1-1-2-1-3a3 3 0 0 1 2-1c2 0 3 2 4 4v2l-2 1zm-22 0c-13-1-20-4-23-7l-3-5-1-2h3c5 0 13 2 24 14zm13-2c-10-1-16-6-19-9l-4-7h3a14 14 0 0 1 1 0c5 0 15 2 19 16zm-52-5l-9-1c-6-1-8-3-9-5l-1-2 9-2a35 35 0 0 1 7 1c9 2 13 8 13 8l-10 1zm24-8l-3-1-1-3v-3a3 3 0 0 1 1 0c2 0 4 2 4 3l1 3-2 1zm-18-3l-10-4c-4-2-9-7-10-15h1c2 0 4 0 8 3s8 9 11 16zm12 0s-4-1-8-5c-4-3-9-9-13-19h3l8 4c3 4 7 11 10 20zm-30-1c-4 0-5-2-6-3v-3a8 8 0 0 1 2 0c3 0 5 1 6 3l1 2-3 1zm-9-11h-9c-3-1-5-4-6-6l-2-5c11 0 16 3 18 6 3 2 3 5 3 5h-4zm11-11a43 43 0 0 1-2-3l-3-6v-7l-1-4s7 2 7 8l-1 12zm-8 0l-9-4-9-7c-2-2-3-5-3-10v-5h1c1 0 3 0 5 2l5 4 6 6a95 95 0 0 1 5 12v1a1 1 0 0 1-1 1z'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#435125'),
							_1: {ctor: '[]'}
						}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$use,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$height('100%'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$width('100%'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#a'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$transform('matrix(-1 0 0 1 594 0)'),
									_1: {ctor: '[]'}
								}
							}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M519 76l-2 1h-3l-2 1-4 3h-3l-1 2v1h-1l-3 1-3 1-3-1-2 1-3 3-2 1v-1h-2l-1 1-2 1h-2l-1 1-2 2-1 2h-2l-1 2-2 1-1 1-2 1h-2l-1 1h-4l-1 1-1 1h-2l-2 1v-1h-4l-1-1h-1v2l-1 1-2 1v1l-2 2-4 4-3 2-4 1-2 2-6 3-10 5h-2l-2 1-5 1-5 2h-1l-6 2h-14l-4 2-6 3-2 2-4 2-3 1v-2l-2 1h-7l-6 2-7 1-3 1h-5l-3 1h-11l-4-1-2 1-3-1-5-1h-2l-2-1-1 1h-1l-2-1h-1l-2 1-1-1h-1l-2-1-1-1-8 1h-2l-7-2h-1l-1 1h-2l-2 1h-3l-2-1-3-1h-4l-5-2-5-4-4-2h-2v1l1 2v7l2 1v2l1 4v4l-1 7v1l-1 4-1 3-3 8v2l-2 1-5 3-3 2h-5l-2-1h-2l-3-2-2-1-4-2v-1h-2l-3-1h-4l-3-1-1-1h-2l-3 1-1 1-1-1h-1l-1 2h-3l-1 1h-1l-1 1h-3v-1h-2v3l-2 2-2 1-1 2-3 6-1 3-1 1-2 2-2 1-4 3-3 2h-8l-3-1-3-2-3-2-4-5h-1l-2-1h-1v1l-1 1v8l4 5 1 2v1l1 1v1l1 4v3l-1 1v1l3 4 1 2-1 2-1 1-1 1v1l2 1 2 2 2 4h2l1 1 1 1h2l1 1v4l1 3 1 3v1l1 2-1 3 1 1h2l2 1 1 2h2l1 1 5 4h1v1l1 1 2-1h2l2 1h2l3 1 2 1 4 2 1 1h1l1 1 2 1 2 1h2l4 2h3l2 1 1 1h1l2-2h2l1 1 1-1 2-1 2-1 5-1 1 1 4-2 2 1 2-1 5 1 1 1 1 2h2l-1 1 2 2 2 3 2 4 1 1v3l-1 1v1h5l2-1 1-1 2 1h2l1 1 2 1h2v-2l-1-1-2-2-1-2-1-1v-6l1-1v-2l2-1 3-2 3-3 2-2 3-1 7-2 3-1 20 2 1-1v-1l1-1 2-1h1l3 1h1l2-1h1l3-2h2l4-2 3-1 1-1 3-1 2-2 2-1 2-1h5l1-2h2l2-1 1-1 1-2 1-1 1-1h4l5 1 1-1 1-4h1l3-5v-3l1-2-1-3 1-4 2-4 1-2 3-2 2-1h14l5 1h1l2 1 2 1 2 3h1l1 1h2l2-1 1-1 2-1v-1l1-1 1-1 3-1h4l1-1 1-1h1l3 1 1-1 2 1h3l2 1h1l5 3h2l1 1 1-1v-1h-2l-1-3 1-1-2-3v-1h-1v-1l-4-6-5-4-2-1-3-3-2-3-1-1-1-3-2-1-1-2-4-4v-1l-1-1h-2l1-1h1v-1l-1-5h-1v-1l2-8 2-5 2-1 1-3 2-2 1-2 3-1 1-1h2l4 1h5l2-1h1l1-1 1-4v-2l1-1 4-5 4-3 7-5 3-2 2-1 16-7 4-5 3-2 3-3 5-1 4-3 1-2 1-3h1v-2h1l3-3 13-6h1l1-1 4-1h1l1-2v-3l1-1v-2l1-1v-1h1v-1z'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#d47600'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {ctor: '[]'}
				}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$djFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$clipPath,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M-40 0h683v512H-40z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$clipPath('url(#a)'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$transform('translate(38) scale(.94)'),
							_1: {ctor: '[]'}
						}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#0c0'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M-40 0h768v512H-40z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#69f'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M-40 0h768v256H-40z'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M-40 0l383 256-383 255V0z'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill('#fffefe'),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$path,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M120 292l-31-22-31 22 12-36-31-23h38l12-36 12 36h38l-31 23 12 36z'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$fill('red'),
											_1: {ctor: '[]'}
										}
									},
									{ctor: '[]'}),
								_1: {ctor: '[]'}
							}
						}
					}
				}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$cwFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('b'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M0-1v1h1-1l1 1-1-1-1 1 1-1h-1 1z'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$clipPath,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$id('a'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M0 0h683v512H0z'),
									_1: {ctor: '[]'}
								},
								{ctor: '[]'}),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$clipPath('url(#a)'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$transform('scale(.94)'),
						_1: {ctor: '[]'}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#002b7f'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 0h768v512H0z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#f9e814'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M0 320h768v64H0z'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$use,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#b'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$transform('scale(42.67)'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$height('9000'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$width('13500'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$y('2'),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$x('2'),
														_1: {
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
															_1: {ctor: '[]'}
														}
													}
												}
											}
										}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$use,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#b'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$transform('scale(56.9)'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$height('9000'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$width('13500'),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$y('3'),
														_1: {
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$x('3'),
															_1: {
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
																_1: {ctor: '[]'}
															}
														}
													}
												}
											}
										}
									},
									{ctor: '[]'}),
								_1: {ctor: '[]'}
							}
						}
					}
				}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$deFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$path,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fill('#ffce00'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M0 320h640v160H0z'),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '[]'}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v160H0z'),
					_1: {ctor: '[]'}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#d00'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M0 160h640v160H0z'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {ctor: '[]'}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$czFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$clipPath,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M-74 0h683v512H-74z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$clipPath('url(#a)'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$transform('translate(69) scale(.94)'),
							_1: {ctor: '[]'}
						}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#e80000'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M-74 0h768v512H-74z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M-74 0h768v256H-74z'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M-74 0l383 256-383 255V0z'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill('#00006f'),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {ctor: '[]'}
						}
					}
				}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$cuFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$clipPath,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M-32 0h683v512H-32z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$clipPath('url(#a)'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$transform('translate(30) scale(.94)'),
							_1: {ctor: '[]'}
						}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#0050f0'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M-32 0h768v512H-32z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M-32 102h768v103H-32zm0 205h768v103H-32z'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M-32 0l441 256-441 255V0z'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill('#ed0000'),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$path,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M162 325l-48-35-47 36 18-58-47-36 58-1 18-58 18 58h59l-47 36 18 58z'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
											_1: {ctor: '[]'}
										}
									},
									{ctor: '[]'}),
								_1: {ctor: '[]'}
							}
						}
					}
				}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$cvFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$clipPath,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M-123 0h682v512h-682z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$clipPath('url(#a)'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$transform('translate(116) scale(.94)'),
							_1: {ctor: '[]'}
						}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M-123 233h846v206h-846z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#081873'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M-123 0h846v257h-846zm0 386h853v126h-853z'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#de3929'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M-123 303h846v39h-846z'),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$path,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill('#ffce08'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$d('M131 399l7 21h21l-17 12 6 21-17-13-17 13 6-21-17-12h21m193-170l7 21h21l-17 13 6 20-17-13-18 13 7-20-17-13h21M88 335l7 21h21l-17 13 7 20-18-13-17 13 7-20-18-13h22m235-27l7 21h21l-17 13 6 20-17-13-18 13 7-20-17-13h21m-40-162l6 21h22l-17 12 6 21-17-13-18 13 7-21-17-12h21m-64-46l6 21h22l-18 13 7 20-17-13-18 13 7-20-17-13h21m-64 3l6 20h22l-18 13 7 20-17-12-18 12 7-20-18-13h22m-35 43l7 21h21l-17 13 7 20-18-13-17 13 6-20-17-13h22m119 149l6 21h22l-17 13 6 20-17-13-18 13 7-20-17-13h21m82-42l7 21h21l-17 12 7 21-18-13-17 13 6-21-17-12h22'),
											_1: {ctor: '[]'}
										}
									},
									{ctor: '[]'}),
								_1: {ctor: '[]'}
							}
						}
					}
				}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$cxFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$path,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fill('#0021ad'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '[]'}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480z'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#1c8a42'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$circle,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$cx('320'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$cy('240'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$r('58'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#ffc639'),
									_1: {ctor: '[]'}
								}
							}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M285 214c4 5 10 15 14 12 4 0 6 0 7 3 9 1 23-2 33-14v-5c0-2 3-1 3-1l1 2 4-5v-2c1-2 3-1 3 0l1 1h5l1-1h1c0 8 2 8 2 12 0 5-2 6-2 8 1 2 7 2 5 3s0 3-3 4c-9 5-10 9-10 9l-3 4c-1 2-3 1-4 2v8l-1 7-3 8-1 12-14-2c3-11 2-20 2-21-1-8-12-6-14-7l-3-2-3-1-2 2c-5 0-7-4-7-4 1-2-9 0-15-1-2 1-3 5-5 5l-4-2c0-3 3-5 3-5 3-1 4-1 5-3s0-5 2-7l3-1c1-1 2-6 1-7l-5-4c-1-5 2-7 3-7z'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#1c8a42'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M562 142c-3-10-26-32-44-46-4-3-7-2-6 2l6 12 2 6 1 5c5 6 6 11 6 11 3 6 6 11 11 16 7 4 2 16 2 22 0 4-3 4-5 3-20-18-40-18-58-24-7 0-7 3-5 5 13 13 24 22 39 29l8 5 9 7c7 5 7 9 7 9 0 8-4 15-5 17-3 9-7 11-7 11-38 25-58 32-119 24-1-1-7 0 0 3 16 5 54 13 91-4 9-7 15-5 21-8l29-16c8-4 31-9 36-13 6-1 13-2 13-7 2-1 5 0 7-5 5 0 4-2 4-2-1-4-6-5-9-8-5-1-8-2-11 0l-4 2-5-2c-11 0-10-38-14-54z'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#ffc639'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M589 204a3 2 16 1 1-6-2 3 2 16 0 1 6 2z'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill('#1c8a42'),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$g,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$transform('matrix(.64 0 0 .64 0 80)'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
											_1: {ctor: '[]'}
										}
									},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$svg$Svg$path,
											{
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$id('a'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$d('M188 191l-13-12-12 12 1-18-17-2 14-10-8-15 16 5 7-16 6 16 17-5-9 15 14 10-17 3 1 17z'),
													_1: {ctor: '[]'}
												}
											},
											{ctor: '[]'}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$svg$Svg$path,
												{
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$d('M233 336l-13-10-14 10 5-16-14-9h17l5-16 6 15h16l-13 10 5 16z'),
													_1: {ctor: '[]'}
												},
												{ctor: '[]'}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$svg$Svg$use,
													{
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$height('100%'),
														_1: {
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$width('100%'),
															_1: {
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#a'),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$svg$Svg_Attributes$x('3'),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$svg$Svg_Attributes$y('269'),
																		_1: {ctor: '[]'}
																	}
																}
															}
														}
													},
													{ctor: '[]'}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$svg$Svg$use,
														{
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$height('100%'),
															_1: {
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$width('100%'),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#a'),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$svg$Svg_Attributes$x('-112'),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$svg$Svg_Attributes$y('123'),
																			_1: {ctor: '[]'}
																		}
																	}
																}
															}
														},
														{ctor: '[]'}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$svg$Svg$use,
															{
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$height('100%'),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$svg$Svg_Attributes$width('100%'),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#a'),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$svg$Svg_Attributes$x('108'),
																			_1: {
																				ctor: '::',
																				_0: _elm_lang$svg$Svg_Attributes$y('85'),
																				_1: {ctor: '[]'}
																			}
																		}
																	}
																}
															},
															{ctor: '[]'}),
														_1: {ctor: '[]'}
													}
												}
											}
										}
									}),
								_1: {ctor: '[]'}
							}
						}
					}
				}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$crFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$g,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#0000b4'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 75h640v323H0z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#d90000'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M0 158h640v157H0z'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}
				}
			}),
		_1: {ctor: '[]'}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$coFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$g,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#ffe800'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#00148e'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 240h640v240H0z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#da0010'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M0 360h640v120H0z'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}
				}
			}),
		_1: {ctor: '[]'}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$cnFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#ffde00'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M-1 1l1-2 1 2-2-1h2z'),
								_1: {ctor: '[]'}
							}
						}
					},
					{ctor: '[]'}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#de2910'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$use,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#a'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$transform('matrix(71.9991 0 0 72 120 120)'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$width('30'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$height('20'),
									_1: {ctor: '[]'}
								}
							}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$use,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#a'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$transform('matrix(-12.33562 -20.5871 20.58684 -12.33577 240 48)'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$width('30'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$height('20'),
										_1: {ctor: '[]'}
									}
								}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$use,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#a'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$transform('matrix(-3.38573 -23.75998 23.75968 -3.38578 288 96)'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$width('30'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$height('20'),
											_1: {ctor: '[]'}
										}
									}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$use,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#a'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$transform('matrix(6.5991 -23.0749 23.0746 6.59919 288 168)'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$width('30'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$height('20'),
												_1: {ctor: '[]'}
											}
										}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$use,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#a'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$transform('matrix(14.9991 -18.73557 18.73533 14.99929 240 216)'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$width('30'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$height('20'),
													_1: {ctor: '[]'}
												}
											}
										}
									},
									{ctor: '[]'}),
								_1: {ctor: '[]'}
							}
						}
					}
				}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$cmFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$path,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fill('#007a5e'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M0 0h213v480H0z'),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '[]'}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fill('#ce1126'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M213 0h214v480H213z'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#fcd116'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M427 0h213v480H427z'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$g,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$transform('translate(320 240) scale(7.1111)'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#fcd116'),
								_1: {ctor: '[]'}
							}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$g,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$id('b'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: A2(
										_elm_lang$svg$Svg$path,
										{
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$id('a'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$d('M0-8l-2 8 3 1z'),
												_1: {ctor: '[]'}
											}
										},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$svg$Svg$use,
											{
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$height('100%'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$width('100%'),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#a'),
														_1: {
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$transform('scale(-1 1)'),
															_1: {ctor: '[]'}
														}
													}
												}
											},
											{ctor: '[]'}),
										_1: {ctor: '[]'}
									}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$use,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$height('100%'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$width('100%'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#b'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$transform('rotate(72)'),
													_1: {ctor: '[]'}
												}
											}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$svg$Svg$use,
										{
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$height('100%'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$width('100%'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#b'),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$transform('rotate(144)'),
														_1: {ctor: '[]'}
													}
												}
											}
										},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$svg$Svg$use,
											{
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$height('100%'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$width('100%'),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#b'),
														_1: {
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$transform('rotate(-144)'),
															_1: {ctor: '[]'}
														}
													}
												}
											},
											{ctor: '[]'}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$svg$Svg$use,
												{
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$height('100%'),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$width('100%'),
														_1: {
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#b'),
															_1: {
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$transform('rotate(-72)'),
																_1: {ctor: '[]'}
															}
														}
													}
												},
												{ctor: '[]'}),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}),
					_1: {ctor: '[]'}
				}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$clFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$clipPath,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 0h683v512H0z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$clipPath('url(#a)'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$transform('scale(.9375)'),
							_1: {ctor: '[]'}
						}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M256 0h512v256H256z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#0039a6'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M0 0h256v256H0z'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M168 192l-40-30-39 30 14-49-39-30h49l15-49 15 49h49l-39 30 15 49z'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$path,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill('#d52b1e'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$d('M0 256h768v256H0z'),
											_1: {ctor: '[]'}
										}
									},
									{ctor: '[]'}),
								_1: {ctor: '[]'}
							}
						}
					}
				}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$ckFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$path,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fill('#006'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '[]'}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M0 0v25l320 197h40v-25L40 0H0zm360 0v25L40 222H0v-25L320 0h40z'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M150 0v222h60V0h-60zM0 74v74h360V74H0z'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M0 89v44h360V89H0zM162 0v222h36V0h-36zM0 222l120-74h27L27 222H0zM0 0l120 74H93L0 17V0zm213 74L333 0h27L240 74h-27zm147 148l-120-74h27l93 57v17z'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#c00'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M472 213l5-17-14-10 17-1 6-16 6 17h18l-14 10 5 17-15-10m27 13l11-14-10-14 17 5 11-13v17l16 7-17 5-1 17-10-14m-98 15l-1-18-17-5 17-6v-18l11 14 17-6-10 15 10 14-17-4m-40 40l-7-15-17 1 13-12-7-16 15 8 13-12-3 18 15 9-17 2m-18 56l-13-11-15 9 6-17-13-11h18l7-16 4 17 17 2-15 9m4 61l-17-5-10 15-1-18-16-6 16-6v-18l11 14 16-6-9 15m29 51l-17 3-3 17-8-16-17 2 12-13-7-16 15 8 13-11-3 17m45 38l-15 8 3 18-13-13-16 8 8-16-13-13 18 3 8-16 3 18m54 9l-8 15 11 13-17-3-9 15-3-17-17-4 16-8-2-17 13 13m57-14l-1 18 17 6-17 5-1 18-10-14-17 4 10-14-9-15 17 6m54-203l12 12 16-7-8 16 11 13-17-3-9 16-2-18-17-4 16-8m34 22l5 16h18l-14 11 4 17-14-10-14 10 5-17-14-10 18-1m19 33l-2 18 16 8-17 3-3 17-9-15-17 3 12-13-8-15 16 7m3 40l-8 15 12 13-17-3-9 16-3-18-17-3 15-8-2-17 13 12m-10 39l-15 9 4 18-13-12-15 9 6-17-13-12 17 2 7-16 5 17'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
										_1: {ctor: '[]'}
									}
								}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}
				}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$chFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$g,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#d52b1e'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$g,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M170 195h300v90H170z'),
									_1: {ctor: '[]'}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$path,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M275 90h90v300h-90z'),
										_1: {ctor: '[]'}
									},
									{ctor: '[]'}),
								_1: {ctor: '[]'}
							}
						}),
					_1: {ctor: '[]'}
				}
			}),
		_1: {ctor: '[]'}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$ciFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$g,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#00cd00'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M427 0h213v480H427z'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#ff9a00'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 0h213v480H0z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M213 0h214v480H213z'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}
				}
			}),
		_1: {ctor: '[]'}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$cgFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$clipPath,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M-79 32h640v480H-79z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$clipPath('url(#a)'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$transform('translate(79 -32)'),
							_1: {ctor: '[]'}
						}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#ff0'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M-119 32h720v480h-720z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M-119 32v480L361 32h-480z'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#00ca00'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M121 512h480V32L121 512z'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill('red'),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {ctor: '[]'}
						}
					}
				}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$beFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$g,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M0 0h213v480H0z'),
						_1: {ctor: '[]'}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#ffd90c'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M213 0h214v480H213z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#f31830'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M427 0h213v480H427z'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}
				}
			}),
		_1: {ctor: '[]'}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$cfFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$clipPath,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M-12 32h640v480H-12z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$clipPath('url(#a)'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$transform('translate(12 -32)'),
							_1: {ctor: '[]'}
						}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#00f'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M-52 32h719v119H-52z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#ff0'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M-52 392h719v120H-52z'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#009a00'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M-52 271h719v121H-52z'),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$path,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$d('M-52 151h719v120H-52z'),
											_1: {ctor: '[]'}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$svg$Svg$path,
										{
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$fill('red'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$d('M248 32h120v480H248z'),
												_1: {ctor: '[]'}
											}
										},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$svg$Svg$path,
											{
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$fill('#ff0'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$d('M99 138l-31-22-31 22 10-37-30-23 38-1 13-36 12 36 38 1-30 23'),
													_1: {ctor: '[]'}
												}
											},
											{ctor: '[]'}),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$cdFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$path,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fill('#007fff'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '[]'}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M29 96h67l21-67 21 67h67l-55 42 21 67-54-42-55 42 21-67-54-42zM600 0L0 360v120h40l600-360V0h-40'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#f7d618'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M640 0L0 384v96L640 96V0'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#ce1021'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {ctor: '[]'}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$ccFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M0-360l69 216 212-80L156-36 351 80l-226 20 31 224L0 160l-156 164 31-224-226-20 195-116-125-188 212 80z'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$id('a'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M0-210L55-76l145 11L89 29l34 141L0 93l-123 77 34-141-111-94 145-11z'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$id('b'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {ctor: '[]'}
				}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fill('green'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$circle,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$cx('320'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$cy('240'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$r('67'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#ffe000'),
									_1: {ctor: '[]'}
								}
							}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$circle,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$cx('341'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$cy('240'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$r('55'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill('green'),
										_1: {ctor: '[]'}
									}
								}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$circle,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$cx('110'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$cy('173'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$r('70'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$fill('#ffe000'),
											_1: {ctor: '[]'}
										}
									}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M105 226h17v-2c-1-1-4-1-3-4 2-6 2-4 3-18 2-14 2-35 2-35h-2l-1 15-4 16-3 12-4 7-3 5-1 1-1 3z'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill('#802000'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$stroke('#7b3100'),
											_1: {ctor: '[]'}
										}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$path,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M118 122l-1 10-2 10c-2 0-4-4-6-2l7 10c0 1 3 4 1 5-4-2-5-7-8-11-3-5-9-9-15-10-3 0-11 0-9 4 3 2 7 3 10 6 2 0 7 4 6 5-4-2-5-4-10-5-5-2-13-1-17 5 0 1-1 5 1 6 2-4 5-7 10-6 3 0-4 6-1 5l4-2 4 1 2 2-3 1-3 2h-5c-4-2-10-1-11 3 0 2-2 0-3 1 0 2 0 4-4 4l-6 6c1 3 7-4 7-1-3 4 1 4 3 2 3-3 6-7 11-4 2 2 3-1 4-1 1 3 2 0 3 0 2-1 2 2 4 0 4-2 9 0 13-3 4-2 0 2-1 3-2 4 0 9-4 11-2 4 2 10-2 13 0 2 5 2 6 3 3 0 0-6 3-7 3 2 3-4 2-6l3-12c2-4 4 2 2 4-2 4-4 9-1 13l3 3c1 1 3 0 3-2l3-18c2-2 4-1 5 1l8 11c4 1 7 4 8 7 0 3 8 3 5 0-2-3 0-5 2-7v-1c-2-1-2-3 0-2 4 1 0-3-1-3-3-1-7-4-8-7 4 0 8 2 12 1 3-1 6 0 7 3 2 0 1-3 0-4 2 0 3-2 1-3-1-2 1-4-2-4 0-2-1-5-4-5-2-3-10 3-10-2-1-3 3-1 4-2 2-3-5-3-3-5 2-1 8-2 3-3-3 1-5 0-7-1-2 3-7-2-6 4-1 2-6 7-7 3 1-3 7-4 5-9 0-3-3 1-4 0l3-4c4 3 4-3 6-2 3-1 0-2-1-2 1-2 4-2 1-4s-5 2-7 3c-3-3 2-4 3-5 0-1-3-1-2-2s5-1 3-3c-3-1-7 0-10 1l-4 5c-1-2 0-6-3-7zm15 43c3-1 0 3-1 3 0-1-3-1-1-2a7 7 0 0 1 2-1z'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$fill('green'),
											_1: {ctor: '[]'}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$svg$Svg$g,
										{
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$transform('translate(0 80) scale(.0635)'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$fill('#ffe000'),
												_1: {ctor: '[]'}
											}
										},
										{
											ctor: '::',
											_0: A2(
												_elm_lang$svg$Svg$use,
												{
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$height('100%'),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$width('100%'),
														_1: {
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#a'),
															_1: {
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$x('7560'),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$svg$Svg_Attributes$y('4200'),
																	_1: {ctor: '[]'}
																}
															}
														}
													}
												},
												{ctor: '[]'}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$svg$Svg$use,
													{
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$height('100%'),
														_1: {
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$width('100%'),
															_1: {
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#a'),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$svg$Svg_Attributes$x('6300'),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$svg$Svg_Attributes$y('2205'),
																		_1: {ctor: '[]'}
																	}
																}
															}
														}
													},
													{ctor: '[]'}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$svg$Svg$use,
														{
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$height('100%'),
															_1: {
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$width('100%'),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#a'),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$svg$Svg_Attributes$x('7560'),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$svg$Svg_Attributes$y('840'),
																			_1: {ctor: '[]'}
																		}
																	}
																}
															}
														},
														{ctor: '[]'}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$svg$Svg$use,
															{
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$height('100%'),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$svg$Svg_Attributes$width('100%'),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#a'),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$svg$Svg_Attributes$x('8680'),
																			_1: {
																				ctor: '::',
																				_0: _elm_lang$svg$Svg_Attributes$y('1869'),
																				_1: {ctor: '[]'}
																			}
																		}
																	}
																}
															},
															{ctor: '[]'}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$svg$Svg$use,
																{
																	ctor: '::',
																	_0: _elm_lang$svg$Svg_Attributes$height('100%'),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$svg$Svg_Attributes$width('100%'),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#b'),
																			_1: {
																				ctor: '::',
																				_0: _elm_lang$svg$Svg_Attributes$x('8064'),
																				_1: {
																					ctor: '::',
																					_0: _elm_lang$svg$Svg_Attributes$y('2730'),
																					_1: {ctor: '[]'}
																				}
																			}
																		}
																	}
																},
																{ctor: '[]'}),
															_1: {ctor: '[]'}
														}
													}
												}
											}
										}),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$caFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$path,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M150 0h340v480H150z'),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '[]'}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fill('#bf0a30'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M-20 0h170v480H-20zm510 0h170v480H490zM201 232l-13 4 61 54c5 14-1 18-5 25l66-8-2 67h14l-3-67 67 8c-4-9-8-13-4-27l61-51-10-4c-9-7 3-33 5-49 0 0-36 12-38 6l-9-18-33 36c-3 1-5 0-6-3l15-75-23 13c-2 1-4 0-6-2l-23-46-23 48c-2 1-4 2-5 0l-23-12 14 74c-1 3-4 4-7 2l-31-35c-4 6-7 17-12 19-6 3-24-4-36-7 4 15 17 40 9 48z'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$bzFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$version('1'),
					_1: {ctor: '[]'}
				}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$path,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fill('#ce1126'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '[]'}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fill('#003f87'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M0 34h640v412H0z'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$circle,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$cx('320'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$cy('240'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$r('189'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
									_1: {ctor: '[]'}
								}
							}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$circle,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$r('156'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$cy('239'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$cx('320'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill('none'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$stroke('#552300'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$strokeWidth('4'),
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M302 73c14-15 27 3 27 11-1 8-15 26-28 11 13 4 17-11 24-11-7 0-9-15-23-11zM155 192c-8-19 14-23 21-19s17 25-1 30c9-11-3-21 0-27-3 6-18 2-20 16zm317-19c19 8 7 26 0 28-8 3-30-4-21-21 1 14 17 12 19 18-2-6 11-14 2-25zM219 377c-21-2-15-22-8-27s30-4 26 15c-5-13-19-7-24-12 5 5-6 16 6 24zm209-15c0 21-21 17-26 11-6-6-8-29 11-27-12 6-4 20-9 25 5-5 17 4 24-9zM170 153c-2-21 20-18 26-13 6 6 10 29-10 28 11-7 3-20 7-25-4 5-17-3-23 10zm22 193c-20-4-13-24-6-28 8-4 31-2 25 16-4-13-19-8-23-13 4 5-7 16 4 25zM354 74c19-9 25 12 21 19-3 8-23 20-30 2 12 7 21-5 27-3-6-2-3-17-18-18zm40 314c-9 19-27 6-29-2s7-30 23-19c-13 0-13 16-19 18 6-2 13 11 25 3zm90-178c16 13-1 26-9 26-9 0-27-13-13-27-3 14 12 17 12 24 0-7 15-10 10-23zM222 101c4-20 24-11 28-4s0 30-18 24c13-4 9-19 15-22-6 3-16-8-25 2zm-62 172c-18-10-4-26 4-28 8-1 29 8 18 24 0-14-15-14-17-21 2 7-12 13-5 25zm263-159c21-3 20 18 14 25-5 6-28 11-28-8 8 11 20 1 26 5-6-4 2-17-12-22zM306 408c-19 9-24-13-20-20s24-18 30 0c-11-8-21 4-27 1 6 3 3 17 17 19zm171-115c8 19-13 24-20 20-8-3-19-24-1-30-8 11 4 21 2 27 2-6 17-3 19-17zm-325-61c-12-17 8-25 16-23s23 19 5 29c7-12-7-19-6-26-1 7-16 6-15 20zm112 164c-20 7-23-15-19-22s25-17 30 2c-10-9-21 3-27 0 6 3 2 17 16 20zm-6-314c12-18 27-2 28 6s-10 28-25 16c14 1 15-14 22-16-7 2-12-13-25-6zm201 252c1 20-21 17-27 11-5-5-9-28 11-27-12 7-4 20-8 25 4-5 17 3 23-9zm-6-195c21 4 12 24 5 28s-30 2-24-17c4 13 18 9 22 14-4-5 8-15-3-25zm-258-14c0-21 21-16 27-10 5 6 7 29-13 27 12-7 5-20 10-25-5 5-17-4-24 8zm-26 186c-19-9-5-26 3-28s29 6 19 23c-1-14-16-14-18-20 2 6-12 13-4 25zM392 91c19-7 23 14 19 21s-25 17-30-1c11 9 21-3 27 0-6-3-2-18-16-20zm-41 315c-15 14-27-4-26-12 1-9 16-26 28-10-13-5-18 10-25 10 7 0 9 15 23 12zm132-158c15 15-4 26-12 25s-26-16-10-28c-4 13 10 18 10 25 0-7 15-8 12-22z'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#007f00'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}
				}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$byFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$version('1'),
					_1: {ctor: '[]'}
				}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$clipPath,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 0h683v512H0z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$clipPath('url(#a)'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$transform('scale(.9376 .9375)'),
							_1: {ctor: '[]'}
						}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#b20000'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 0h1024v340H0z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#429f00'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M0 340h1024v172H0z'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M0 0h113v512H0z'),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {ctor: '[]'}
						}
					}
				}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$btFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$version('1'),
					_1: {ctor: '[]'}
				}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$path,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fill('#ffd520'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '[]'}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M0 480h640V0z'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#ff4e12'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$g,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M404 142c-1 1-5 6-5 8-7 20 11 35 21 56 9 17 8 44-5 61-5 6-3 8-9 14-2 2-5 5-4 13 4-1 9 2 10 5 2-1 6-1 7 1 5-2 8-1 12 3 4-1 7 0 10 3 2-3 6-5 8-4 0-4 5-8 9-6-1-6 4-11 10-9 4-4 14-4 18 2-8-3-8 6-15 5 2 5-2 8-7 10 3-1 6-3 7-1 3-3 8-2 9-1 4-1 7 0 8 4 5 3 8 10 5 16-1-6-5-6-7-8-3 1-7 1-8-1-2 2-9 4-12 1-1 4-5 8-10 8 1 4-2 10-5 13 4 2 3 8 2 11 7 1 1 7 13 11-6 1-17 0-19-7-5-1-9-6-9-12-4-4-5-10 1-14-5 1-8-7-15-4-4 2-14-1-14-4-1 2-11 1-12-3-3 1-10-1-10-6-4 2-10-1-9-5-4-1-4-4-4-7-3-1-3-5-1-9-3-2-2-6 0-9-2-3-2-6-1-9-12-1-28-4-63-15-54-17-68 22-57 46 14 28-1 34 4 55 4 1 7 5 7 9 3 1 5 3 4 8 2 0 5 1 7 3 2-4 8-4 11 0 7-1 10 4 10 11 4 7 2 14-2 19v-8c0-5-6-6-5-9-3 0-6-2-7-4-2 2-5 2-7 1 4 2 6 8 5 12 2 3 2 9-1 12-1 5-4 6-9 4 2-2 3-5 3-8-2-1-2-4-3-6-5 1-12-3-13-5-11 0-20 9-20 20 0-4-6-8-5-12-3-9 1-18 14-20-2-3 4-7 2-11-3-6-8-12-15-20 4-8 3-18 1-24-4-9-8-7-21 8-21 23-50 17-75 32-7 4-13 6-6-1 7-8 26-15 39-21 23-12 42-31 50-69 18-88 85-59 127-42 40 15 33-20 13-41-25-25-20-45-8-61 20-3 59 4 51 11z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M394 116l-5-2c-8-1-4-8 3-8 14-16 22-4 39-9 6-2 10-1 14 0 7-5 16-3 23 3l3-3c6-1 11 4 13 10 4 0 10 2 13 5 5-2 9-3 10 0 4-2 10-3 13 4s-7 5-8 19c-1 9-12 13-20 7-12-8-25-10-31 4-6 13-11 20-26 16-5-1-12 1-17 6-4 6-11 1-19 2 10-2 6-5 15-5 8-1 6-8 11-9-20 5-19-2-36 3 8-10 19-4 25-10-15 0-22-10-29-6-10 7-6 25-33 23-14 0-22 1-30 9 14-28 33-13 42-22l12-14 4-4c-23-7-9-18 14-19z'),
									_1: {ctor: '[]'}
								},
								{ctor: '[]'}),
							_1: {ctor: '[]'}
						}
					}),
				_1: {ctor: '[]'}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$bwFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$g,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#00cbff'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 160h640v160H0z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 186h640v108H0z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}
				}
			}),
		_1: {ctor: '[]'}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$bvFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$clipPath,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$clipPath('url(#a)'),
						_1: {ctor: '[]'}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M-28 0h700v512H-28z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#d72828'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M-53-78h219v276H-53zM289-1h381v199H289zM-28 320h191v190H-28zm320 2h378v188H292z'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#003897'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M197-25h64v535h-64z'),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$path,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill('#003897'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$d('M-28 225h698v63H-28z'),
											_1: {ctor: '[]'}
										}
									},
									{ctor: '[]'}),
								_1: {ctor: '[]'}
							}
						}
					}
				}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$bsFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$clipPath,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M-12 0h640v480H-12z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$clipPath('url(#a)'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$transform('translate(12)'),
							_1: {ctor: '[]'}
						}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M969 480H-10V2h979z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#ffe900'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M969 344H-10V143h979z'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#08ced6'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M969 480H-10V321h979zm0-319H-10V2h979z'),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$path,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M-11 0c2 0 392 237 392 237L-12 479l1-479z'),
										_1: {ctor: '[]'}
									},
									{ctor: '[]'}),
								_1: {ctor: '[]'}
							}
						}
					}
				}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$brFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$version('1'),
					_1: {ctor: '[]'}
				}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$g,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#229e45'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M321 436l302-196L320 44 17 241l304 195z'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#f8e509'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M453 240a127 127 0 1 1-255 0 127 127 0 0 1 255 0z'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#2b49a3'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M444 286c2-5 5-13 6-20-68-59-143-90-239-84l-8 21c113-11 196 39 241 83z'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {ctor: '[]'}
						}
					}
				}
			}),
		_1: {ctor: '[]'}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$bqFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$path,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fill('#21468b'),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '[]'}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v320H0z'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v160H0z'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#ae1c28'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {ctor: '[]'}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$boFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$version('1'),
					_1: {ctor: '[]'}
				}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$path,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fill('#007934'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '[]'}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fill('#ffe000'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v320H0z'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#d52b1e'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v160H0z'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$use,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$height('330'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$width('330'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$transform('rotate(23 -418 956) scale(.14262)'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill('#fcbf49'),
										_1: {ctor: '[]'}
									}
								}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$use,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$height('330'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$width('330'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$transform('matrix(-.14262 0 0 .14262 334 233)'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$fill('#fcbf49'),
											_1: {ctor: '[]'}
										}
									}
								}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}
				}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$bnFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$version('1'),
					_1: {ctor: '[]'}
				}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$path,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fill('#f7e017'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '[]'}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M0 33v214l640 100V233z'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M0 147v100l640 200V347z'),
						_1: {ctor: '[]'}
					},
					{ctor: '[]'}),
				_1: {ctor: '[]'}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$bmFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$version('1'),
					_1: {ctor: '[]'}
				}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$path,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fill('#cf142b'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '[]'}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fill('#00247d'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M0 0h320v160H0z'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M0 0v18l284 142h36v-18L36 0H0zm320 0v18L36 160H0v-18L284 0h36z'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M133 0v160h54V0h-54zM0 53v54h320V53H0z'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 64v32h320V64H0zM144 0v160h32V0h-32zM0 160l107-53h24L24 160H0zM0 0l107 53H83L0 12V0zm189 53L296 0h24L213 53h-24zm131 107l-107-53h24l83 41v12z'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#cf142b'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}
				}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$blFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$g,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#00267f'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 0h213v480H0z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#f31830'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M427 0h213v480H427z'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}
				}
			}),
		_1: {ctor: '[]'}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$bjFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$clipPath,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('gray'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M68-154h666v666H68z'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$transform('matrix(.961 0 0 .7207 -65 111)'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$clipPath('url(#a)'),
						_1: {ctor: '[]'}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$g,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#319400'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M0-154h333v666H0z'),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$path,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill('#ffd600'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$d('M333-154h666v333H333z'),
											_1: {ctor: '[]'}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$svg$Svg$path,
										{
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$fill('#de2110'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$d('M333 179h666v333H333z'),
												_1: {ctor: '[]'}
											}
										},
										{ctor: '[]'}),
									_1: {ctor: '[]'}
								}
							}
						}),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$biFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$clipPath,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M-91 0h683v512H-91z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$clipPath('url(#a)'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$transform('translate(85) scale(.9375)'),
							_1: {ctor: '[]'}
						}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M-178 0l429 256-429 256zm858 0L251 256l429 256z'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#00cf00'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M-178 0l429 256L680 0zm0 512l429-256 429 256z'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('red'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M680 0h-80l-778 464v48h80L680 48z'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$path,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M399 256a148 148 0 1 1-296 0 148 148 0 0 1 296 0z'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
											_1: {ctor: '[]'}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$svg$Svg$path,
										{
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$d('M-178 0v48l778 464h80v-48L-98 0z'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
												_1: {ctor: '[]'}
											}
										},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$svg$Svg$path,
											{
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$stroke('#00de00'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$strokeWidth('4'),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$fill('red'),
														_1: {
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$d('M280 200h-19l-10 17-10-17h-19l9-17-9-17h19l10-16 10 16h19l-9 17zm-65 112h-19l-10 17-10-17h-19l9-17-9-17h19l10-17 10 17h20l-10 17zm131 0h-19l-10 17-10-17h-19l9-17-9-17h19l10-17 10 17h19l-9 17z'),
															_1: {ctor: '[]'}
														}
													}
												}
											},
											{ctor: '[]'}),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$bhFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$clipPath,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$clipPath('url(#a)'),
						_1: {ctor: '[]'}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#e10011'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M-32 0h720v480H-32z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M114 480H-32V0h146l94 30-94 30 94 30-94 30 94 30-94 30 94 30-94 30 94 30-94 30 94 30-94 30 94 30-94 30 94 30-94 30'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}
				}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$bgFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$g,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#d62612'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M0 320h640v160H0z'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v160H0z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#00966e'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M0 160h640v160H0z'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}
				}
			}),
		_1: {ctor: '[]'}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$bfFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$g,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#de0000'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M640 480H0V0h640z'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#35a100'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M640 480H0V240h640z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#fff300'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M255 276l-106-72h131l40-117 40 117h131l-106 72 41 117-106-72-106 72'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}
				}
			}),
		_1: {ctor: '[]'}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$bdFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$path,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fill('#006a4e'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '[]'}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$circle,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$cx('280'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$cy('240'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$r('160'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#f42a41'),
								_1: {ctor: '[]'}
							}
						}
					}
				},
				{ctor: '[]'}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$baFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$clipPath,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M-85 0h682v512H-85z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$clipPath('url(#a)'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$transform('translate(80) scale(.9375)'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
							_1: {ctor: '[]'}
						}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#009'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M-85 0h682v512H-85V0z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#FC0'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M56 0l511 512V0H56z'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#FFF'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M440 482l-28-21-29 20 11-33-28-20h35l11-33 11 33h34l-27 21 10 33zm81 10h-35l-10-33-11 33h-35l28 20-11 33 29-20 28 21-11-33 28-21zM366 385l28-21h-35l-11-33-11 33h-35l28 20-10 34 28-21 28 21-10-33zm-65-65l28-20-35-1-10-33-11 33h-35l28 21-11 33 29-20 28 20-11-33zm-63-63l28-21h-35l-11-33-11 33h-35l28 20-10 33 28-20 28 21-10-33zm-65-65l28-20h-35l-11-34-10 34-35-1 28 21-11 33 29-20 28 20-11-33zm-63-64l27-20h-34L92 74l-11 34H46l28 20-11 33 29-20 28 20-10-33zM46 64l27-20H39L28 10 17 44h-35l28 20-11 33 29-20 28 20-10-33zM-18 0L9-20h-34l-11-34-11 34h-35l28 20-11 33 29-20 28 20-10-33z'),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {ctor: '[]'}
						}
					}
				}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$bbFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$path,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fill('#00267f'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '[]'}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fill('#ffc726'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M213 0h214v480H213z'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M320 136c-7 18-14 38-29 53l18-3v80l-23 3-1-3c-2-24-8-45-14-67-1-3-9-14-3-12 1 0 10 4 8 2a85 85 0 0 0-46-24c-2 0-2 1-1 2 22 35 41 76 41 124 9 0 30-5 39-5v56h11l2-156z'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$use,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$height('100%'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$width('100%'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#a'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$transform('matrix(-1 0 0 1 640 0)'),
										_1: {ctor: '[]'}
									}
								}
							}
						},
						{ctor: '[]'}),
					_1: {ctor: '[]'}
				}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$azFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$path,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fill('#3f9c35'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '[]'}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fill('#ed2939'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v320H0z'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#00b9e4'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v160H0z'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$circle,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$cx('304'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$cy('240'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$r('72'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
										_1: {ctor: '[]'}
									}
								}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$circle,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$cx('320'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$cy('240'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$r('60'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$fill('#ed2939'),
											_1: {ctor: '[]'}
										}
									}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M384 200l8 22 20-10-10 20 22 8-22 8 10 20-20-10-8 22-8-22-20 10 10-20-22-8 22-8-10-20 20 10 8-22z'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {ctor: '[]'}
						}
					}
				}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$axFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$clipPath,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M106 0h1134v850H106z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$clipPath('url(#a)'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$transform('matrix(.56472 0 0 .56482 -60 0)'),
						_1: {ctor: '[]'}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M0 0h1300v850H0z'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#0053a5'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$g,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#ffce00'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$path,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M400 0h250v850H400z'),
										_1: {ctor: '[]'}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$svg$Svg$path,
										{
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$d('M0 300h1300v250H0z'),
											_1: {ctor: '[]'}
										},
										{ctor: '[]'}),
									_1: {ctor: '[]'}
								}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$g,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#d21034'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: A2(
										_elm_lang$svg$Svg$path,
										{
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$d('M475 0h100v850H475z'),
											_1: {ctor: '[]'}
										},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$svg$Svg$path,
											{
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$d('M0 375h1300v100H0z'),
												_1: {ctor: '[]'}
											},
											{ctor: '[]'}),
										_1: {ctor: '[]'}
									}
								}),
							_1: {ctor: '[]'}
						}
					}
				}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$awFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$version('1'),
					_1: {ctor: '[]'}
				}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$clipPath,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 0h288v216H0z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$transform('scale(2.2222)'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$clipPath('url(#a)'),
						_1: {ctor: '[]'}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#39c'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 0v216h324V0H0z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#ff0'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M0 144v12h324v-12H0zm0 24v12h324v-12H0z'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M142 34l-21 79-78 21 78 20 21 79 21-79 79-21-79-20-21-79z'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$strokeWidth('4'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$stroke('#fff'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#c00'),
									_1: {ctor: '[]'}
								}
							}
						}
					},
					{ctor: '[]'}),
				_1: {ctor: '[]'}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$auFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$path,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fill('#006'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '[]'}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M0 0v28l307 222h39v-28L39 0H0zm346 0v28L39 250H0v-28L307 0h39z'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M144 0v250h58V0h-58zM0 83v84h346V83H0z'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M0 100v50h346v-50H0zM156 0v250h34V0h-34zM0 250l115-83h26L26 250H0zM0 0l115 83H89L0 19V0zm205 83L320 0h26L230 83h-25zm141 167l-116-83h26l90 64v19z'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#c00'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M300 393l-44 3 6 44-30-32-30 32 6-44-44-3 38-23-24-36 41 15 13-42 13 42 41-15-24 36m225 63l-11-16 18 6 6-18 5 18 18-6-10 16 16 9-19 2 3 19-13-14-13 14 2-19-19-2m17-292l-11-15 18 6 6-18 5 18 18-6-10 15 16 10-19 2 3 19-13-14-13 14 2-19-19-2m-89 105l-11-16 18 7 6-18 6 18 17-7-10 16 16 10-19 1 3 19-13-14-13 14 2-19-19-1m217-38l-11-16 18 7 6-18 5 18 18-7-10 16 16 10-19 1 3 19-13-14-13 14 2-19-19-1m-22 73l-10 6 2-11-9-8 12-1 5-12 5 12 12 1-10 8 3 11'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
										_1: {ctor: '[]'}
									}
								}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}
				}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$atFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$g,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M640 480H0V0h640z'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#df0000'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M640 480H0V320h640zm0-320H0V0h640z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {ctor: '[]'}
				}
			}),
		_1: {ctor: '[]'}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$arFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$version('1'),
					_1: {ctor: '[]'}
				}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$path,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fill('#74acdf'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '[]'}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M0 160h640v160H0z'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$asFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$version('1'),
					_1: {ctor: '[]'}
				}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$clipPath,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$clipPath('url(#a)'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#006'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M-374-16H650v512H-374z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M-374 240L650 496V-16L-374 240z'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill('#bd1021'),
										_1: {ctor: '[]'}
									}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M650 11v458l-914-229L650 11z'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
											_1: {ctor: '[]'}
										}
									}
								},
								{ctor: '[]'}),
							_1: {ctor: '[]'}
						}
					}
				}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$aqFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$path,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fill('#3a7dce'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
						_1: {ctor: '[]'}
					}
				}
			},
			{ctor: '[]'}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M185 225c-3-6-3-6-3-11h-3c0-1-1 5-3 4-1-1 1-5-1-6v-6s-4 2-6-4c-1-2-3 1-3 1s1 2-1 3c-1-2-3-1-5-3s0-4-4-6c3-7 3-6 10-9l-7-7c-4-1-6-3-10-6-6-7-9-22-9-32 4-4 9 11 16 16l10 4c6 3 7 6 12 9l13 5c5 4 8 10 13 11 4 0 5-2 7-3 8 0 13-1 14-4 2-2 6 2 18-3l-2-6s3-2 7-1c0-3 0-10 4-13-2-3-1-5-1-5l3-3c-1-7 1-7 1-9 1-2-2-1-1-4s5-3 6-5l-2-4v-9c8-2 11-9 13-6 2-9 3-12 12-12 1-2-3-5-1-6 2 0 5 0 8 5 1 1 1-2 2-3 1 0 4 0 4-2l3-7c1-2 2 1 3 6 6 0 20 1 26 3 4 1 7-1 11-2 3 3 6 1 8 8 2 3 6 0 7 1 4 14 21 5 22 5 2 0 5 6 7 6 2-1 2-3 4-2-1 5 5 11 5 15h2c1-2 2-5 3-4l7 1 15 4c1 3 3 4 5 4 3 2 1 4 2 4 3-2 4-3 7-2 3 2 6 5 7 8v16c1 3 1 5 5 10-1 5 3 14 3 16 0 3-2 5-3 8 5 4 0 12-3 16 21 5 11 13 29 9-5 10-3 9 1 20-8 6 0 7-6 15 0 0 4 6 9 6-1 12-6 8-4 25-12 0-7 14-15 12 1 9 5 9 3 18-6 1-6 1-9 6l-4-2c-1 8-4 9 0 17h-7c0 2 2 3 3 5 0 2-8 6-15 6-1 4 5 8 4 10-6 1-9 10-9 10s3 1 2 3c-1-2-2-2-5-2-2 0-5 0-9 6-3 1-5 1-8 4-1-3-3 0-5 2l-6 5 2-5-7 1h-1l-2-4c-2 0-5 6-7 6l-3-2-4 6c-1 0-4-3-7-3-14 5-16-10-18-1-3-2-3-1-6 0-2 0-2-3-4-3-3 0-3 4-5 3-1-7-11-6-11-9-1-3 4-3 5-5 1-3-1-4 4-7 6-4 2-6 3-9 2-5 2-6 1-10l-6-13c-3-1-3 5-7 6-9 3-24-7-27-7-2 0-14 2-13-3-2 5-8 1-8 1-6 0-4 5-8 4l-19-1v3l-12-6-10-3c-9-3-4-11-19-6v-9h-7c3-18 0-9-2-25l-5 1c-6-8 8-6-5-11 0 0 1-9-2-6l1 4c-12-1-14-4-14-16h8l-3-18c0-2 9-7 7-11l5-1'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M203 168s-2-1-2 2l2-2zm1-5c-2 0-3 0-3 2 1-2 3-2 3-2zm9 28s2 0 1 2l-1-2z'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('none'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$stroke('#fff'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$strokeWidth('2'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$strokeLinejoin('round'),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					},
					{ctor: '[]'}),
				_1: {ctor: '[]'}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$aoFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$g,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('red'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v244H0z'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M0 236h640v244H0z'),
							_1: {ctor: '[]'}
						},
						{ctor: '[]'}),
					_1: {ctor: '[]'}
				}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M229 148c165 43 59 256-72 167l-8 14c76 55 152 11 174-46 22-59-8-142-93-150l-1 15z'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#ffec00'),
							_1: {ctor: '[]'}
						}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#ffec00'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M170 331l22 10-10 22-22-10zm149-100h24v24h-24zm-12-39l23-8 8 22-22 9zm-26-29l17-17 17 17-17 17zm-26-40l23 9-9 22-22-8zm61 147l22 9-9 22-22-9zm-70 70l22-9 10 22-22 9zm-39 3h24v24h-24zm41-116l-20-15-21 14 8-23-20-15h25l8-22 8 22h25l-20 15 7 24z'),
								_1: {ctor: '[]'}
							}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M336 346l-10 19 4 1c14 4 20 9 26 17 3 3 7 3 10 1l7-5c3-5 2-8-2-11l-35-22z'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#fe0'),
									_1: {ctor: '[]'}
								}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M365 373a4 4 0 1 1-8 0 4 4 0 0 1 8 0zm-21-14a4 4 0 1 1-9 0 4 4 0 0 1 9 0zm11 7a4 4 0 1 1-9 0 4 4 0 0 1 9 0z'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M324 364l-129-75c-19-12-20-34-8-50 2-2 3-2 4-1 1 9 6 17 11 22 45 28 88 56 132 86l-10 18z'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$fill('#fe0'),
											_1: {ctor: '[]'}
										}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$path,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$fill('#ffec00'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$d('M297 305l18 16-16 18-18-16z'),
												_1: {ctor: '[]'}
											}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$svg$Svg$path,
										{
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$d('M332 349l-125-76m109 58l-42-27m18 43l-43-25'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$stroke('#000'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$strokeWidth('3'),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$fill('none'),
														_1: {ctor: '[]'}
													}
												}
											}
										},
										{ctor: '[]'}),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$amFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$path,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v160H0z'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fill('red'),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '[]'}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M0 160h640v160H0z'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#00f'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M0 320h640v160H0z'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('orange'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {ctor: '[]'}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$alFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$path,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fill('#e41e20'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '[]'}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$id('a'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M272 93c-5 0-12 2-12 5-13-2-15 4-14 8l4-3c2 0 4 0 6 2l4 4c-4 1-8 0-11-1l-6-2-4-4c-3-3-6-2-5 2 2 4 6 6 10 7l9 1h10l-6 3-11-3c1 2 4 5 10 6 9 2 17 3 22 6 6 3 9 7 11 9 5 6 5 10 6 11 0 9-3 14-8 16-3 0-8-1-10-3s-4-6-3-12c0-2 3-8 0-10-10-6-23-11-32-15-2-1-4 3-5 4-16-2-30-12-36-24-4-7-11 0-10 8 2 8 8 13 15 18 8 4 17 8 27 8 5 1 5 7-1 8-12 1-22 0-31-9-7-6-11 2-9 6 3 13 22 17 41 12 7-1 3 7 1 7-8 6-22 11-35 0-5-4-9-1-7 6 5 16 27 13 41 5 4-2 7 2 3 6-18 13-27 13-35 8-11-4-12 7-6 11 7 4 24 1 37-7 5-4 6 2 2 5-15 13-21 16-36 14-8-1-8 9-2 13 9 5 25-4 37-14 6-3 6 2 4 7-8 10-15 16-22 18-7 3-14 2-18 1-6-2-7 4-4 9 2 4 10 5 19 2 8-3 18-11 24-19 5-5 5 2 2 6-12 20-24 28-39 26-7-1-9 5-4 9 7 7 17 7 25 0l29-30c5-4 7 0 5 8-1 5-5 10-14 14-7 3-2 9 3 9 3 0 8-3 12-8 6-6 6-10 9-20 3-5 8-2 8 2-2 10-4 12-9 16s3 6 6 4c7-6 10-12 13-18 2-5 7-3 5 5-6 17-16 24-34 27l-2 4 7 7-30 8-15-10c-1-3-2-8-10-5-5-2-7-1-10 1 4 0 6 1 7 3 3 6 8 6 13 5l8 8-17-1c-6-6-10-6-14-1-4 1-5 1-7 5 3-2 5-2 7-1 6 4 10 3 13 0l18 1-8 5c-9-2-13 1-15 8-1 3-2 6-1 10 1-3 2-6 5-7 8 2 11-2 11-6 4-4 10-4 14-8l11 4c2 5 6 7 12 6 7 0 5 3 6 5 2-3 2-6-3-9-1-5-5-7-9-4l-10-4c11-4 19-5 30-8l7 7h4c7-10 10-19 16-26 3-2 6-6 9-7l6 1 2 9-4 11-6 8c-4 5-9 8-12 10-7 5-9 3-14 2-7 1-8 4-3 9 5 2 9 2 13 2 3-1 6-5 9-7 3-3 7 1 4 5-6 7-12 11-19 11-8 1-6 5-1 7 9 4 17-3 21-7s6-4 5 1c-3 10-7 14-14 15-6-1-6 4-2 7 10 6 17-5 20-12 2-6 6-3 6 2 0 7-3 12-11 19l20 31 19-214-19-34-11-11v-1l5-1c-4-5-8-6-15-8l9-1c-2-3-7-8-14-10l10-7c-8 0-14-1-20-3l-12-4zm1 9c4 0 6 1 6 3 0 1-2 2-6 2s-6-1-6-3c0-1 2-2 6-2z'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$use,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$height('100%'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$width('100%'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#a'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$transform('matrix(-1 0 0 1 640 0)'),
									_1: {ctor: '[]'}
								}
							}
						}
					},
					{ctor: '[]'}),
				_1: {ctor: '[]'}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$afFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$version('1'),
					_1: {ctor: '[]'}
				}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$g,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
						_1: {ctor: '[]'}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M427 0h213v480H427z'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#090'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M213 0h214v480H213z'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#bf0000'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}
				}
			}),
		_1: {ctor: '[]'}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$aiFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$version('1'),
					_1: {ctor: '[]'}
				}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$clipPath,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$clipPath('url(#a)'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M0 0h403v240H0z'),
									_1: {ctor: '[]'}
								}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 0v18l97 60 36 1L0 0z'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#c00'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$d('M42 0l116 73V0H42z'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill('#006'),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$path,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M174 0v94H0v53h174v93h53v-93h173V94H227V0h-53z'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$fill('#c00'),
											_1: {ctor: '[]'}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$svg$Svg$path,
										{
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$d('M242 0v69L356 1 242 0z'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$fill('#006'),
												_1: {ctor: '[]'}
											}
										},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$svg$Svg$path,
											{
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$d('M246 77l32-1L403 1l-33 1-124 75z'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$fill('#c00'),
													_1: {ctor: '[]'}
												}
											},
											{ctor: '[]'}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$svg$Svg$path,
												{
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$d('M401 21l-95 57h94v85h-80l79 51 1 26h-42l-116-69v69h-84v-69L49 240H0v240h800V0H402M0 27v50l84 1L0 27zm0 135v52l80-51-80-1z'),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$fill('#006'),
														_1: {ctor: '[]'}
													}
												},
												{ctor: '[]'}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$svg$Svg$path,
													{
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$d('M308 165l-33-1 125 75v-17l-92-57zM32 241l117-75-31 1L0 241'),
														_1: {
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$fill('#c00'),
															_1: {ctor: '[]'}
														}
													},
													{ctor: '[]'}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$svg$Svg$path,
														{
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$d('M462 261c-1 28 0 59 4 88 5 16 4 24 11 33h99c6-10 11-25 11-31 6-29 6-62 6-92-10 6-23 9-36 8-10-1-19-3-30-10-9 6-13 9-28 9-13 1-22 2-37-5z'),
															_1: {
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
																_1: {ctor: '[]'}
															}
														},
														{ctor: '[]'}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$svg$Svg$path,
															{
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$d('M478 382c7 15 32 50 51 49 18-1 39-35 47-49h-98z'),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$svg$Svg_Attributes$fill('#0cf'),
																	_1: {ctor: '[]'}
																}
															},
															{ctor: '[]'}),
														_1: {ctor: '[]'}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$agFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$clipPath,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('a'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M-80 0h683v512H-80z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$clipPath('url(#a)'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fillRule('evenodd'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$transform('translate(75) scale(.9375)'),
							_1: {ctor: '[]'}
						}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M-120 0h763v511h-763z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$path,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M-118 1h761v216h-761z'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$path,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#0061ff'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M21 203h505v114H21z'),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$path,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$d('M643 2v510H262L643 2zm-762 0v510h381L-119 2z'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$fill('#e20000'),
											_1: {ctor: '[]'}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$svg$Svg$path,
										{
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$d('M440 203l-76-19 65-49-80 11 41-69-70 41 12-81-48 64-19-74-22 76-48-65 14 83-70-43 41 70-78-13 64 48-80 20h354z'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$fill('#ffd600'),
												_1: {ctor: '[]'}
											}
										},
										{ctor: '[]'}),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}),
			_1: {ctor: '[]'}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$adFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$version('1'),
					_1: {ctor: '[]'}
				}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$path,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fill('#d0103a'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v480H0z'),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '[]'}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fill('#fedf00'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M0 0h435v480H0z'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#0018a8'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$d('M0 0h205v480H0z'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {ctor: '[]'}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$aeFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$height('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$path,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fill('#00732f'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$d('M0 0h640v160H0z'),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '[]'}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$path,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fill('#fff'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M0 160h640v160H0z'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$path,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d('M0 320h640v160H0z'),
						_1: {ctor: '[]'}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$path,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('red'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$d('M0 0h220v480H0z'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {ctor: '[]'}
				}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flags$unknownFlag = A2(
	_elm_lang$svg$Svg$svg,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$width('100%'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$height('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 480'),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$rect,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fill('#aaa'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$x('0'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$y('0'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$width('640'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$height('480'),
								_1: {ctor: '[]'}
							}
						}
					}
				}
			},
			{ctor: '[]'}),
		_1: {ctor: '[]'}
	});

var _abadi199$intl_phone_input$IntlPhoneInput_Svg$flags = _elm_lang$core$Dict$fromList(
	{
		ctor: '::',
		_0: {ctor: '_Tuple2', _0: 'AD', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$adFlag},
		_1: {
			ctor: '::',
			_0: {ctor: '_Tuple2', _0: 'AE', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$aeFlag},
			_1: {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'AF', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$afFlag},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'AG', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$agFlag},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'AI', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$aiFlag},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'AL', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$alFlag},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'AM', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$amFlag},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'AO', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$aoFlag},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'AR', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$arFlag},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'AS', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$asFlag},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'AT', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$atFlag},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'AU', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$auFlag},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'AW', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$awFlag},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'AX', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$axFlag},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'AZ', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$azFlag},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'BA', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$baFlag},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'BB', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$bbFlag},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'BD', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$bdFlag},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'BE', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$beFlag},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'BF', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$bfFlag},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'BG', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$bgFlag},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'BH', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$bhFlag},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'BI', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$biFlag},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'BJ', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$bjFlag},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'BL', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$blFlag},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'BM', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$bmFlag},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'BN', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$bnFlag},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'BO', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$boFlag},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: 'BQ', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$bqFlag},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: 'BR', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$brFlag},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: 'BS', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$bsFlag},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: 'BT', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$btFlag},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: 'BW', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$bwFlag},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: 'BY', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$byFlag},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: 'BZ', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$bzFlag},
																																				_1: {
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: 'CA', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$caFlag},
																																					_1: {
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: 'CC', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$ccFlag},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: 'CD', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$cdFlag},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: 'CF', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$cfFlag},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: 'CG', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$cgFlag},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: 'CH', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$chFlag},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: 'CI', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$ciFlag},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: 'CK', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$ckFlag},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: 'CL', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$clFlag},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: 'CM', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$cmFlag},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: 'CN', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$cnFlag},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: 'CO', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$coFlag},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: 'CR', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$crFlag},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: 'CU', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$cuFlag},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: 'CV', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$cvFlag},
																																																			_1: {
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: 'CW', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$cwFlag},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {ctor: '_Tuple2', _0: 'CX', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$cxFlag},
																																																					_1: {
																																																						ctor: '::',
																																																						_0: {ctor: '_Tuple2', _0: 'CY', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$cyFlag},
																																																						_1: {
																																																							ctor: '::',
																																																							_0: {ctor: '_Tuple2', _0: 'CZ', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$czFlag},
																																																							_1: {
																																																								ctor: '::',
																																																								_0: {ctor: '_Tuple2', _0: 'DE', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$deFlag},
																																																								_1: {
																																																									ctor: '::',
																																																									_0: {ctor: '_Tuple2', _0: 'DJ', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$djFlag},
																																																									_1: {
																																																										ctor: '::',
																																																										_0: {ctor: '_Tuple2', _0: 'DK', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$dkFlag},
																																																										_1: {
																																																											ctor: '::',
																																																											_0: {ctor: '_Tuple2', _0: 'DM', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$dmFlag},
																																																											_1: {
																																																												ctor: '::',
																																																												_0: {ctor: '_Tuple2', _0: 'DO', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$doFlag},
																																																												_1: {
																																																													ctor: '::',
																																																													_0: {ctor: '_Tuple2', _0: 'DZ', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$dzFlag},
																																																													_1: {
																																																														ctor: '::',
																																																														_0: {ctor: '_Tuple2', _0: 'EC', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$ecFlag},
																																																														_1: {
																																																															ctor: '::',
																																																															_0: {ctor: '_Tuple2', _0: 'EE', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$eeFlag},
																																																															_1: {
																																																																ctor: '::',
																																																																_0: {ctor: '_Tuple2', _0: 'EG', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$egFlag},
																																																																_1: {
																																																																	ctor: '::',
																																																																	_0: {ctor: '_Tuple2', _0: 'EH', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$ehFlag},
																																																																	_1: {
																																																																		ctor: '::',
																																																																		_0: {ctor: '_Tuple2', _0: 'ER', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$erFlag},
																																																																		_1: {
																																																																			ctor: '::',
																																																																			_0: {ctor: '_Tuple2', _0: 'ES', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$esFlag},
																																																																			_1: {
																																																																				ctor: '::',
																																																																				_0: {ctor: '_Tuple2', _0: 'ET', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$etFlag},
																																																																				_1: {
																																																																					ctor: '::',
																																																																					_0: {ctor: '_Tuple2', _0: 'FI', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$fiFlag},
																																																																					_1: {
																																																																						ctor: '::',
																																																																						_0: {ctor: '_Tuple2', _0: 'FJ', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$fjFlag},
																																																																						_1: {
																																																																							ctor: '::',
																																																																							_0: {ctor: '_Tuple2', _0: 'FK', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$fkFlag},
																																																																							_1: {
																																																																								ctor: '::',
																																																																								_0: {ctor: '_Tuple2', _0: 'FM', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$fmFlag},
																																																																								_1: {
																																																																									ctor: '::',
																																																																									_0: {ctor: '_Tuple2', _0: 'FO', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$foFlag},
																																																																									_1: {
																																																																										ctor: '::',
																																																																										_0: {ctor: '_Tuple2', _0: 'FR', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$frFlag},
																																																																										_1: {
																																																																											ctor: '::',
																																																																											_0: {ctor: '_Tuple2', _0: 'GA', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$gaFlag},
																																																																											_1: {
																																																																												ctor: '::',
																																																																												_0: {ctor: '_Tuple2', _0: 'GB', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$gbFlag},
																																																																												_1: {
																																																																													ctor: '::',
																																																																													_0: {ctor: '_Tuple2', _0: 'GD', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$gdFlag},
																																																																													_1: {
																																																																														ctor: '::',
																																																																														_0: {ctor: '_Tuple2', _0: 'GE', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$geFlag},
																																																																														_1: {
																																																																															ctor: '::',
																																																																															_0: {ctor: '_Tuple2', _0: 'GF', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$gfFlag},
																																																																															_1: {
																																																																																ctor: '::',
																																																																																_0: {ctor: '_Tuple2', _0: 'GG', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$ggFlag},
																																																																																_1: {
																																																																																	ctor: '::',
																																																																																	_0: {ctor: '_Tuple2', _0: 'GH', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$ghFlag},
																																																																																	_1: {
																																																																																		ctor: '::',
																																																																																		_0: {ctor: '_Tuple2', _0: 'GI', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$giFlag},
																																																																																		_1: {
																																																																																			ctor: '::',
																																																																																			_0: {ctor: '_Tuple2', _0: 'GL', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$glFlag},
																																																																																			_1: {
																																																																																				ctor: '::',
																																																																																				_0: {ctor: '_Tuple2', _0: 'GM', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$gmFlag},
																																																																																				_1: {
																																																																																					ctor: '::',
																																																																																					_0: {ctor: '_Tuple2', _0: 'GN', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$gnFlag},
																																																																																					_1: {
																																																																																						ctor: '::',
																																																																																						_0: {ctor: '_Tuple2', _0: 'GP', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$gpFlag},
																																																																																						_1: {
																																																																																							ctor: '::',
																																																																																							_0: {ctor: '_Tuple2', _0: 'GQ', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$gqFlag},
																																																																																							_1: {
																																																																																								ctor: '::',
																																																																																								_0: {ctor: '_Tuple2', _0: 'GR', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$grFlag},
																																																																																								_1: {
																																																																																									ctor: '::',
																																																																																									_0: {ctor: '_Tuple2', _0: 'GT', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$gtFlag},
																																																																																									_1: {
																																																																																										ctor: '::',
																																																																																										_0: {ctor: '_Tuple2', _0: 'GU', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$guFlag},
																																																																																										_1: {
																																																																																											ctor: '::',
																																																																																											_0: {ctor: '_Tuple2', _0: 'GW', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$gwFlag},
																																																																																											_1: {
																																																																																												ctor: '::',
																																																																																												_0: {ctor: '_Tuple2', _0: 'GY', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$gyFlag},
																																																																																												_1: {
																																																																																													ctor: '::',
																																																																																													_0: {ctor: '_Tuple2', _0: 'HK', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$hkFlag},
																																																																																													_1: {
																																																																																														ctor: '::',
																																																																																														_0: {ctor: '_Tuple2', _0: 'HN', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$hnFlag},
																																																																																														_1: {
																																																																																															ctor: '::',
																																																																																															_0: {ctor: '_Tuple2', _0: 'HR', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$hrFlag},
																																																																																															_1: {
																																																																																																ctor: '::',
																																																																																																_0: {ctor: '_Tuple2', _0: 'HT', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$htFlag},
																																																																																																_1: {
																																																																																																	ctor: '::',
																																																																																																	_0: {ctor: '_Tuple2', _0: 'HU', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$huFlag},
																																																																																																	_1: {
																																																																																																		ctor: '::',
																																																																																																		_0: {ctor: '_Tuple2', _0: 'ID', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$idFlag},
																																																																																																		_1: {
																																																																																																			ctor: '::',
																																																																																																			_0: {ctor: '_Tuple2', _0: 'IE', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$ieFlag},
																																																																																																			_1: {
																																																																																																				ctor: '::',
																																																																																																				_0: {ctor: '_Tuple2', _0: 'IL', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$ilFlag},
																																																																																																				_1: {
																																																																																																					ctor: '::',
																																																																																																					_0: {ctor: '_Tuple2', _0: 'IM', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$imFlag},
																																																																																																					_1: {
																																																																																																						ctor: '::',
																																																																																																						_0: {ctor: '_Tuple2', _0: 'IN', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$inFlag},
																																																																																																						_1: {
																																																																																																							ctor: '::',
																																																																																																							_0: {ctor: '_Tuple2', _0: 'IO', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$ioFlag},
																																																																																																							_1: {
																																																																																																								ctor: '::',
																																																																																																								_0: {ctor: '_Tuple2', _0: 'IQ', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$iqFlag},
																																																																																																								_1: {
																																																																																																									ctor: '::',
																																																																																																									_0: {ctor: '_Tuple2', _0: 'IR', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$irFlag},
																																																																																																									_1: {
																																																																																																										ctor: '::',
																																																																																																										_0: {ctor: '_Tuple2', _0: 'IS', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$isFlag},
																																																																																																										_1: {
																																																																																																											ctor: '::',
																																																																																																											_0: {ctor: '_Tuple2', _0: 'IT', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$itFlag},
																																																																																																											_1: {
																																																																																																												ctor: '::',
																																																																																																												_0: {ctor: '_Tuple2', _0: 'JE', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$jeFlag},
																																																																																																												_1: {
																																																																																																													ctor: '::',
																																																																																																													_0: {ctor: '_Tuple2', _0: 'JM', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$jmFlag},
																																																																																																													_1: {
																																																																																																														ctor: '::',
																																																																																																														_0: {ctor: '_Tuple2', _0: 'JO', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$joFlag},
																																																																																																														_1: {
																																																																																																															ctor: '::',
																																																																																																															_0: {ctor: '_Tuple2', _0: 'JP', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$jpFlag},
																																																																																																															_1: {
																																																																																																																ctor: '::',
																																																																																																																_0: {ctor: '_Tuple2', _0: 'KE', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$keFlag},
																																																																																																																_1: {
																																																																																																																	ctor: '::',
																																																																																																																	_0: {ctor: '_Tuple2', _0: 'KG', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$kgFlag},
																																																																																																																	_1: {
																																																																																																																		ctor: '::',
																																																																																																																		_0: {ctor: '_Tuple2', _0: 'KH', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$khFlag},
																																																																																																																		_1: {
																																																																																																																			ctor: '::',
																																																																																																																			_0: {ctor: '_Tuple2', _0: 'KI', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$kiFlag},
																																																																																																																			_1: {
																																																																																																																				ctor: '::',
																																																																																																																				_0: {ctor: '_Tuple2', _0: 'KM', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$kmFlag},
																																																																																																																				_1: {
																																																																																																																					ctor: '::',
																																																																																																																					_0: {ctor: '_Tuple2', _0: 'KN', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$knFlag},
																																																																																																																					_1: {
																																																																																																																						ctor: '::',
																																																																																																																						_0: {ctor: '_Tuple2', _0: 'KP', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$kpFlag},
																																																																																																																						_1: {
																																																																																																																							ctor: '::',
																																																																																																																							_0: {ctor: '_Tuple2', _0: 'KR', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$krFlag},
																																																																																																																							_1: {
																																																																																																																								ctor: '::',
																																																																																																																								_0: {ctor: '_Tuple2', _0: 'KW', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$kwFlag},
																																																																																																																								_1: {
																																																																																																																									ctor: '::',
																																																																																																																									_0: {ctor: '_Tuple2', _0: 'KY', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$kyFlag},
																																																																																																																									_1: {
																																																																																																																										ctor: '::',
																																																																																																																										_0: {ctor: '_Tuple2', _0: 'KZ', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$kzFlag},
																																																																																																																										_1: {
																																																																																																																											ctor: '::',
																																																																																																																											_0: {ctor: '_Tuple2', _0: 'LA', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$laFlag},
																																																																																																																											_1: {
																																																																																																																												ctor: '::',
																																																																																																																												_0: {ctor: '_Tuple2', _0: 'LB', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$lbFlag},
																																																																																																																												_1: {
																																																																																																																													ctor: '::',
																																																																																																																													_0: {ctor: '_Tuple2', _0: 'LC', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$lcFlag},
																																																																																																																													_1: {
																																																																																																																														ctor: '::',
																																																																																																																														_0: {ctor: '_Tuple2', _0: 'LI', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$liFlag},
																																																																																																																														_1: {
																																																																																																																															ctor: '::',
																																																																																																																															_0: {ctor: '_Tuple2', _0: 'LK', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$lkFlag},
																																																																																																																															_1: {
																																																																																																																																ctor: '::',
																																																																																																																																_0: {ctor: '_Tuple2', _0: 'LR', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$lrFlag},
																																																																																																																																_1: {
																																																																																																																																	ctor: '::',
																																																																																																																																	_0: {ctor: '_Tuple2', _0: 'LS', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$lsFlag},
																																																																																																																																	_1: {
																																																																																																																																		ctor: '::',
																																																																																																																																		_0: {ctor: '_Tuple2', _0: 'LT', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$ltFlag},
																																																																																																																																		_1: {
																																																																																																																																			ctor: '::',
																																																																																																																																			_0: {ctor: '_Tuple2', _0: 'LU', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$luFlag},
																																																																																																																																			_1: {
																																																																																																																																				ctor: '::',
																																																																																																																																				_0: {ctor: '_Tuple2', _0: 'LV', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$lvFlag},
																																																																																																																																				_1: {
																																																																																																																																					ctor: '::',
																																																																																																																																					_0: {ctor: '_Tuple2', _0: 'LY', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$lyFlag},
																																																																																																																																					_1: {
																																																																																																																																						ctor: '::',
																																																																																																																																						_0: {ctor: '_Tuple2', _0: 'MA', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$maFlag},
																																																																																																																																						_1: {
																																																																																																																																							ctor: '::',
																																																																																																																																							_0: {ctor: '_Tuple2', _0: 'MC', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$mcFlag},
																																																																																																																																							_1: {
																																																																																																																																								ctor: '::',
																																																																																																																																								_0: {ctor: '_Tuple2', _0: 'MD', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$mdFlag},
																																																																																																																																								_1: {
																																																																																																																																									ctor: '::',
																																																																																																																																									_0: {ctor: '_Tuple2', _0: 'ME', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$meFlag},
																																																																																																																																									_1: {
																																																																																																																																										ctor: '::',
																																																																																																																																										_0: {ctor: '_Tuple2', _0: 'MF', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$mfFlag},
																																																																																																																																										_1: {
																																																																																																																																											ctor: '::',
																																																																																																																																											_0: {ctor: '_Tuple2', _0: 'MG', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$mgFlag},
																																																																																																																																											_1: {
																																																																																																																																												ctor: '::',
																																																																																																																																												_0: {ctor: '_Tuple2', _0: 'MH', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$mhFlag},
																																																																																																																																												_1: {
																																																																																																																																													ctor: '::',
																																																																																																																																													_0: {ctor: '_Tuple2', _0: 'MK', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$mkFlag},
																																																																																																																																													_1: {
																																																																																																																																														ctor: '::',
																																																																																																																																														_0: {ctor: '_Tuple2', _0: 'ML', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$mlFlag},
																																																																																																																																														_1: {
																																																																																																																																															ctor: '::',
																																																																																																																																															_0: {ctor: '_Tuple2', _0: 'MM', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$mmFlag},
																																																																																																																																															_1: {
																																																																																																																																																ctor: '::',
																																																																																																																																																_0: {ctor: '_Tuple2', _0: 'MN', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$mnFlag},
																																																																																																																																																_1: {
																																																																																																																																																	ctor: '::',
																																																																																																																																																	_0: {ctor: '_Tuple2', _0: 'MO', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$moFlag},
																																																																																																																																																	_1: {
																																																																																																																																																		ctor: '::',
																																																																																																																																																		_0: {ctor: '_Tuple2', _0: 'MP', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$mpFlag},
																																																																																																																																																		_1: {
																																																																																																																																																			ctor: '::',
																																																																																																																																																			_0: {ctor: '_Tuple2', _0: 'MQ', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$mqFlag},
																																																																																																																																																			_1: {
																																																																																																																																																				ctor: '::',
																																																																																																																																																				_0: {ctor: '_Tuple2', _0: 'MR', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$mrFlag},
																																																																																																																																																				_1: {
																																																																																																																																																					ctor: '::',
																																																																																																																																																					_0: {ctor: '_Tuple2', _0: 'MS', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$msFlag},
																																																																																																																																																					_1: {
																																																																																																																																																						ctor: '::',
																																																																																																																																																						_0: {ctor: '_Tuple2', _0: 'MT', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$mtFlag},
																																																																																																																																																						_1: {
																																																																																																																																																							ctor: '::',
																																																																																																																																																							_0: {ctor: '_Tuple2', _0: 'MU', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$muFlag},
																																																																																																																																																							_1: {
																																																																																																																																																								ctor: '::',
																																																																																																																																																								_0: {ctor: '_Tuple2', _0: 'MV', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$mvFlag},
																																																																																																																																																								_1: {
																																																																																																																																																									ctor: '::',
																																																																																																																																																									_0: {ctor: '_Tuple2', _0: 'MW', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$mwFlag},
																																																																																																																																																									_1: {
																																																																																																																																																										ctor: '::',
																																																																																																																																																										_0: {ctor: '_Tuple2', _0: 'MX', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$mxFlag},
																																																																																																																																																										_1: {
																																																																																																																																																											ctor: '::',
																																																																																																																																																											_0: {ctor: '_Tuple2', _0: 'MY', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$myFlag},
																																																																																																																																																											_1: {
																																																																																																																																																												ctor: '::',
																																																																																																																																																												_0: {ctor: '_Tuple2', _0: 'MZ', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$mzFlag},
																																																																																																																																																												_1: {
																																																																																																																																																													ctor: '::',
																																																																																																																																																													_0: {ctor: '_Tuple2', _0: 'NA', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$naFlag},
																																																																																																																																																													_1: {
																																																																																																																																																														ctor: '::',
																																																																																																																																																														_0: {ctor: '_Tuple2', _0: 'NC', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$ncFlag},
																																																																																																																																																														_1: {
																																																																																																																																																															ctor: '::',
																																																																																																																																																															_0: {ctor: '_Tuple2', _0: 'NE', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$neFlag},
																																																																																																																																																															_1: {
																																																																																																																																																																ctor: '::',
																																																																																																																																																																_0: {ctor: '_Tuple2', _0: 'NF', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$nfFlag},
																																																																																																																																																																_1: {
																																																																																																																																																																	ctor: '::',
																																																																																																																																																																	_0: {ctor: '_Tuple2', _0: 'NG', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$ngFlag},
																																																																																																																																																																	_1: {
																																																																																																																																																																		ctor: '::',
																																																																																																																																																																		_0: {ctor: '_Tuple2', _0: 'NI', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$niFlag},
																																																																																																																																																																		_1: {
																																																																																																																																																																			ctor: '::',
																																																																																																																																																																			_0: {ctor: '_Tuple2', _0: 'NL', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$nlFlag},
																																																																																																																																																																			_1: {
																																																																																																																																																																				ctor: '::',
																																																																																																																																																																				_0: {ctor: '_Tuple2', _0: 'NO', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$noFlag},
																																																																																																																																																																				_1: {
																																																																																																																																																																					ctor: '::',
																																																																																																																																																																					_0: {ctor: '_Tuple2', _0: 'NP', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$npFlag},
																																																																																																																																																																					_1: {
																																																																																																																																																																						ctor: '::',
																																																																																																																																																																						_0: {ctor: '_Tuple2', _0: 'NR', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$nrFlag},
																																																																																																																																																																						_1: {
																																																																																																																																																																							ctor: '::',
																																																																																																																																																																							_0: {ctor: '_Tuple2', _0: 'NU', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$nuFlag},
																																																																																																																																																																							_1: {
																																																																																																																																																																								ctor: '::',
																																																																																																																																																																								_0: {ctor: '_Tuple2', _0: 'NZ', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$nzFlag},
																																																																																																																																																																								_1: {
																																																																																																																																																																									ctor: '::',
																																																																																																																																																																									_0: {ctor: '_Tuple2', _0: 'OM', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$omFlag},
																																																																																																																																																																									_1: {
																																																																																																																																																																										ctor: '::',
																																																																																																																																																																										_0: {ctor: '_Tuple2', _0: 'PA', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$paFlag},
																																																																																																																																																																										_1: {
																																																																																																																																																																											ctor: '::',
																																																																																																																																																																											_0: {ctor: '_Tuple2', _0: 'PE', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$peFlag},
																																																																																																																																																																											_1: {
																																																																																																																																																																												ctor: '::',
																																																																																																																																																																												_0: {ctor: '_Tuple2', _0: 'PF', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$pfFlag},
																																																																																																																																																																												_1: {
																																																																																																																																																																													ctor: '::',
																																																																																																																																																																													_0: {ctor: '_Tuple2', _0: 'PG', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$pgFlag},
																																																																																																																																																																													_1: {
																																																																																																																																																																														ctor: '::',
																																																																																																																																																																														_0: {ctor: '_Tuple2', _0: 'PH', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$phFlag},
																																																																																																																																																																														_1: {
																																																																																																																																																																															ctor: '::',
																																																																																																																																																																															_0: {ctor: '_Tuple2', _0: 'PK', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$pkFlag},
																																																																																																																																																																															_1: {
																																																																																																																																																																																ctor: '::',
																																																																																																																																																																																_0: {ctor: '_Tuple2', _0: 'PL', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$plFlag},
																																																																																																																																																																																_1: {
																																																																																																																																																																																	ctor: '::',
																																																																																																																																																																																	_0: {ctor: '_Tuple2', _0: 'PM', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$pmFlag},
																																																																																																																																																																																	_1: {
																																																																																																																																																																																		ctor: '::',
																																																																																																																																																																																		_0: {ctor: '_Tuple2', _0: 'PR', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$prFlag},
																																																																																																																																																																																		_1: {
																																																																																																																																																																																			ctor: '::',
																																																																																																																																																																																			_0: {ctor: '_Tuple2', _0: 'PS', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$psFlag},
																																																																																																																																																																																			_1: {
																																																																																																																																																																																				ctor: '::',
																																																																																																																																																																																				_0: {ctor: '_Tuple2', _0: 'PT', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$ptFlag},
																																																																																																																																																																																				_1: {
																																																																																																																																																																																					ctor: '::',
																																																																																																																																																																																					_0: {ctor: '_Tuple2', _0: 'PW', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$pwFlag},
																																																																																																																																																																																					_1: {
																																																																																																																																																																																						ctor: '::',
																																																																																																																																																																																						_0: {ctor: '_Tuple2', _0: 'PY', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$pyFlag},
																																																																																																																																																																																						_1: {
																																																																																																																																																																																							ctor: '::',
																																																																																																																																																																																							_0: {ctor: '_Tuple2', _0: 'QA', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$qaFlag},
																																																																																																																																																																																							_1: {
																																																																																																																																																																																								ctor: '::',
																																																																																																																																																																																								_0: {ctor: '_Tuple2', _0: 'RE', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$reFlag},
																																																																																																																																																																																								_1: {
																																																																																																																																																																																									ctor: '::',
																																																																																																																																																																																									_0: {ctor: '_Tuple2', _0: 'RO', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$roFlag},
																																																																																																																																																																																									_1: {
																																																																																																																																																																																										ctor: '::',
																																																																																																																																																																																										_0: {ctor: '_Tuple2', _0: 'RS', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$rsFlag},
																																																																																																																																																																																										_1: {
																																																																																																																																																																																											ctor: '::',
																																																																																																																																																																																											_0: {ctor: '_Tuple2', _0: 'RU', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$ruFlag},
																																																																																																																																																																																											_1: {
																																																																																																																																																																																												ctor: '::',
																																																																																																																																																																																												_0: {ctor: '_Tuple2', _0: 'RW', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$rwFlag},
																																																																																																																																																																																												_1: {
																																																																																																																																																																																													ctor: '::',
																																																																																																																																																																																													_0: {ctor: '_Tuple2', _0: 'SA', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$saFlag},
																																																																																																																																																																																													_1: {
																																																																																																																																																																																														ctor: '::',
																																																																																																																																																																																														_0: {ctor: '_Tuple2', _0: 'SB', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$sbFlag},
																																																																																																																																																																																														_1: {
																																																																																																																																																																																															ctor: '::',
																																																																																																																																																																																															_0: {ctor: '_Tuple2', _0: 'SC', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$scFlag},
																																																																																																																																																																																															_1: {
																																																																																																																																																																																																ctor: '::',
																																																																																																																																																																																																_0: {ctor: '_Tuple2', _0: 'SD', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$sdFlag},
																																																																																																																																																																																																_1: {
																																																																																																																																																																																																	ctor: '::',
																																																																																																																																																																																																	_0: {ctor: '_Tuple2', _0: 'SE', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$seFlag},
																																																																																																																																																																																																	_1: {
																																																																																																																																																																																																		ctor: '::',
																																																																																																																																																																																																		_0: {ctor: '_Tuple2', _0: 'SG', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$sgFlag},
																																																																																																																																																																																																		_1: {
																																																																																																																																																																																																			ctor: '::',
																																																																																																																																																																																																			_0: {ctor: '_Tuple2', _0: 'SH', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$shFlag},
																																																																																																																																																																																																			_1: {
																																																																																																																																																																																																				ctor: '::',
																																																																																																																																																																																																				_0: {ctor: '_Tuple2', _0: 'SI', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$siFlag},
																																																																																																																																																																																																				_1: {
																																																																																																																																																																																																					ctor: '::',
																																																																																																																																																																																																					_0: {ctor: '_Tuple2', _0: 'SJ', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$sjFlag},
																																																																																																																																																																																																					_1: {
																																																																																																																																																																																																						ctor: '::',
																																																																																																																																																																																																						_0: {ctor: '_Tuple2', _0: 'SK', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$skFlag},
																																																																																																																																																																																																						_1: {
																																																																																																																																																																																																							ctor: '::',
																																																																																																																																																																																																							_0: {ctor: '_Tuple2', _0: 'SL', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$slFlag},
																																																																																																																																																																																																							_1: {
																																																																																																																																																																																																								ctor: '::',
																																																																																																																																																																																																								_0: {ctor: '_Tuple2', _0: 'SM', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$smFlag},
																																																																																																																																																																																																								_1: {
																																																																																																																																																																																																									ctor: '::',
																																																																																																																																																																																																									_0: {ctor: '_Tuple2', _0: 'SN', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$snFlag},
																																																																																																																																																																																																									_1: {
																																																																																																																																																																																																										ctor: '::',
																																																																																																																																																																																																										_0: {ctor: '_Tuple2', _0: 'SO', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$soFlag},
																																																																																																																																																																																																										_1: {
																																																																																																																																																																																																											ctor: '::',
																																																																																																																																																																																																											_0: {ctor: '_Tuple2', _0: 'SR', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$srFlag},
																																																																																																																																																																																																											_1: {
																																																																																																																																																																																																												ctor: '::',
																																																																																																																																																																																																												_0: {ctor: '_Tuple2', _0: 'SS', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$ssFlag},
																																																																																																																																																																																																												_1: {
																																																																																																																																																																																																													ctor: '::',
																																																																																																																																																																																																													_0: {ctor: '_Tuple2', _0: 'ST', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$stFlag},
																																																																																																																																																																																																													_1: {
																																																																																																																																																																																																														ctor: '::',
																																																																																																																																																																																																														_0: {ctor: '_Tuple2', _0: 'SV', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$svFlag},
																																																																																																																																																																																																														_1: {
																																																																																																																																																																																																															ctor: '::',
																																																																																																																																																																																																															_0: {ctor: '_Tuple2', _0: 'SX', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$sxFlag},
																																																																																																																																																																																																															_1: {
																																																																																																																																																																																																																ctor: '::',
																																																																																																																																																																																																																_0: {ctor: '_Tuple2', _0: 'SY', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$syFlag},
																																																																																																																																																																																																																_1: {
																																																																																																																																																																																																																	ctor: '::',
																																																																																																																																																																																																																	_0: {ctor: '_Tuple2', _0: 'SZ', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$szFlag},
																																																																																																																																																																																																																	_1: {
																																																																																																																																																																																																																		ctor: '::',
																																																																																																																																																																																																																		_0: {ctor: '_Tuple2', _0: 'TC', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$tcFlag},
																																																																																																																																																																																																																		_1: {
																																																																																																																																																																																																																			ctor: '::',
																																																																																																																																																																																																																			_0: {ctor: '_Tuple2', _0: 'TD', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$tdFlag},
																																																																																																																																																																																																																			_1: {
																																																																																																																																																																																																																				ctor: '::',
																																																																																																																																																																																																																				_0: {ctor: '_Tuple2', _0: 'TG', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$tgFlag},
																																																																																																																																																																																																																				_1: {
																																																																																																																																																																																																																					ctor: '::',
																																																																																																																																																																																																																					_0: {ctor: '_Tuple2', _0: 'TH', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$thFlag},
																																																																																																																																																																																																																					_1: {
																																																																																																																																																																																																																						ctor: '::',
																																																																																																																																																																																																																						_0: {ctor: '_Tuple2', _0: 'TJ', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$tjFlag},
																																																																																																																																																																																																																						_1: {
																																																																																																																																																																																																																							ctor: '::',
																																																																																																																																																																																																																							_0: {ctor: '_Tuple2', _0: 'TK', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$tkFlag},
																																																																																																																																																																																																																							_1: {
																																																																																																																																																																																																																								ctor: '::',
																																																																																																																																																																																																																								_0: {ctor: '_Tuple2', _0: 'TL', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$tlFlag},
																																																																																																																																																																																																																								_1: {
																																																																																																																																																																																																																									ctor: '::',
																																																																																																																																																																																																																									_0: {ctor: '_Tuple2', _0: 'TM', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$tmFlag},
																																																																																																																																																																																																																									_1: {
																																																																																																																																																																																																																										ctor: '::',
																																																																																																																																																																																																																										_0: {ctor: '_Tuple2', _0: 'TN', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$tnFlag},
																																																																																																																																																																																																																										_1: {
																																																																																																																																																																																																																											ctor: '::',
																																																																																																																																																																																																																											_0: {ctor: '_Tuple2', _0: 'TO', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$toFlag},
																																																																																																																																																																																																																											_1: {
																																																																																																																																																																																																																												ctor: '::',
																																																																																																																																																																																																																												_0: {ctor: '_Tuple2', _0: 'TR', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$trFlag},
																																																																																																																																																																																																																												_1: {
																																																																																																																																																																																																																													ctor: '::',
																																																																																																																																																																																																																													_0: {ctor: '_Tuple2', _0: 'TT', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$ttFlag},
																																																																																																																																																																																																																													_1: {
																																																																																																																																																																																																																														ctor: '::',
																																																																																																																																																																																																																														_0: {ctor: '_Tuple2', _0: 'TV', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$tvFlag},
																																																																																																																																																																																																																														_1: {
																																																																																																																																																																																																																															ctor: '::',
																																																																																																																																																																																																																															_0: {ctor: '_Tuple2', _0: 'TW', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$twFlag},
																																																																																																																																																																																																																															_1: {
																																																																																																																																																																																																																																ctor: '::',
																																																																																																																																																																																																																																_0: {ctor: '_Tuple2', _0: 'TZ', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$tzFlag},
																																																																																																																																																																																																																																_1: {
																																																																																																																																																																																																																																	ctor: '::',
																																																																																																																																																																																																																																	_0: {ctor: '_Tuple2', _0: 'UA', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$uaFlag},
																																																																																																																																																																																																																																	_1: {
																																																																																																																																																																																																																																		ctor: '::',
																																																																																																																																																																																																																																		_0: {ctor: '_Tuple2', _0: 'UG', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$ugFlag},
																																																																																																																																																																																																																																		_1: {
																																																																																																																																																																																																																																			ctor: '::',
																																																																																																																																																																																																																																			_0: {ctor: '_Tuple2', _0: 'US', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$usFlag},
																																																																																																																																																																																																																																			_1: {
																																																																																																																																																																																																																																				ctor: '::',
																																																																																																																																																																																																																																				_0: {ctor: '_Tuple2', _0: 'UY', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$uyFlag},
																																																																																																																																																																																																																																				_1: {
																																																																																																																																																																																																																																					ctor: '::',
																																																																																																																																																																																																																																					_0: {ctor: '_Tuple2', _0: 'UZ', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$uzFlag},
																																																																																																																																																																																																																																					_1: {
																																																																																																																																																																																																																																						ctor: '::',
																																																																																																																																																																																																																																						_0: {ctor: '_Tuple2', _0: 'VA', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$vaFlag},
																																																																																																																																																																																																																																						_1: {
																																																																																																																																																																																																																																							ctor: '::',
																																																																																																																																																																																																																																							_0: {ctor: '_Tuple2', _0: 'VC', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$vcFlag},
																																																																																																																																																																																																																																							_1: {
																																																																																																																																																																																																																																								ctor: '::',
																																																																																																																																																																																																																																								_0: {ctor: '_Tuple2', _0: 'VE', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$veFlag},
																																																																																																																																																																																																																																								_1: {
																																																																																																																																																																																																																																									ctor: '::',
																																																																																																																																																																																																																																									_0: {ctor: '_Tuple2', _0: 'VG', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$vgFlag},
																																																																																																																																																																																																																																									_1: {
																																																																																																																																																																																																																																										ctor: '::',
																																																																																																																																																																																																																																										_0: {ctor: '_Tuple2', _0: 'VI', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$viFlag},
																																																																																																																																																																																																																																										_1: {
																																																																																																																																																																																																																																											ctor: '::',
																																																																																																																																																																																																																																											_0: {ctor: '_Tuple2', _0: 'VN', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$vnFlag},
																																																																																																																																																																																																																																											_1: {
																																																																																																																																																																																																																																												ctor: '::',
																																																																																																																																																																																																																																												_0: {ctor: '_Tuple2', _0: 'VU', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$vuFlag},
																																																																																																																																																																																																																																												_1: {
																																																																																																																																																																																																																																													ctor: '::',
																																																																																																																																																																																																																																													_0: {ctor: '_Tuple2', _0: 'WF', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$wfFlag},
																																																																																																																																																																																																																																													_1: {
																																																																																																																																																																																																																																														ctor: '::',
																																																																																																																																																																																																																																														_0: {ctor: '_Tuple2', _0: 'WS', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$wsFlag},
																																																																																																																																																																																																																																														_1: {
																																																																																																																																																																																																																																															ctor: '::',
																																																																																																																																																																																																																																															_0: {ctor: '_Tuple2', _0: 'XK', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$xkFlag},
																																																																																																																																																																																																																																															_1: {
																																																																																																																																																																																																																																																ctor: '::',
																																																																																																																																																																																																																																																_0: {ctor: '_Tuple2', _0: 'YE', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$yeFlag},
																																																																																																																																																																																																																																																_1: {
																																																																																																																																																																																																																																																	ctor: '::',
																																																																																																																																																																																																																																																	_0: {ctor: '_Tuple2', _0: 'YT', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$ytFlag},
																																																																																																																																																																																																																																																	_1: {
																																																																																																																																																																																																																																																		ctor: '::',
																																																																																																																																																																																																																																																		_0: {ctor: '_Tuple2', _0: 'ZA', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$zaFlag},
																																																																																																																																																																																																																																																		_1: {
																																																																																																																																																																																																																																																			ctor: '::',
																																																																																																																																																																																																																																																			_0: {ctor: '_Tuple2', _0: 'ZM', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$zmFlag},
																																																																																																																																																																																																																																																			_1: {
																																																																																																																																																																																																																																																				ctor: '::',
																																																																																																																																																																																																																																																				_0: {ctor: '_Tuple2', _0: 'ZW', _1: _abadi199$intl_phone_input$IntlPhoneInput_Flags$zwFlag},
																																																																																																																																																																																																																																																				_1: {ctor: '[]'}
																																																																																																																																																																																																																																																			}
																																																																																																																																																																																																																																																		}
																																																																																																																																																																																																																																																	}
																																																																																																																																																																																																																																																}
																																																																																																																																																																																																																																															}
																																																																																																																																																																																																																																														}
																																																																																																																																																																																																																																													}
																																																																																																																																																																																																																																												}
																																																																																																																																																																																																																																											}
																																																																																																																																																																																																																																										}
																																																																																																																																																																																																																																									}
																																																																																																																																																																																																																																								}
																																																																																																																																																																																																																																							}
																																																																																																																																																																																																																																						}
																																																																																																																																																																																																																																					}
																																																																																																																																																																																																																																				}
																																																																																																																																																																																																																																			}
																																																																																																																																																																																																																																		}
																																																																																																																																																																																																																																	}
																																																																																																																																																																																																																																}
																																																																																																																																																																																																																															}
																																																																																																																																																																																																																														}
																																																																																																																																																																																																																													}
																																																																																																																																																																																																																												}
																																																																																																																																																																																																																											}
																																																																																																																																																																																																																										}
																																																																																																																																																																																																																									}
																																																																																																																																																																																																																								}
																																																																																																																																																																																																																							}
																																																																																																																																																																																																																						}
																																																																																																																																																																																																																					}
																																																																																																																																																																																																																				}
																																																																																																																																																																																																																			}
																																																																																																																																																																																																																		}
																																																																																																																																																																																																																	}
																																																																																																																																																																																																																}
																																																																																																																																																																																																															}
																																																																																																																																																																																																														}
																																																																																																																																																																																																													}
																																																																																																																																																																																																												}
																																																																																																																																																																																																											}
																																																																																																																																																																																																										}
																																																																																																																																																																																																									}
																																																																																																																																																																																																								}
																																																																																																																																																																																																							}
																																																																																																																																																																																																						}
																																																																																																																																																																																																					}
																																																																																																																																																																																																				}
																																																																																																																																																																																																			}
																																																																																																																																																																																																		}
																																																																																																																																																																																																	}
																																																																																																																																																																																																}
																																																																																																																																																																																															}
																																																																																																																																																																																														}
																																																																																																																																																																																													}
																																																																																																																																																																																												}
																																																																																																																																																																																											}
																																																																																																																																																																																										}
																																																																																																																																																																																									}
																																																																																																																																																																																								}
																																																																																																																																																																																							}
																																																																																																																																																																																						}
																																																																																																																																																																																					}
																																																																																																																																																																																				}
																																																																																																																																																																																			}
																																																																																																																																																																																		}
																																																																																																																																																																																	}
																																																																																																																																																																																}
																																																																																																																																																																															}
																																																																																																																																																																														}
																																																																																																																																																																													}
																																																																																																																																																																												}
																																																																																																																																																																											}
																																																																																																																																																																										}
																																																																																																																																																																									}
																																																																																																																																																																								}
																																																																																																																																																																							}
																																																																																																																																																																						}
																																																																																																																																																																					}
																																																																																																																																																																				}
																																																																																																																																																																			}
																																																																																																																																																																		}
																																																																																																																																																																	}
																																																																																																																																																																}
																																																																																																																																																															}
																																																																																																																																																														}
																																																																																																																																																													}
																																																																																																																																																												}
																																																																																																																																																											}
																																																																																																																																																										}
																																																																																																																																																									}
																																																																																																																																																								}
																																																																																																																																																							}
																																																																																																																																																						}
																																																																																																																																																					}
																																																																																																																																																				}
																																																																																																																																																			}
																																																																																																																																																		}
																																																																																																																																																	}
																																																																																																																																																}
																																																																																																																																															}
																																																																																																																																														}
																																																																																																																																													}
																																																																																																																																												}
																																																																																																																																											}
																																																																																																																																										}
																																																																																																																																									}
																																																																																																																																								}
																																																																																																																																							}
																																																																																																																																						}
																																																																																																																																					}
																																																																																																																																				}
																																																																																																																																			}
																																																																																																																																		}
																																																																																																																																	}
																																																																																																																																}
																																																																																																																															}
																																																																																																																														}
																																																																																																																													}
																																																																																																																												}
																																																																																																																											}
																																																																																																																										}
																																																																																																																									}
																																																																																																																								}
																																																																																																																							}
																																																																																																																						}
																																																																																																																					}
																																																																																																																				}
																																																																																																																			}
																																																																																																																		}
																																																																																																																	}
																																																																																																																}
																																																																																																															}
																																																																																																														}
																																																																																																													}
																																																																																																												}
																																																																																																											}
																																																																																																										}
																																																																																																									}
																																																																																																								}
																																																																																																							}
																																																																																																						}
																																																																																																					}
																																																																																																				}
																																																																																																			}
																																																																																																		}
																																																																																																	}
																																																																																																}
																																																																																															}
																																																																																														}
																																																																																													}
																																																																																												}
																																																																																											}
																																																																																										}
																																																																																									}
																																																																																								}
																																																																																							}
																																																																																						}
																																																																																					}
																																																																																				}
																																																																																			}
																																																																																		}
																																																																																	}
																																																																																}
																																																																															}
																																																																														}
																																																																													}
																																																																												}
																																																																											}
																																																																										}
																																																																									}
																																																																								}
																																																																							}
																																																																						}
																																																																					}
																																																																				}
																																																																			}
																																																																		}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag = function (isoCode) {
	return A2(
		_elm_lang$core$Maybe$withDefault,
		_abadi199$intl_phone_input$IntlPhoneInput_Flags$unknownFlag,
		A2(_elm_lang$core$Dict$get, isoCode, _abadi199$intl_phone_input$IntlPhoneInput_Svg$flags));
};
var _abadi199$intl_phone_input$IntlPhoneInput_Svg$arrow = function () {
	var rotation = '90';
	return A2(
		_elm_lang$svg$Svg$svg,
		{
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('100%'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$height('100%'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 20 20'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$style(
							A2(
								_elm_lang$core$Basics_ops['++'],
								'transform: rotate(',
								A2(_elm_lang$core$Basics_ops['++'], rotation, 'deg);'))),
						_1: {ctor: '[]'}
					}
				}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$polygon,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$points('0 0, 0 20, 16 10'),
					_1: {ctor: '[]'}
				},
				{ctor: '[]'}),
			_1: {ctor: '[]'}
		});
}();

var _abadi199$intl_phone_input$IntlPhoneInput_Type$emptyPhoneNumber = {isoCode: '', phoneNumber: ''};
var _abadi199$intl_phone_input$IntlPhoneInput_Type$PhoneNumber = F2(
	function (a, b) {
		return {isoCode: a, phoneNumber: b};
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Type$CountryData = F3(
	function (a, b, c) {
		return {name: a, dialCode: b, flag: c};
	});

var _abadi199$intl_phone_input$IntlPhoneInput_Config$isoCodes = {
	ctor: '::',
	_0: 'AF',
	_1: {
		ctor: '::',
		_0: 'AL',
		_1: {
			ctor: '::',
			_0: 'DZ',
			_1: {
				ctor: '::',
				_0: 'AS',
				_1: {
					ctor: '::',
					_0: 'AD',
					_1: {
						ctor: '::',
						_0: 'AO',
						_1: {
							ctor: '::',
							_0: 'AI',
							_1: {
								ctor: '::',
								_0: 'AG',
								_1: {
									ctor: '::',
									_0: 'AR',
									_1: {
										ctor: '::',
										_0: 'AM',
										_1: {
											ctor: '::',
											_0: 'AW',
											_1: {
												ctor: '::',
												_0: 'AU',
												_1: {
													ctor: '::',
													_0: 'AT',
													_1: {
														ctor: '::',
														_0: 'AZ',
														_1: {
															ctor: '::',
															_0: 'BS',
															_1: {
																ctor: '::',
																_0: 'BH',
																_1: {
																	ctor: '::',
																	_0: 'BD',
																	_1: {
																		ctor: '::',
																		_0: 'BB',
																		_1: {
																			ctor: '::',
																			_0: 'BY',
																			_1: {
																				ctor: '::',
																				_0: 'BE',
																				_1: {
																					ctor: '::',
																					_0: 'BZ',
																					_1: {
																						ctor: '::',
																						_0: 'BJ',
																						_1: {
																							ctor: '::',
																							_0: 'BM',
																							_1: {
																								ctor: '::',
																								_0: 'BT',
																								_1: {
																									ctor: '::',
																									_0: 'BO',
																									_1: {
																										ctor: '::',
																										_0: 'BA',
																										_1: {
																											ctor: '::',
																											_0: 'BW',
																											_1: {
																												ctor: '::',
																												_0: 'BR',
																												_1: {
																													ctor: '::',
																													_0: 'IO',
																													_1: {
																														ctor: '::',
																														_0: 'VG',
																														_1: {
																															ctor: '::',
																															_0: 'BN',
																															_1: {
																																ctor: '::',
																																_0: 'BG',
																																_1: {
																																	ctor: '::',
																																	_0: 'BF',
																																	_1: {
																																		ctor: '::',
																																		_0: 'BI',
																																		_1: {
																																			ctor: '::',
																																			_0: 'KH',
																																			_1: {
																																				ctor: '::',
																																				_0: 'CM',
																																				_1: {
																																					ctor: '::',
																																					_0: 'CA',
																																					_1: {
																																						ctor: '::',
																																						_0: 'CV',
																																						_1: {
																																							ctor: '::',
																																							_0: 'BQ',
																																							_1: {
																																								ctor: '::',
																																								_0: 'KY',
																																								_1: {
																																									ctor: '::',
																																									_0: 'CF',
																																									_1: {
																																										ctor: '::',
																																										_0: 'TD',
																																										_1: {
																																											ctor: '::',
																																											_0: 'CL',
																																											_1: {
																																												ctor: '::',
																																												_0: 'CN',
																																												_1: {
																																													ctor: '::',
																																													_0: 'CX',
																																													_1: {
																																														ctor: '::',
																																														_0: 'CC',
																																														_1: {
																																															ctor: '::',
																																															_0: 'CO',
																																															_1: {
																																																ctor: '::',
																																																_0: 'KM',
																																																_1: {
																																																	ctor: '::',
																																																	_0: 'CD',
																																																	_1: {
																																																		ctor: '::',
																																																		_0: 'CG',
																																																		_1: {
																																																			ctor: '::',
																																																			_0: 'CK',
																																																			_1: {
																																																				ctor: '::',
																																																				_0: 'CR',
																																																				_1: {
																																																					ctor: '::',
																																																					_0: 'CI',
																																																					_1: {
																																																						ctor: '::',
																																																						_0: 'HR',
																																																						_1: {
																																																							ctor: '::',
																																																							_0: 'CU',
																																																							_1: {
																																																								ctor: '::',
																																																								_0: 'CW',
																																																								_1: {
																																																									ctor: '::',
																																																									_0: 'CY',
																																																									_1: {
																																																										ctor: '::',
																																																										_0: 'CZ',
																																																										_1: {
																																																											ctor: '::',
																																																											_0: 'DK',
																																																											_1: {
																																																												ctor: '::',
																																																												_0: 'DJ',
																																																												_1: {
																																																													ctor: '::',
																																																													_0: 'DM',
																																																													_1: {
																																																														ctor: '::',
																																																														_0: 'DO',
																																																														_1: {
																																																															ctor: '::',
																																																															_0: 'EC',
																																																															_1: {
																																																																ctor: '::',
																																																																_0: 'EG',
																																																																_1: {
																																																																	ctor: '::',
																																																																	_0: 'SV',
																																																																	_1: {
																																																																		ctor: '::',
																																																																		_0: 'GQ',
																																																																		_1: {
																																																																			ctor: '::',
																																																																			_0: 'ER',
																																																																			_1: {
																																																																				ctor: '::',
																																																																				_0: 'EE',
																																																																				_1: {
																																																																					ctor: '::',
																																																																					_0: 'ET',
																																																																					_1: {
																																																																						ctor: '::',
																																																																						_0: 'FK',
																																																																						_1: {
																																																																							ctor: '::',
																																																																							_0: 'FO',
																																																																							_1: {
																																																																								ctor: '::',
																																																																								_0: 'FJ',
																																																																								_1: {
																																																																									ctor: '::',
																																																																									_0: 'FI',
																																																																									_1: {
																																																																										ctor: '::',
																																																																										_0: 'FR',
																																																																										_1: {
																																																																											ctor: '::',
																																																																											_0: 'GF',
																																																																											_1: {
																																																																												ctor: '::',
																																																																												_0: 'PF',
																																																																												_1: {
																																																																													ctor: '::',
																																																																													_0: 'GA',
																																																																													_1: {
																																																																														ctor: '::',
																																																																														_0: 'GM',
																																																																														_1: {
																																																																															ctor: '::',
																																																																															_0: 'GE',
																																																																															_1: {
																																																																																ctor: '::',
																																																																																_0: 'DE',
																																																																																_1: {
																																																																																	ctor: '::',
																																																																																	_0: 'GH',
																																																																																	_1: {
																																																																																		ctor: '::',
																																																																																		_0: 'GI',
																																																																																		_1: {
																																																																																			ctor: '::',
																																																																																			_0: 'GR',
																																																																																			_1: {
																																																																																				ctor: '::',
																																																																																				_0: 'GL',
																																																																																				_1: {
																																																																																					ctor: '::',
																																																																																					_0: 'GD',
																																																																																					_1: {
																																																																																						ctor: '::',
																																																																																						_0: 'GP',
																																																																																						_1: {
																																																																																							ctor: '::',
																																																																																							_0: 'GU',
																																																																																							_1: {
																																																																																								ctor: '::',
																																																																																								_0: 'GT',
																																																																																								_1: {
																																																																																									ctor: '::',
																																																																																									_0: 'GG',
																																																																																									_1: {
																																																																																										ctor: '::',
																																																																																										_0: 'GN',
																																																																																										_1: {
																																																																																											ctor: '::',
																																																																																											_0: 'GW',
																																																																																											_1: {
																																																																																												ctor: '::',
																																																																																												_0: 'GY',
																																																																																												_1: {
																																																																																													ctor: '::',
																																																																																													_0: 'HT',
																																																																																													_1: {
																																																																																														ctor: '::',
																																																																																														_0: 'HN',
																																																																																														_1: {
																																																																																															ctor: '::',
																																																																																															_0: 'HK',
																																																																																															_1: {
																																																																																																ctor: '::',
																																																																																																_0: 'HU',
																																																																																																_1: {
																																																																																																	ctor: '::',
																																																																																																	_0: 'IS',
																																																																																																	_1: {
																																																																																																		ctor: '::',
																																																																																																		_0: 'IN',
																																																																																																		_1: {
																																																																																																			ctor: '::',
																																																																																																			_0: 'ID',
																																																																																																			_1: {
																																																																																																				ctor: '::',
																																																																																																				_0: 'IR',
																																																																																																				_1: {
																																																																																																					ctor: '::',
																																																																																																					_0: 'IQ',
																																																																																																					_1: {
																																																																																																						ctor: '::',
																																																																																																						_0: 'IE',
																																																																																																						_1: {
																																																																																																							ctor: '::',
																																																																																																							_0: 'IM',
																																																																																																							_1: {
																																																																																																								ctor: '::',
																																																																																																								_0: 'IL',
																																																																																																								_1: {
																																																																																																									ctor: '::',
																																																																																																									_0: 'IT',
																																																																																																									_1: {
																																																																																																										ctor: '::',
																																																																																																										_0: 'JM',
																																																																																																										_1: {
																																																																																																											ctor: '::',
																																																																																																											_0: 'JP',
																																																																																																											_1: {
																																																																																																												ctor: '::',
																																																																																																												_0: 'JE',
																																																																																																												_1: {
																																																																																																													ctor: '::',
																																																																																																													_0: 'JO',
																																																																																																													_1: {
																																																																																																														ctor: '::',
																																																																																																														_0: 'KZ',
																																																																																																														_1: {
																																																																																																															ctor: '::',
																																																																																																															_0: 'KE',
																																																																																																															_1: {
																																																																																																																ctor: '::',
																																																																																																																_0: 'KI',
																																																																																																																_1: {
																																																																																																																	ctor: '::',
																																																																																																																	_0: 'XK',
																																																																																																																	_1: {
																																																																																																																		ctor: '::',
																																																																																																																		_0: 'KW',
																																																																																																																		_1: {
																																																																																																																			ctor: '::',
																																																																																																																			_0: 'KG',
																																																																																																																			_1: {
																																																																																																																				ctor: '::',
																																																																																																																				_0: 'LA',
																																																																																																																				_1: {
																																																																																																																					ctor: '::',
																																																																																																																					_0: 'LV',
																																																																																																																					_1: {
																																																																																																																						ctor: '::',
																																																																																																																						_0: 'LB',
																																																																																																																						_1: {
																																																																																																																							ctor: '::',
																																																																																																																							_0: 'LS',
																																																																																																																							_1: {
																																																																																																																								ctor: '::',
																																																																																																																								_0: 'LR',
																																																																																																																								_1: {
																																																																																																																									ctor: '::',
																																																																																																																									_0: 'LY',
																																																																																																																									_1: {
																																																																																																																										ctor: '::',
																																																																																																																										_0: 'LI',
																																																																																																																										_1: {
																																																																																																																											ctor: '::',
																																																																																																																											_0: 'LT',
																																																																																																																											_1: {
																																																																																																																												ctor: '::',
																																																																																																																												_0: 'LU',
																																																																																																																												_1: {
																																																																																																																													ctor: '::',
																																																																																																																													_0: 'MO',
																																																																																																																													_1: {
																																																																																																																														ctor: '::',
																																																																																																																														_0: 'MK',
																																																																																																																														_1: {
																																																																																																																															ctor: '::',
																																																																																																																															_0: 'MG',
																																																																																																																															_1: {
																																																																																																																																ctor: '::',
																																																																																																																																_0: 'MW',
																																																																																																																																_1: {
																																																																																																																																	ctor: '::',
																																																																																																																																	_0: 'MY',
																																																																																																																																	_1: {
																																																																																																																																		ctor: '::',
																																																																																																																																		_0: 'MV',
																																																																																																																																		_1: {
																																																																																																																																			ctor: '::',
																																																																																																																																			_0: 'ML',
																																																																																																																																			_1: {
																																																																																																																																				ctor: '::',
																																																																																																																																				_0: 'MT',
																																																																																																																																				_1: {
																																																																																																																																					ctor: '::',
																																																																																																																																					_0: 'MH',
																																																																																																																																					_1: {
																																																																																																																																						ctor: '::',
																																																																																																																																						_0: 'MQ',
																																																																																																																																						_1: {
																																																																																																																																							ctor: '::',
																																																																																																																																							_0: 'MR',
																																																																																																																																							_1: {
																																																																																																																																								ctor: '::',
																																																																																																																																								_0: 'MU',
																																																																																																																																								_1: {
																																																																																																																																									ctor: '::',
																																																																																																																																									_0: 'YT',
																																																																																																																																									_1: {
																																																																																																																																										ctor: '::',
																																																																																																																																										_0: 'MX',
																																																																																																																																										_1: {
																																																																																																																																											ctor: '::',
																																																																																																																																											_0: 'FM',
																																																																																																																																											_1: {
																																																																																																																																												ctor: '::',
																																																																																																																																												_0: 'MD',
																																																																																																																																												_1: {
																																																																																																																																													ctor: '::',
																																																																																																																																													_0: 'MC',
																																																																																																																																													_1: {
																																																																																																																																														ctor: '::',
																																																																																																																																														_0: 'MN',
																																																																																																																																														_1: {
																																																																																																																																															ctor: '::',
																																																																																																																																															_0: 'ME',
																																																																																																																																															_1: {
																																																																																																																																																ctor: '::',
																																																																																																																																																_0: 'MS',
																																																																																																																																																_1: {
																																																																																																																																																	ctor: '::',
																																																																																																																																																	_0: 'MA',
																																																																																																																																																	_1: {
																																																																																																																																																		ctor: '::',
																																																																																																																																																		_0: 'MZ',
																																																																																																																																																		_1: {
																																																																																																																																																			ctor: '::',
																																																																																																																																																			_0: 'MM',
																																																																																																																																																			_1: {
																																																																																																																																																				ctor: '::',
																																																																																																																																																				_0: 'NA',
																																																																																																																																																				_1: {
																																																																																																																																																					ctor: '::',
																																																																																																																																																					_0: 'NR',
																																																																																																																																																					_1: {
																																																																																																																																																						ctor: '::',
																																																																																																																																																						_0: 'NP',
																																																																																																																																																						_1: {
																																																																																																																																																							ctor: '::',
																																																																																																																																																							_0: 'NL',
																																																																																																																																																							_1: {
																																																																																																																																																								ctor: '::',
																																																																																																																																																								_0: 'NC',
																																																																																																																																																								_1: {
																																																																																																																																																									ctor: '::',
																																																																																																																																																									_0: 'NZ',
																																																																																																																																																									_1: {
																																																																																																																																																										ctor: '::',
																																																																																																																																																										_0: 'NI',
																																																																																																																																																										_1: {
																																																																																																																																																											ctor: '::',
																																																																																																																																																											_0: 'NE',
																																																																																																																																																											_1: {
																																																																																																																																																												ctor: '::',
																																																																																																																																																												_0: 'NG',
																																																																																																																																																												_1: {
																																																																																																																																																													ctor: '::',
																																																																																																																																																													_0: 'NU',
																																																																																																																																																													_1: {
																																																																																																																																																														ctor: '::',
																																																																																																																																																														_0: 'NF',
																																																																																																																																																														_1: {
																																																																																																																																																															ctor: '::',
																																																																																																																																																															_0: 'KP',
																																																																																																																																																															_1: {
																																																																																																																																																																ctor: '::',
																																																																																																																																																																_0: 'MP',
																																																																																																																																																																_1: {
																																																																																																																																																																	ctor: '::',
																																																																																																																																																																	_0: 'NO',
																																																																																																																																																																	_1: {
																																																																																																																																																																		ctor: '::',
																																																																																																																																																																		_0: 'OM',
																																																																																																																																																																		_1: {
																																																																																																																																																																			ctor: '::',
																																																																																																																																																																			_0: 'PK',
																																																																																																																																																																			_1: {
																																																																																																																																																																				ctor: '::',
																																																																																																																																																																				_0: 'PW',
																																																																																																																																																																				_1: {
																																																																																																																																																																					ctor: '::',
																																																																																																																																																																					_0: 'PS',
																																																																																																																																																																					_1: {
																																																																																																																																																																						ctor: '::',
																																																																																																																																																																						_0: 'PA',
																																																																																																																																																																						_1: {
																																																																																																																																																																							ctor: '::',
																																																																																																																																																																							_0: 'PG',
																																																																																																																																																																							_1: {
																																																																																																																																																																								ctor: '::',
																																																																																																																																																																								_0: 'PY',
																																																																																																																																																																								_1: {
																																																																																																																																																																									ctor: '::',
																																																																																																																																																																									_0: 'PE',
																																																																																																																																																																									_1: {
																																																																																																																																																																										ctor: '::',
																																																																																																																																																																										_0: 'PH',
																																																																																																																																																																										_1: {
																																																																																																																																																																											ctor: '::',
																																																																																																																																																																											_0: 'PL',
																																																																																																																																																																											_1: {
																																																																																																																																																																												ctor: '::',
																																																																																																																																																																												_0: 'PT',
																																																																																																																																																																												_1: {
																																																																																																																																																																													ctor: '::',
																																																																																																																																																																													_0: 'PR',
																																																																																																																																																																													_1: {
																																																																																																																																																																														ctor: '::',
																																																																																																																																																																														_0: 'QA',
																																																																																																																																																																														_1: {
																																																																																																																																																																															ctor: '::',
																																																																																																																																																																															_0: 'RE',
																																																																																																																																																																															_1: {
																																																																																																																																																																																ctor: '::',
																																																																																																																																																																																_0: 'RO',
																																																																																																																																																																																_1: {
																																																																																																																																																																																	ctor: '::',
																																																																																																																																																																																	_0: 'RU',
																																																																																																																																																																																	_1: {
																																																																																																																																																																																		ctor: '::',
																																																																																																																																																																																		_0: 'RW',
																																																																																																																																																																																		_1: {
																																																																																																																																																																																			ctor: '::',
																																																																																																																																																																																			_0: 'BL',
																																																																																																																																																																																			_1: {
																																																																																																																																																																																				ctor: '::',
																																																																																																																																																																																				_0: 'SH',
																																																																																																																																																																																				_1: {
																																																																																																																																																																																					ctor: '::',
																																																																																																																																																																																					_0: 'KN',
																																																																																																																																																																																					_1: {
																																																																																																																																																																																						ctor: '::',
																																																																																																																																																																																						_0: 'LC',
																																																																																																																																																																																						_1: {
																																																																																																																																																																																							ctor: '::',
																																																																																																																																																																																							_0: 'MF',
																																																																																																																																																																																							_1: {
																																																																																																																																																																																								ctor: '::',
																																																																																																																																																																																								_0: 'PM',
																																																																																																																																																																																								_1: {
																																																																																																																																																																																									ctor: '::',
																																																																																																																																																																																									_0: 'VC',
																																																																																																																																																																																									_1: {
																																																																																																																																																																																										ctor: '::',
																																																																																																																																																																																										_0: 'WS',
																																																																																																																																																																																										_1: {
																																																																																																																																																																																											ctor: '::',
																																																																																																																																																																																											_0: 'SM',
																																																																																																																																																																																											_1: {
																																																																																																																																																																																												ctor: '::',
																																																																																																																																																																																												_0: 'ST',
																																																																																																																																																																																												_1: {
																																																																																																																																																																																													ctor: '::',
																																																																																																																																																																																													_0: 'SA',
																																																																																																																																																																																													_1: {
																																																																																																																																																																																														ctor: '::',
																																																																																																																																																																																														_0: 'SN',
																																																																																																																																																																																														_1: {
																																																																																																																																																																																															ctor: '::',
																																																																																																																																																																																															_0: 'RS',
																																																																																																																																																																																															_1: {
																																																																																																																																																																																																ctor: '::',
																																																																																																																																																																																																_0: 'SC',
																																																																																																																																																																																																_1: {
																																																																																																																																																																																																	ctor: '::',
																																																																																																																																																																																																	_0: 'SL',
																																																																																																																																																																																																	_1: {
																																																																																																																																																																																																		ctor: '::',
																																																																																																																																																																																																		_0: 'SG',
																																																																																																																																																																																																		_1: {
																																																																																																																																																																																																			ctor: '::',
																																																																																																																																																																																																			_0: 'SX',
																																																																																																																																																																																																			_1: {
																																																																																																																																																																																																				ctor: '::',
																																																																																																																																																																																																				_0: 'SK',
																																																																																																																																																																																																				_1: {
																																																																																																																																																																																																					ctor: '::',
																																																																																																																																																																																																					_0: 'SI',
																																																																																																																																																																																																					_1: {
																																																																																																																																																																																																						ctor: '::',
																																																																																																																																																																																																						_0: 'SB',
																																																																																																																																																																																																						_1: {
																																																																																																																																																																																																							ctor: '::',
																																																																																																																																																																																																							_0: 'SO',
																																																																																																																																																																																																							_1: {
																																																																																																																																																																																																								ctor: '::',
																																																																																																																																																																																																								_0: 'ZA',
																																																																																																																																																																																																								_1: {
																																																																																																																																																																																																									ctor: '::',
																																																																																																																																																																																																									_0: 'KR',
																																																																																																																																																																																																									_1: {
																																																																																																																																																																																																										ctor: '::',
																																																																																																																																																																																																										_0: 'SS',
																																																																																																																																																																																																										_1: {
																																																																																																																																																																																																											ctor: '::',
																																																																																																																																																																																																											_0: 'ES',
																																																																																																																																																																																																											_1: {
																																																																																																																																																																																																												ctor: '::',
																																																																																																																																																																																																												_0: 'LK',
																																																																																																																																																																																																												_1: {
																																																																																																																																																																																																													ctor: '::',
																																																																																																																																																																																																													_0: 'SD',
																																																																																																																																																																																																													_1: {
																																																																																																																																																																																																														ctor: '::',
																																																																																																																																																																																																														_0: 'SR',
																																																																																																																																																																																																														_1: {
																																																																																																																																																																																																															ctor: '::',
																																																																																																																																																																																																															_0: 'SJ',
																																																																																																																																																																																																															_1: {
																																																																																																																																																																																																																ctor: '::',
																																																																																																																																																																																																																_0: 'SZ',
																																																																																																																																																																																																																_1: {
																																																																																																																																																																																																																	ctor: '::',
																																																																																																																																																																																																																	_0: 'SE',
																																																																																																																																																																																																																	_1: {
																																																																																																																																																																																																																		ctor: '::',
																																																																																																																																																																																																																		_0: 'CH',
																																																																																																																																																																																																																		_1: {
																																																																																																																																																																																																																			ctor: '::',
																																																																																																																																																																																																																			_0: 'SY',
																																																																																																																																																																																																																			_1: {
																																																																																																																																																																																																																				ctor: '::',
																																																																																																																																																																																																																				_0: 'TW',
																																																																																																																																																																																																																				_1: {
																																																																																																																																																																																																																					ctor: '::',
																																																																																																																																																																																																																					_0: 'TJ',
																																																																																																																																																																																																																					_1: {
																																																																																																																																																																																																																						ctor: '::',
																																																																																																																																																																																																																						_0: 'TZ',
																																																																																																																																																																																																																						_1: {
																																																																																																																																																																																																																							ctor: '::',
																																																																																																																																																																																																																							_0: 'TH',
																																																																																																																																																																																																																							_1: {
																																																																																																																																																																																																																								ctor: '::',
																																																																																																																																																																																																																								_0: 'TL',
																																																																																																																																																																																																																								_1: {
																																																																																																																																																																																																																									ctor: '::',
																																																																																																																																																																																																																									_0: 'TG',
																																																																																																																																																																																																																									_1: {
																																																																																																																																																																																																																										ctor: '::',
																																																																																																																																																																																																																										_0: 'TK',
																																																																																																																																																																																																																										_1: {
																																																																																																																																																																																																																											ctor: '::',
																																																																																																																																																																																																																											_0: 'TO',
																																																																																																																																																																																																																											_1: {
																																																																																																																																																																																																																												ctor: '::',
																																																																																																																																																																																																																												_0: 'TT',
																																																																																																																																																																																																																												_1: {
																																																																																																																																																																																																																													ctor: '::',
																																																																																																																																																																																																																													_0: 'TN',
																																																																																																																																																																																																																													_1: {
																																																																																																																																																																																																																														ctor: '::',
																																																																																																																																																																																																																														_0: 'TR',
																																																																																																																																																																																																																														_1: {
																																																																																																																																																																																																																															ctor: '::',
																																																																																																																																																																																																																															_0: 'TM',
																																																																																																																																																																																																																															_1: {
																																																																																																																																																																																																																																ctor: '::',
																																																																																																																																																																																																																																_0: 'TC',
																																																																																																																																																																																																																																_1: {
																																																																																																																																																																																																																																	ctor: '::',
																																																																																																																																																																																																																																	_0: 'TV',
																																																																																																																																																																																																																																	_1: {
																																																																																																																																																																																																																																		ctor: '::',
																																																																																																																																																																																																																																		_0: 'VI',
																																																																																																																																																																																																																																		_1: {
																																																																																																																																																																																																																																			ctor: '::',
																																																																																																																																																																																																																																			_0: 'UG',
																																																																																																																																																																																																																																			_1: {
																																																																																																																																																																																																																																				ctor: '::',
																																																																																																																																																																																																																																				_0: 'UA',
																																																																																																																																																																																																																																				_1: {
																																																																																																																																																																																																																																					ctor: '::',
																																																																																																																																																																																																																																					_0: 'AE',
																																																																																																																																																																																																																																					_1: {
																																																																																																																																																																																																																																						ctor: '::',
																																																																																																																																																																																																																																						_0: 'GB',
																																																																																																																																																																																																																																						_1: {
																																																																																																																																																																																																																																							ctor: '::',
																																																																																																																																																																																																																																							_0: 'US',
																																																																																																																																																																																																																																							_1: {
																																																																																																																																																																																																																																								ctor: '::',
																																																																																																																																																																																																																																								_0: 'UY',
																																																																																																																																																																																																																																								_1: {
																																																																																																																																																																																																																																									ctor: '::',
																																																																																																																																																																																																																																									_0: 'UZ',
																																																																																																																																																																																																																																									_1: {
																																																																																																																																																																																																																																										ctor: '::',
																																																																																																																																																																																																																																										_0: 'VU',
																																																																																																																																																																																																																																										_1: {
																																																																																																																																																																																																																																											ctor: '::',
																																																																																																																																																																																																																																											_0: 'VA',
																																																																																																																																																																																																																																											_1: {
																																																																																																																																																																																																																																												ctor: '::',
																																																																																																																																																																																																																																												_0: 'VE',
																																																																																																																																																																																																																																												_1: {
																																																																																																																																																																																																																																													ctor: '::',
																																																																																																																																																																																																																																													_0: 'VN',
																																																																																																																																																																																																																																													_1: {
																																																																																																																																																																																																																																														ctor: '::',
																																																																																																																																																																																																																																														_0: 'WF',
																																																																																																																																																																																																																																														_1: {
																																																																																																																																																																																																																																															ctor: '::',
																																																																																																																																																																																																																																															_0: 'EH',
																																																																																																																																																																																																																																															_1: {
																																																																																																																																																																																																																																																ctor: '::',
																																																																																																																																																																																																																																																_0: 'YE',
																																																																																																																																																																																																																																																_1: {
																																																																																																																																																																																																																																																	ctor: '::',
																																																																																																																																																																																																																																																	_0: 'ZM',
																																																																																																																																																																																																																																																	_1: {
																																																																																																																																																																																																																																																		ctor: '::',
																																																																																																																																																																																																																																																		_0: 'ZW',
																																																																																																																																																																																																																																																		_1: {
																																																																																																																																																																																																																																																			ctor: '::',
																																																																																																																																																																																																																																																			_0: 'AX',
																																																																																																																																																																																																																																																			_1: {ctor: '[]'}
																																																																																																																																																																																																																																																		}
																																																																																																																																																																																																																																																	}
																																																																																																																																																																																																																																																}
																																																																																																																																																																																																																																															}
																																																																																																																																																																																																																																														}
																																																																																																																																																																																																																																													}
																																																																																																																																																																																																																																												}
																																																																																																																																																																																																																																											}
																																																																																																																																																																																																																																										}
																																																																																																																																																																																																																																									}
																																																																																																																																																																																																																																								}
																																																																																																																																																																																																																																							}
																																																																																																																																																																																																																																						}
																																																																																																																																																																																																																																					}
																																																																																																																																																																																																																																				}
																																																																																																																																																																																																																																			}
																																																																																																																																																																																																																																		}
																																																																																																																																																																																																																																	}
																																																																																																																																																																																																																																}
																																																																																																																																																																																																																															}
																																																																																																																																																																																																																														}
																																																																																																																																																																																																																													}
																																																																																																																																																																																																																												}
																																																																																																																																																																																																																											}
																																																																																																																																																																																																																										}
																																																																																																																																																																																																																									}
																																																																																																																																																																																																																								}
																																																																																																																																																																																																																							}
																																																																																																																																																																																																																						}
																																																																																																																																																																																																																					}
																																																																																																																																																																																																																				}
																																																																																																																																																																																																																			}
																																																																																																																																																																																																																		}
																																																																																																																																																																																																																	}
																																																																																																																																																																																																																}
																																																																																																																																																																																																															}
																																																																																																																																																																																																														}
																																																																																																																																																																																																													}
																																																																																																																																																																																																												}
																																																																																																																																																																																																											}
																																																																																																																																																																																																										}
																																																																																																																																																																																																									}
																																																																																																																																																																																																								}
																																																																																																																																																																																																							}
																																																																																																																																																																																																						}
																																																																																																																																																																																																					}
																																																																																																																																																																																																				}
																																																																																																																																																																																																			}
																																																																																																																																																																																																		}
																																																																																																																																																																																																	}
																																																																																																																																																																																																}
																																																																																																																																																																																															}
																																																																																																																																																																																														}
																																																																																																																																																																																													}
																																																																																																																																																																																												}
																																																																																																																																																																																											}
																																																																																																																																																																																										}
																																																																																																																																																																																									}
																																																																																																																																																																																								}
																																																																																																																																																																																							}
																																																																																																																																																																																						}
																																																																																																																																																																																					}
																																																																																																																																																																																				}
																																																																																																																																																																																			}
																																																																																																																																																																																		}
																																																																																																																																																																																	}
																																																																																																																																																																																}
																																																																																																																																																																															}
																																																																																																																																																																														}
																																																																																																																																																																													}
																																																																																																																																																																												}
																																																																																																																																																																											}
																																																																																																																																																																										}
																																																																																																																																																																									}
																																																																																																																																																																								}
																																																																																																																																																																							}
																																																																																																																																																																						}
																																																																																																																																																																					}
																																																																																																																																																																				}
																																																																																																																																																																			}
																																																																																																																																																																		}
																																																																																																																																																																	}
																																																																																																																																																																}
																																																																																																																																																															}
																																																																																																																																																														}
																																																																																																																																																													}
																																																																																																																																																												}
																																																																																																																																																											}
																																																																																																																																																										}
																																																																																																																																																									}
																																																																																																																																																								}
																																																																																																																																																							}
																																																																																																																																																						}
																																																																																																																																																					}
																																																																																																																																																				}
																																																																																																																																																			}
																																																																																																																																																		}
																																																																																																																																																	}
																																																																																																																																																}
																																																																																																																																															}
																																																																																																																																														}
																																																																																																																																													}
																																																																																																																																												}
																																																																																																																																											}
																																																																																																																																										}
																																																																																																																																									}
																																																																																																																																								}
																																																																																																																																							}
																																																																																																																																						}
																																																																																																																																					}
																																																																																																																																				}
																																																																																																																																			}
																																																																																																																																		}
																																																																																																																																	}
																																																																																																																																}
																																																																																																																															}
																																																																																																																														}
																																																																																																																													}
																																																																																																																												}
																																																																																																																											}
																																																																																																																										}
																																																																																																																									}
																																																																																																																								}
																																																																																																																							}
																																																																																																																						}
																																																																																																																					}
																																																																																																																				}
																																																																																																																			}
																																																																																																																		}
																																																																																																																	}
																																																																																																																}
																																																																																																															}
																																																																																																														}
																																																																																																													}
																																																																																																												}
																																																																																																											}
																																																																																																										}
																																																																																																									}
																																																																																																								}
																																																																																																							}
																																																																																																						}
																																																																																																					}
																																																																																																				}
																																																																																																			}
																																																																																																		}
																																																																																																	}
																																																																																																}
																																																																																															}
																																																																																														}
																																																																																													}
																																																																																												}
																																																																																											}
																																																																																										}
																																																																																									}
																																																																																								}
																																																																																							}
																																																																																						}
																																																																																					}
																																																																																				}
																																																																																			}
																																																																																		}
																																																																																	}
																																																																																}
																																																																															}
																																																																														}
																																																																													}
																																																																												}
																																																																											}
																																																																										}
																																																																									}
																																																																								}
																																																																							}
																																																																						}
																																																																					}
																																																																				}
																																																																			}
																																																																		}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
};
var _abadi199$intl_phone_input$IntlPhoneInput_Config$toCountryData = function (isoCode) {
	var _p0 = isoCode;
	switch (_p0) {
		case 'AF':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Afghanistan (‫افغانستان‬‎)',
					dialCode: '93',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'AL':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Albania (Shqipëri)',
					dialCode: '355',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'DZ':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Algeria (‫الجزائر‬‎)',
					dialCode: '213',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'AS':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'American Samoa',
					dialCode: '1684',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'AD':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Andorra',
					dialCode: '376',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'AO':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Angola',
					dialCode: '244',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'AI':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Anguilla',
					dialCode: '1264',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'AG':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Antigua and Barbuda',
					dialCode: '1268',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'AR':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Argentina',
					dialCode: '54',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'AM':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Armenia (Հայաստան)',
					dialCode: '374',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'AW':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Aruba',
					dialCode: '297',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'AU':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Australia',
					dialCode: '61',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'AT':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Austria (Österreich)',
					dialCode: '43',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'AZ':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Azerbaijan (Azərbaycan)',
					dialCode: '994',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'BS':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Bahamas',
					dialCode: '1242',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'BH':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Bahrain (‫البحرين‬‎)',
					dialCode: '973',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'BD':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Bangladesh (বাংলাদেশ)',
					dialCode: '880',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'BB':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Barbados',
					dialCode: '1246',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'BY':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Belarus (Беларусь)',
					dialCode: '375',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'BE':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Belgium (België)',
					dialCode: '32',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'BZ':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Belize',
					dialCode: '501',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'BJ':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Benin (Bénin)',
					dialCode: '229',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'BM':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Bermuda',
					dialCode: '1441',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'BT':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Bhutan (འབྲུག)',
					dialCode: '975',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'BO':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Bolivia',
					dialCode: '591',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'BA':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Bosnia and Herzegovina (Босна и Херцеговина)',
					dialCode: '387',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'BW':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Botswana',
					dialCode: '267',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'BR':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Brazil (Brasil)',
					dialCode: '55',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'IO':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'British Indian Ocean Territory',
					dialCode: '246',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'VG':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'British Virgin Islands',
					dialCode: '1284',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'BN':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Brunei',
					dialCode: '673',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'BG':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Bulgaria (България)',
					dialCode: '359',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'BF':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Burkina Faso',
					dialCode: '226',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'BI':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Burundi (Uburundi)',
					dialCode: '257',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'KH':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Cambodia (កម្ពុជា)',
					dialCode: '855',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'CM':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Cameroon (Cameroun)',
					dialCode: '237',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'CA':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Canada',
					dialCode: '1',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'CV':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Cape Verde (Kabu Verdi)',
					dialCode: '238',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'BQ':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Caribbean Netherlands',
					dialCode: '599',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'KY':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Cayman Islands',
					dialCode: '1345',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'CF':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Central African Republic (République centrafricaine)',
					dialCode: '236',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'TD':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Chad (Tchad)',
					dialCode: '235',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'CL':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Chile',
					dialCode: '56',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'CN':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'China (中国)',
					dialCode: '86',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'CX':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Christmas Island',
					dialCode: '61',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'CC':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Cocos (Keeling) Islands',
					dialCode: '61',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'CO':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Colombia',
					dialCode: '57',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'KM':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Comoros (‫جزر القمر‬‎)',
					dialCode: '269',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'CD':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Congo (DRC) (Jamhuri ya Kidemokrasia ya Kongo)',
					dialCode: '243',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'CG':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Congo (Republic) (Congo-Brazzaville)',
					dialCode: '242',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'CK':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Cook Islands',
					dialCode: '682',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'CR':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Costa Rica',
					dialCode: '506',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'CI':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Côte d’Ivoire',
					dialCode: '225',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'HR':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Croatia (Hrvatska)',
					dialCode: '385',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'CU':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Cuba',
					dialCode: '53',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'CW':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Curaçao',
					dialCode: '599',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'CY':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Cyprus (Κύπρος)',
					dialCode: '357',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'CZ':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Czech Republic (Česká republika)',
					dialCode: '420',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'DK':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Denmark (Danmark)',
					dialCode: '45',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'DJ':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Djibouti',
					dialCode: '253',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'DM':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Dominica',
					dialCode: '1767',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'DO':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Dominican Republic (República Dominicana)',
					dialCode: '1',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'EC':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Ecuador',
					dialCode: '593',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'EG':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Egypt (‫مصر‬‎)',
					dialCode: '20',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'SV':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'El Salvador',
					dialCode: '503',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'GQ':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Equatorial Guinea (Guinea Ecuatorial)',
					dialCode: '240',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'ER':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Eritrea',
					dialCode: '291',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'EE':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Estonia (Eesti)',
					dialCode: '372',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'ET':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Ethiopia',
					dialCode: '251',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'FK':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Falkland Islands (Islas Malvinas)',
					dialCode: '500',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'FO':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Faroe Islands (Føroyar)',
					dialCode: '298',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'FJ':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Fiji',
					dialCode: '679',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'FI':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Finland (Suomi)',
					dialCode: '358',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'FR':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'France',
					dialCode: '33',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'GF':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'French Guiana (Guyane française)',
					dialCode: '594',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'PF':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'French Polynesia (Polynésie française)',
					dialCode: '689',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'GA':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Gabon',
					dialCode: '241',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'GM':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Gambia',
					dialCode: '220',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'GE':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Georgia (საქართველო)',
					dialCode: '995',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'DE':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Germany (Deutschland)',
					dialCode: '49',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'GH':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Ghana (Gaana)',
					dialCode: '233',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'GI':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Gibraltar',
					dialCode: '350',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'GR':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Greece (Ελλάδα)',
					dialCode: '30',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'GL':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Greenland (Kalaallit Nunaat)',
					dialCode: '299',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'GD':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Grenada',
					dialCode: '1473',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'GP':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Guadeloupe',
					dialCode: '590',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'GU':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Guam',
					dialCode: '1671',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'GT':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Guatemala',
					dialCode: '502',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'GG':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Guernsey',
					dialCode: '44',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'GN':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Guinea (Guinée)',
					dialCode: '224',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'GW':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Guinea-Bissau (Guiné Bissau)',
					dialCode: '245',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'GY':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Guyana',
					dialCode: '592',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'HT':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Haiti',
					dialCode: '509',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'HN':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Honduras',
					dialCode: '504',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'HK':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Hong Kong (香港)',
					dialCode: '852',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'HU':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Hungary (Magyarország)',
					dialCode: '36',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'IS':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Iceland (Ísland)',
					dialCode: '354',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'IN':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'India (भारत)',
					dialCode: '91',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'ID':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Indonesia',
					dialCode: '62',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'IR':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Iran (‫ایران‬‎)',
					dialCode: '98',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'IQ':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Iraq (‫العراق‬‎)',
					dialCode: '964',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'IE':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Ireland',
					dialCode: '353',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'IM':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Isle of Man',
					dialCode: '44',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'IL':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Israel (‫ישראל‬‎)',
					dialCode: '972',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'IT':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Italy (Italia)',
					dialCode: '39',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'JM':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Jamaica',
					dialCode: '1876',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'JP':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Japan (日本)',
					dialCode: '81',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'JE':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Jersey',
					dialCode: '44',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'JO':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Jordan (‫الأردن‬‎)',
					dialCode: '962',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'KZ':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Kazakhstan (Казахстан)',
					dialCode: '7',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'KE':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Kenya',
					dialCode: '254',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'KI':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Kiribati',
					dialCode: '686',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'XK':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Kosovo',
					dialCode: '383',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'KW':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Kuwait (‫الكويت‬‎)',
					dialCode: '965',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'KG':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Kyrgyzstan (Кыргызстан)',
					dialCode: '996',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'LA':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Laos (ລາວ)',
					dialCode: '856',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'LV':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Latvia (Latvija)',
					dialCode: '371',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'LB':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Lebanon (‫لبنان‬‎)',
					dialCode: '961',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'LS':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Lesotho',
					dialCode: '266',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'LR':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Liberia',
					dialCode: '231',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'LY':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Libya (‫ليبيا‬‎)',
					dialCode: '218',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'LI':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Liechtenstein',
					dialCode: '423',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'LT':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Lithuania (Lietuva)',
					dialCode: '370',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'LU':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Luxembourg',
					dialCode: '352',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'MO':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Macau (澳門)',
					dialCode: '853',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'MK':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Macedonia (FYROM) (Македонија)',
					dialCode: '389',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'MG':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Madagascar (Madagasikara)',
					dialCode: '261',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'MW':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Malawi',
					dialCode: '265',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'MY':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Malaysia',
					dialCode: '60',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'MV':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Maldives',
					dialCode: '960',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'ML':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Mali',
					dialCode: '223',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'MT':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Malta',
					dialCode: '356',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'MH':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Marshall Islands',
					dialCode: '692',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'MQ':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Martinique',
					dialCode: '596',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'MR':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Mauritania (‫موريتانيا‬‎)',
					dialCode: '222',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'MU':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Mauritius (Moris)',
					dialCode: '230',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'YT':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Mayotte',
					dialCode: '262',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'MX':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Mexico (México)',
					dialCode: '52',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'FM':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Micronesia',
					dialCode: '691',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'MD':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Moldova (Republica Moldova)',
					dialCode: '373',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'MC':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Monaco',
					dialCode: '377',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'MN':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Mongolia (Монгол)',
					dialCode: '976',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'ME':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Montenegro (Crna Gora)',
					dialCode: '382',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'MS':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Montserrat',
					dialCode: '1664',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'MA':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Morocco (‫المغرب‬‎)',
					dialCode: '212',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'MZ':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Mozambique (Moçambique)',
					dialCode: '258',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'MM':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Myanmar (Burma) (မြန်မာ)',
					dialCode: '95',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'NA':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Namibia (Namibië)',
					dialCode: '264',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'NR':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Nauru',
					dialCode: '674',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'NP':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Nepal (नेपाल)',
					dialCode: '977',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'NL':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Netherlands (Nederland)',
					dialCode: '31',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'NC':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'New Caledonia (Nouvelle-Calédonie)',
					dialCode: '687',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'NZ':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'New Zealand',
					dialCode: '64',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'NI':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Nicaragua',
					dialCode: '505',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'NE':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Niger (Nijar)',
					dialCode: '227',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'NG':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Nigeria',
					dialCode: '234',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'NU':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Niue',
					dialCode: '683',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'NF':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Norfolk Island',
					dialCode: '672',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'KP':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'North Korea (조선 민주주의 인민 공화국)',
					dialCode: '850',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'MP':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Northern Mariana Islands',
					dialCode: '1670',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'NO':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Norway (Norge)',
					dialCode: '47',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'OM':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Oman (‫عُمان‬‎)',
					dialCode: '968',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'PK':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Pakistan (‫پاکستان‬‎)',
					dialCode: '92',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'PW':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Palau',
					dialCode: '680',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'PS':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Palestine (‫فلسطين‬‎)',
					dialCode: '970',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'PA':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Panama (Panamá)',
					dialCode: '507',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'PG':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Papua New Guinea',
					dialCode: '675',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'PY':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Paraguay',
					dialCode: '595',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'PE':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Peru (Perú)',
					dialCode: '51',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'PH':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Philippines',
					dialCode: '63',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'PL':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Poland (Polska)',
					dialCode: '48',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'PT':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Portugal',
					dialCode: '351',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'PR':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Puerto Rico',
					dialCode: '1',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'QA':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Qatar (‫قطر‬‎)',
					dialCode: '974',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'RE':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Réunion (La Réunion)',
					dialCode: '262',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'RO':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Romania (România)',
					dialCode: '40',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'RU':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Russia (Россия)',
					dialCode: '7',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'RW':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Rwanda',
					dialCode: '250',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'BL':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Saint Barthélemy',
					dialCode: '590',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'SH':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Saint Helena',
					dialCode: '290',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'KN':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Saint Kitts and Nevis',
					dialCode: '1869',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'LC':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Saint Lucia',
					dialCode: '1758',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'MF':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Saint Martin (Saint-Martin (partie française))',
					dialCode: '590',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'PM':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Saint Pierre and Miquelon (Saint-Pierre-et-Miquelon)',
					dialCode: '508',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'VC':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Saint Vincent and the Grenadines',
					dialCode: '1784',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'WS':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Samoa',
					dialCode: '685',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'SM':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'San Marino',
					dialCode: '378',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'ST':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'São Tomé and Príncipe (São Tomé e Príncipe)',
					dialCode: '239',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'SA':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Saudi Arabia (‫المملكة العربية السعودية‬‎)',
					dialCode: '966',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'SN':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Senegal (Sénégal)',
					dialCode: '221',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'RS':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Serbia (Србија)',
					dialCode: '381',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'SC':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Seychelles',
					dialCode: '248',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'SL':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Sierra Leone',
					dialCode: '232',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'SG':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Singapore',
					dialCode: '65',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'SX':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Sint Maarten',
					dialCode: '1721',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'SK':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Slovakia (Slovensko)',
					dialCode: '421',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'SI':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Slovenia (Slovenija)',
					dialCode: '386',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'SB':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Solomon Islands',
					dialCode: '677',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'SO':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Somalia (Soomaaliya)',
					dialCode: '252',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'ZA':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'South Africa',
					dialCode: '27',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'KR':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'South Korea (대한민국)',
					dialCode: '82',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'SS':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'South Sudan (‫جنوب السودان‬‎)',
					dialCode: '211',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'ES':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Spain (España)',
					dialCode: '34',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'LK':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Sri Lanka (ශ්‍රී ලංකාව)',
					dialCode: '94',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'SD':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Sudan (‫السودان‬‎)',
					dialCode: '249',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'SR':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Suriname',
					dialCode: '597',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'SJ':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Svalbard and Jan Mayen',
					dialCode: '47',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'SZ':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Swaziland',
					dialCode: '268',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'SE':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Sweden (Sverige)',
					dialCode: '46',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'CH':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Switzerland (Schweiz)',
					dialCode: '41',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'SY':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Syria (‫سوريا‬‎)',
					dialCode: '963',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'TW':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Taiwan (台灣)',
					dialCode: '886',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'TJ':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Tajikistan',
					dialCode: '992',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'TZ':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Tanzania',
					dialCode: '255',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'TH':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Thailand (ไทย)',
					dialCode: '66',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'TL':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Timor-Leste',
					dialCode: '670',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'TG':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Togo',
					dialCode: '228',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'TK':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Tokelau',
					dialCode: '690',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'TO':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Tonga',
					dialCode: '676',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'TT':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Trinidad and Tobago',
					dialCode: '1868',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'TN':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Tunisia (‫تونس‬‎)',
					dialCode: '216',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'TR':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Turkey (Türkiye)',
					dialCode: '90',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'TM':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Turkmenistan',
					dialCode: '993',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'TC':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Turks and Caicos Islands',
					dialCode: '1649',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'TV':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Tuvalu',
					dialCode: '688',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'VI':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'U.S. Virgin Islands',
					dialCode: '1340',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'UG':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Uganda',
					dialCode: '256',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'UA':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Ukraine (Україна)',
					dialCode: '380',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'AE':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'United Arab Emirates (‫الإمارات العربية المتحدة‬‎)',
					dialCode: '971',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'GB':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'United Kingdom',
					dialCode: '44',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'US':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'United States',
					dialCode: '1',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'UY':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Uruguay',
					dialCode: '598',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'UZ':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Uzbekistan (Oʻzbekiston)',
					dialCode: '998',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'VU':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Vanuatu',
					dialCode: '678',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'VA':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Vatican City (Città del Vaticano)',
					dialCode: '39',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'VE':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Venezuela',
					dialCode: '58',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'VN':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Vietnam (Việt Nam)',
					dialCode: '84',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'WF':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Wallis and Futuna (Wallis-et-Futuna)',
					dialCode: '681',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'EH':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Western Sahara (‫الصحراء الغربية‬‎)',
					dialCode: '212',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'YE':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Yemen (‫اليمن‬‎)',
					dialCode: '967',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'ZM':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Zambia',
					dialCode: '260',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'ZW':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Zimbabwe',
					dialCode: '263',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		case 'AX':
			return {
				ctor: '_Tuple2',
				_0: isoCode,
				_1: {
					name: 'Åland Islands',
					dialCode: '358',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(isoCode)
				}
			};
		default:
			return {
				ctor: '_Tuple2',
				_0: '',
				_1: {
					name: 'Unknown',
					dialCode: '',
					flag: _abadi199$intl_phone_input$IntlPhoneInput_Svg$flag('')
				}
			};
	}
};
var _abadi199$intl_phone_input$IntlPhoneInput_Config$toCountryDataList = F2(
	function (config, set) {
		return config.countriesSorter(
			A2(
				_elm_lang$core$List$map,
				_abadi199$intl_phone_input$IntlPhoneInput_Config$toCountryData,
				_elm_lang$core$Set$toList(set)));
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Config$countryList = A2(_elm_lang$core$List$map, _abadi199$intl_phone_input$IntlPhoneInput_Config$toCountryData, _abadi199$intl_phone_input$IntlPhoneInput_Config$isoCodes);
var _abadi199$intl_phone_input$IntlPhoneInput_Config$countries = _elm_lang$core$Dict$fromList(
	A2(_elm_lang$core$List$map, _abadi199$intl_phone_input$IntlPhoneInput_Config$toCountryData, _abadi199$intl_phone_input$IntlPhoneInput_Config$isoCodes));
var _abadi199$intl_phone_input$IntlPhoneInput_Config$getCountryPickerId = function (config) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		config.namespace,
		A2(_elm_lang$core$Basics_ops['++'], 'CountryPicker', config.hash));
};
var _abadi199$intl_phone_input$IntlPhoneInput_Config$isCountryPicker = F2(
	function (domId, config) {
		return _elm_lang$core$Native_Utils.eq(
			_abadi199$intl_phone_input$IntlPhoneInput_Config$getCountryPickerId(config),
			domId);
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Config$getCountryElementId = F2(
	function (config, isoCode) {
		return A2(
			_elm_lang$core$Basics_ops['++'],
			config.namespace,
			A2(
				_elm_lang$core$Basics_ops['++'],
				'Country',
				A2(_elm_lang$core$Basics_ops['++'], isoCode, config.hash)));
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Config$getSearchInputId = function (config) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		config.namespace,
		A2(_elm_lang$core$Basics_ops['++'], 'SearchInput', config.hash));
};
var _abadi199$intl_phone_input$IntlPhoneInput_Config$isDropdownElement = F3(
	function (domId, config, _p1) {
		var _p2 = _p1;
		var isSearchElement = _elm_lang$core$Native_Utils.eq(
			domId,
			_abadi199$intl_phone_input$IntlPhoneInput_Config$getSearchInputId(config));
		var isCountryElement = A2(
			_elm_lang$core$Set$member,
			domId,
			A2(
				_elm_lang$core$Set$map,
				_abadi199$intl_phone_input$IntlPhoneInput_Config$getCountryElementId(config),
				_p2._0.filteredCountries));
		return isCountryElement || isSearchElement;
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Config$getPhoneNumberInputId = function (config) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		config.namespace,
		A2(_elm_lang$core$Basics_ops['++'], 'PhoneNumberInput', config.hash));
};
var _abadi199$intl_phone_input$IntlPhoneInput_Config$defaultCountriesSorter = function (countries) {
	return A2(
		_elm_lang$core$List$sortBy,
		function (_p3) {
			return function (_) {
				return _.name;
			}(
				_elm_lang$core$Tuple$second(_p3));
		},
		countries);
};
var _abadi199$intl_phone_input$IntlPhoneInput_Config$configWithSeed = F2(
	function (hashSeed, onChange) {
		return {
			hash: _elm_lang$core$Basics$toString(
				A2(
					_Skinney$murmur3$Murmur3$hashString,
					hashSeed,
					_elm_lang$core$Basics$toString(
						A3(onChange, _abadi199$intl_phone_input$IntlPhoneInput_Internal$initialState, _abadi199$intl_phone_input$IntlPhoneInput_Type$emptyPhoneNumber, _elm_lang$core$Platform_Cmd$none)))),
			onChange: onChange,
			namespace: 'IntlPhoneInput',
			countries: _abadi199$intl_phone_input$IntlPhoneInput_Config$countries,
			countriesSorter: _abadi199$intl_phone_input$IntlPhoneInput_Config$defaultCountriesSorter
		};
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Config$defaultHashSeed = 118999881999119;
var _abadi199$intl_phone_input$IntlPhoneInput_Config$defaultConfig = _abadi199$intl_phone_input$IntlPhoneInput_Config$configWithSeed(_abadi199$intl_phone_input$IntlPhoneInput_Config$defaultHashSeed);
var _abadi199$intl_phone_input$IntlPhoneInput_Config$Config = F5(
	function (a, b, c, d, e) {
		return {hash: a, onChange: b, namespace: c, countries: d, countriesSorter: e};
	});

var _abadi199$intl_phone_input$IntlPhoneInput_Filter$contains = F2(
	function (keyword, _p0) {
		var _p1 = _p0;
		return A2(
			_elm_lang$core$String$contains,
			_elm_lang$core$String$toLower(keyword),
			_elm_lang$core$String$toLower(_p1._1.name));
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Filter$filterList = F2(
	function (keyword, list) {
		return _elm_lang$core$String$isEmpty(keyword) ? list : A2(
			_elm_lang$core$List$filter,
			_abadi199$intl_phone_input$IntlPhoneInput_Filter$contains(keyword),
			list);
	});

var _abadi199$intl_phone_input$IntlPhoneInput_KeyCode$alphabetKeyCodes = A2(_elm_lang$core$List$range, 65, 90);
var _abadi199$intl_phone_input$IntlPhoneInput_KeyCode$KeyData = F4(
	function (a, b, c, d) {
		return {keyCode: a, shiftKey: b, ctrlKey: c, altKey: d};
	});
var _abadi199$intl_phone_input$IntlPhoneInput_KeyCode$Arrow = function (a) {
	return {ctor: 'Arrow', _0: a};
};
var _abadi199$intl_phone_input$IntlPhoneInput_KeyCode$Alphabet = function (a) {
	return {ctor: 'Alphabet', _0: a};
};
var _abadi199$intl_phone_input$IntlPhoneInput_KeyCode$Backspace = {ctor: 'Backspace'};
var _abadi199$intl_phone_input$IntlPhoneInput_KeyCode$Enter = {ctor: 'Enter'};
var _abadi199$intl_phone_input$IntlPhoneInput_KeyCode$Esc = {ctor: 'Esc'};
var _abadi199$intl_phone_input$IntlPhoneInput_KeyCode$toKeyCode = function (keyData) {
	var _p0 = keyData.keyCode;
	switch (_p0) {
		case 27:
			return _elm_lang$core$Result$Ok(_abadi199$intl_phone_input$IntlPhoneInput_KeyCode$Esc);
		case 13:
			return _elm_lang$core$Result$Ok(_abadi199$intl_phone_input$IntlPhoneInput_KeyCode$Enter);
		case 8:
			return _elm_lang$core$Result$Ok(_abadi199$intl_phone_input$IntlPhoneInput_KeyCode$Backspace);
		default:
			return (keyData.ctrlKey || keyData.altKey) ? _elm_lang$core$Result$Err('alt or ctrl key is pressed') : (A2(_elm_lang$core$List$member, keyData.keyCode, _abadi199$intl_phone_input$IntlPhoneInput_KeyCode$alphabetKeyCodes) ? _elm_lang$core$Result$Ok(
				_abadi199$intl_phone_input$IntlPhoneInput_KeyCode$Alphabet(
					(keyData.shiftKey ? _elm_lang$core$Char$toUpper : _elm_lang$core$Char$toLower)(
						_elm_lang$core$Char$fromCode(keyData.keyCode)))) : _elm_lang$core$Result$Err(
				A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString(keyData.keyCode),
					'is ignored')));
	}
};
var _abadi199$intl_phone_input$IntlPhoneInput_KeyCode$enterKey = function (keyData) {
	var _p1 = _abadi199$intl_phone_input$IntlPhoneInput_KeyCode$toKeyCode(keyData);
	if ((_p1.ctor === 'Ok') && (_p1._0.ctor === 'Enter')) {
		return _elm_lang$core$Json_Decode$succeed(_abadi199$intl_phone_input$IntlPhoneInput_KeyCode$Enter);
	} else {
		return _elm_lang$core$Json_Decode$fail('not an enter');
	}
};
var _abadi199$intl_phone_input$IntlPhoneInput_KeyCode$alphabetKey = function (keyData) {
	var _p2 = _abadi199$intl_phone_input$IntlPhoneInput_KeyCode$toKeyCode(keyData);
	if ((_p2.ctor === 'Ok') && (_p2._0.ctor === 'Alphabet')) {
		return _elm_lang$core$Json_Decode$succeed(
			_abadi199$intl_phone_input$IntlPhoneInput_KeyCode$Alphabet(_p2._0._0));
	} else {
		return _elm_lang$core$Json_Decode$fail('not alphabet');
	}
};
var _abadi199$intl_phone_input$IntlPhoneInput_KeyCode$escKey = function (keyData) {
	var _p3 = _abadi199$intl_phone_input$IntlPhoneInput_KeyCode$toKeyCode(keyData);
	if ((_p3.ctor === 'Ok') && (_p3._0.ctor === 'Esc')) {
		return _elm_lang$core$Json_Decode$succeed(_abadi199$intl_phone_input$IntlPhoneInput_KeyCode$Esc);
	} else {
		return _elm_lang$core$Json_Decode$fail('not an escape');
	}
};
var _abadi199$intl_phone_input$IntlPhoneInput_KeyCode$Right = {ctor: 'Right'};
var _abadi199$intl_phone_input$IntlPhoneInput_KeyCode$Left = {ctor: 'Left'};
var _abadi199$intl_phone_input$IntlPhoneInput_KeyCode$Down = {ctor: 'Down'};
var _abadi199$intl_phone_input$IntlPhoneInput_KeyCode$Up = {ctor: 'Up'};
var _abadi199$intl_phone_input$IntlPhoneInput_KeyCode$toArrowKey = function (keyData) {
	var _p4 = keyData.keyCode;
	switch (_p4) {
		case 37:
			return _elm_lang$core$Result$Ok(_abadi199$intl_phone_input$IntlPhoneInput_KeyCode$Left);
		case 38:
			return _elm_lang$core$Result$Ok(_abadi199$intl_phone_input$IntlPhoneInput_KeyCode$Up);
		case 39:
			return _elm_lang$core$Result$Ok(_abadi199$intl_phone_input$IntlPhoneInput_KeyCode$Right);
		case 40:
			return _elm_lang$core$Result$Ok(_abadi199$intl_phone_input$IntlPhoneInput_KeyCode$Down);
		default:
			return _elm_lang$core$Result$Err('not arrow key');
	}
};
var _abadi199$intl_phone_input$IntlPhoneInput_KeyCode$arrowKey = function (keyData) {
	var _p5 = _abadi199$intl_phone_input$IntlPhoneInput_KeyCode$toArrowKey(keyData);
	if (_p5.ctor === 'Ok') {
		return _elm_lang$core$Json_Decode$succeed(
			_abadi199$intl_phone_input$IntlPhoneInput_KeyCode$Arrow(_p5._0));
	} else {
		return _elm_lang$core$Json_Decode$fail(_p5._0);
	}
};

var _abadi199$intl_phone_input$IntlPhoneInput_List$prev = F2(
	function (current, list) {
		prev:
		while (true) {
			var _p0 = list;
			if (_p0.ctor === '[]') {
				return current;
			} else {
				if (_p0._1.ctor === '[]') {
					return current;
				} else {
					var _p1 = _p0._1._0;
					if (_elm_lang$core$Native_Utils.eq(_p1, current)) {
						return _p0._0;
					} else {
						var _v1 = current,
							_v2 = {ctor: '::', _0: _p1, _1: _p0._1._1};
						current = _v1;
						list = _v2;
						continue prev;
					}
				}
			}
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_List$next = F2(
	function (current, list) {
		next:
		while (true) {
			var _p2 = list;
			if (_p2.ctor === '[]') {
				return current;
			} else {
				if (_p2._1.ctor === '[]') {
					return current;
				} else {
					var _p3 = _p2._1;
					if (_elm_lang$core$Native_Utils.eq(_p2._0, current)) {
						return A2(
							_elm_lang$core$Maybe$withDefault,
							current,
							_elm_lang$core$List$head(_p3));
					} else {
						var _v4 = current,
							_v5 = _p3;
						current = _v4;
						list = _v5;
						continue next;
					}
				}
			}
		}
	});

var _abadi199$intl_phone_input$IntlPhoneInput_Action$ignoreTaskError = F4(
	function (config, state, phoneNumber, result) {
		var _p0 = function () {
			var _p1 = result;
			if (_p1.ctor === 'Err') {
				return _elm_lang$core$Basics$toString(_p1._0);
			} else {
				return '';
			}
		}();
		return A3(config.onChange, state, phoneNumber, _elm_lang$core$Platform_Cmd$none);
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Action$prevCountry = F2(
	function (config, _p2) {
		var _p3 = _p2;
		var _p5 = _p3._0;
		var _p4 = _p5.highlightedCountryByIsoCode;
		if (_p4.ctor === 'Just') {
			return _elm_lang$core$Maybe$Just(
				A2(
					_abadi199$intl_phone_input$IntlPhoneInput_List$prev,
					_p4._0,
					A2(
						_elm_lang$core$List$map,
						_elm_lang$core$Tuple$first,
						A2(_abadi199$intl_phone_input$IntlPhoneInput_Config$toCountryDataList, config, _p5.filteredCountries))));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Action$nextCountry = F2(
	function (config, _p6) {
		var _p7 = _p6;
		var _p9 = _p7._0;
		var _p8 = _p9.highlightedCountryByIsoCode;
		if (_p8.ctor === 'Just') {
			return _elm_lang$core$Maybe$Just(
				A2(
					_abadi199$intl_phone_input$IntlPhoneInput_List$next,
					_p8._0,
					A2(
						_elm_lang$core$List$map,
						_elm_lang$core$Tuple$first,
						A2(_abadi199$intl_phone_input$IntlPhoneInput_Config$toCountryDataList, config, _p9.filteredCountries))));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Action$andThen = F2(
	function (f, _p10) {
		var _p11 = _p10;
		return A4(f, _p11._0, _p11._1, _p11._2, _p11._3);
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Action$done = function (_p12) {
	var _p13 = _p12;
	return A3(_p13._0.onChange, _p13._1, _p13._2, _p13._3);
};
var _abadi199$intl_phone_input$IntlPhoneInput_Action$doNothing = F3(
	function (config, state, phoneNumber) {
		return A3(config.onChange, state, phoneNumber, _elm_lang$core$Platform_Cmd$none);
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Action$Action = F4(
	function (a, b, c, d) {
		return {ctor: 'Action', _0: a, _1: b, _2: c, _3: d};
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Action$updatePhoneNumber = F5(
	function (newPhoneNumber, config, _p14, phoneNumber, cmd) {
		var _p15 = _p14;
		return A4(
			_abadi199$intl_phone_input$IntlPhoneInput_Action$Action,
			config,
			_abadi199$intl_phone_input$IntlPhoneInput_Internal$State(_p15._0),
			_elm_lang$core$Native_Utils.update(
				phoneNumber,
				{phoneNumber: newPhoneNumber}),
			cmd);
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Action$selectCountry = F5(
	function (isoCode, config, _p16, phoneNumber, cmd) {
		var _p17 = _p16;
		return A4(
			_abadi199$intl_phone_input$IntlPhoneInput_Action$Action,
			config,
			_abadi199$intl_phone_input$IntlPhoneInput_Internal$State(
				_abadi199$intl_phone_input$IntlPhoneInput_Internal$toggleCountryPickerState(_p17._0)),
			_elm_lang$core$Native_Utils.update(
				phoneNumber,
				{isoCode: isoCode}),
			cmd);
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Action$clearKeyword = F4(
	function (config, _p18, phoneNumber, cmd) {
		var _p19 = _p18;
		return A4(
			_abadi199$intl_phone_input$IntlPhoneInput_Action$Action,
			config,
			_abadi199$intl_phone_input$IntlPhoneInput_Internal$State(
				_elm_lang$core$Native_Utils.update(
					_p19._0,
					{keyword: ''})),
			phoneNumber,
			cmd);
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Action$highlightCountry = F5(
	function (isoCode, config, _p20, phoneNumber, cmd) {
		var _p21 = _p20;
		return A4(
			_abadi199$intl_phone_input$IntlPhoneInput_Action$Action,
			config,
			_abadi199$intl_phone_input$IntlPhoneInput_Internal$State(
				_elm_lang$core$Native_Utils.update(
					_p21._0,
					{
						highlightedCountryByIsoCode: _elm_lang$core$Maybe$Just(isoCode)
					})),
			phoneNumber,
			cmd);
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Action$removeHighlightedCountry = F4(
	function (config, _p22, phoneNumber, cmd) {
		var _p23 = _p22;
		return A4(
			_abadi199$intl_phone_input$IntlPhoneInput_Action$Action,
			config,
			_abadi199$intl_phone_input$IntlPhoneInput_Internal$State(
				_elm_lang$core$Native_Utils.update(
					_p23._0,
					{highlightedCountryByIsoCode: _elm_lang$core$Maybe$Nothing})),
			phoneNumber,
			cmd);
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Action$appendCmd = F5(
	function (config, state, phoneNumber, firstCmd, secondCmd) {
		return A4(
			_abadi199$intl_phone_input$IntlPhoneInput_Action$Action,
			config,
			state,
			phoneNumber,
			_elm_lang$core$Platform_Cmd$batch(
				{
					ctor: '::',
					_0: firstCmd,
					_1: {
						ctor: '::',
						_0: secondCmd,
						_1: {ctor: '[]'}
					}
				}));
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Action$focus = F5(
	function (maybeIsoCode, config, state, phoneNumber, cmd) {
		var focusCmd = function (isoCode) {
			return A2(
				_elm_lang$core$Task$attempt,
				A3(_abadi199$intl_phone_input$IntlPhoneInput_Action$ignoreTaskError, config, state, phoneNumber),
				A2(
					_elm_lang$core$Task$andThen,
					function (_p24) {
						return _elm_lang$dom$Dom$focus(
							_abadi199$intl_phone_input$IntlPhoneInput_Config$getSearchInputId(config));
					},
					_elm_lang$dom$Dom$focus(
						A2(_abadi199$intl_phone_input$IntlPhoneInput_Config$getCountryElementId, config, isoCode))));
		};
		return A5(
			_abadi199$intl_phone_input$IntlPhoneInput_Action$appendCmd,
			config,
			state,
			phoneNumber,
			cmd,
			A2(
				_elm_lang$core$Maybe$withDefault,
				_elm_lang$core$Platform_Cmd$none,
				A2(_elm_lang$core$Maybe$map, focusCmd, maybeIsoCode)));
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Action$filterCountries = F4(
	function (config, _p25, phoneNumber, cmd) {
		var _p26 = _p25;
		var _p28 = _p26._0;
		var filteredCountries = _elm_lang$core$Set$fromList(
			A2(
				_elm_lang$core$List$map,
				_elm_lang$core$Tuple$first,
				A2(
					_abadi199$intl_phone_input$IntlPhoneInput_Filter$filterList,
					_p28.keyword,
					_elm_lang$core$Dict$toList(config.countries))));
		var firstCountry = A2(
			_elm_lang$core$Maybe$map,
			_elm_lang$core$Tuple$first,
			_elm_lang$core$List$head(
				config.countriesSorter(
					A2(_abadi199$intl_phone_input$IntlPhoneInput_Config$toCountryDataList, config, filteredCountries))));
		var highlightedCountry = function () {
			var _p27 = _p28.highlightedCountryByIsoCode;
			if (_p27.ctor === 'Just') {
				return A2(_elm_lang$core$Set$member, _p27._0, filteredCountries) ? _p28.highlightedCountryByIsoCode : firstCountry;
			} else {
				return firstCountry;
			}
		}();
		return A2(
			_abadi199$intl_phone_input$IntlPhoneInput_Action$andThen,
			_abadi199$intl_phone_input$IntlPhoneInput_Action$focus(highlightedCountry),
			A4(
				_abadi199$intl_phone_input$IntlPhoneInput_Action$Action,
				config,
				_abadi199$intl_phone_input$IntlPhoneInput_Internal$State(
					_elm_lang$core$Native_Utils.update(
						_p28,
						{filteredCountries: filteredCountries, highlightedCountryByIsoCode: highlightedCountry})),
				phoneNumber,
				cmd));
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Action$openCountryDropdown = F4(
	function (config, _p29, phoneNumber, cmd) {
		var _p30 = _p29;
		return A2(
			_abadi199$intl_phone_input$IntlPhoneInput_Action$andThen,
			_abadi199$intl_phone_input$IntlPhoneInput_Action$filterCountries,
			A2(
				_abadi199$intl_phone_input$IntlPhoneInput_Action$andThen,
				_abadi199$intl_phone_input$IntlPhoneInput_Action$clearKeyword,
				A2(
					_abadi199$intl_phone_input$IntlPhoneInput_Action$andThen,
					_abadi199$intl_phone_input$IntlPhoneInput_Action$highlightCountry(phoneNumber.isoCode),
					A4(
						_abadi199$intl_phone_input$IntlPhoneInput_Action$Action,
						config,
						_abadi199$intl_phone_input$IntlPhoneInput_Internal$State(
							_elm_lang$core$Native_Utils.update(
								_p30._0,
								{countryPickerState: _abadi199$intl_phone_input$IntlPhoneInput_Internal$CountryPickerOpened})),
						phoneNumber,
						cmd))));
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Action$appendKeyword = F5(
	function (keyCode, config, _p31, phoneNumber, cmd) {
		var _p32 = _p31;
		var _p34 = _p32._0;
		var doNothing = A4(
			_abadi199$intl_phone_input$IntlPhoneInput_Action$Action,
			config,
			_abadi199$intl_phone_input$IntlPhoneInput_Internal$State(_p34),
			phoneNumber,
			cmd);
		var _p33 = keyCode;
		if (_p33.ctor === 'Alphabet') {
			return A2(
				_abadi199$intl_phone_input$IntlPhoneInput_Action$andThen,
				_abadi199$intl_phone_input$IntlPhoneInput_Action$filterCountries,
				A4(
					_abadi199$intl_phone_input$IntlPhoneInput_Action$Action,
					config,
					_abadi199$intl_phone_input$IntlPhoneInput_Internal$State(
						_elm_lang$core$Native_Utils.update(
							_p34,
							{
								keyword: A2(
									_elm_lang$core$Basics_ops['++'],
									_p34.keyword,
									_elm_lang$core$String$fromChar(_p33._0))
							})),
					phoneNumber,
					cmd));
		} else {
			return doNothing;
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Action$deleteKeyword = F4(
	function (config, _p35, phoneNumber, cmd) {
		var _p36 = _p35;
		var _p37 = _p36._0;
		return A2(
			_abadi199$intl_phone_input$IntlPhoneInput_Action$andThen,
			_abadi199$intl_phone_input$IntlPhoneInput_Action$filterCountries,
			A4(
				_abadi199$intl_phone_input$IntlPhoneInput_Action$Action,
				config,
				_abadi199$intl_phone_input$IntlPhoneInput_Internal$State(
					_elm_lang$core$Native_Utils.update(
						_p37,
						{
							keyword: A2(_elm_lang$core$String$dropRight, 1, _p37.keyword)
						})),
				phoneNumber,
				cmd));
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Action$highlightNextCountry = F4(
	function (config, _p38, phoneNumber, cmd) {
		var _p39 = _p38;
		var _p40 = _p39._0;
		var nextIsoCode = A2(
			_abadi199$intl_phone_input$IntlPhoneInput_Action$nextCountry,
			config,
			_abadi199$intl_phone_input$IntlPhoneInput_Internal$State(_p40));
		var updatedState = _abadi199$intl_phone_input$IntlPhoneInput_Internal$State(
			_elm_lang$core$Native_Utils.update(
				_p40,
				{highlightedCountryByIsoCode: nextIsoCode}));
		return A2(
			_abadi199$intl_phone_input$IntlPhoneInput_Action$andThen,
			_abadi199$intl_phone_input$IntlPhoneInput_Action$focus(nextIsoCode),
			A4(_abadi199$intl_phone_input$IntlPhoneInput_Action$Action, config, updatedState, phoneNumber, cmd));
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Action$highlightPrevCountry = F4(
	function (config, _p41, phoneNumber, cmd) {
		var _p42 = _p41;
		var _p43 = _p42._0;
		var prevIsoCode = A2(
			_abadi199$intl_phone_input$IntlPhoneInput_Action$prevCountry,
			config,
			_abadi199$intl_phone_input$IntlPhoneInput_Internal$State(_p43));
		var updatedState = _abadi199$intl_phone_input$IntlPhoneInput_Internal$State(
			_elm_lang$core$Native_Utils.update(
				_p43,
				{highlightedCountryByIsoCode: prevIsoCode}));
		return A2(
			_abadi199$intl_phone_input$IntlPhoneInput_Action$andThen,
			_abadi199$intl_phone_input$IntlPhoneInput_Action$focus(prevIsoCode),
			A4(_abadi199$intl_phone_input$IntlPhoneInput_Action$Action, config, updatedState, phoneNumber, cmd));
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Action$focusInput = F4(
	function (config, state, phoneNumber, cmd) {
		return A5(
			_abadi199$intl_phone_input$IntlPhoneInput_Action$appendCmd,
			config,
			state,
			phoneNumber,
			cmd,
			A2(
				_elm_lang$core$Task$attempt,
				A3(_abadi199$intl_phone_input$IntlPhoneInput_Action$ignoreTaskError, config, state, phoneNumber),
				_elm_lang$dom$Dom$focus(
					_abadi199$intl_phone_input$IntlPhoneInput_Config$getPhoneNumberInputId(config))));
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Action$closeCountryDropdown = F4(
	function (config, _p44, phoneNumber, cmd) {
		var _p45 = _p44;
		return A2(
			_abadi199$intl_phone_input$IntlPhoneInput_Action$andThen,
			_abadi199$intl_phone_input$IntlPhoneInput_Action$focusInput,
			A4(
				_abadi199$intl_phone_input$IntlPhoneInput_Action$Action,
				config,
				_abadi199$intl_phone_input$IntlPhoneInput_Internal$State(
					_elm_lang$core$Native_Utils.update(
						_p45._0,
						{countryPickerState: _abadi199$intl_phone_input$IntlPhoneInput_Internal$CountryPickerClosed})),
				phoneNumber,
				cmd));
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Action$toggleCountryDropdown = F4(
	function (config, _p46, phoneNumber, cmd) {
		var _p47 = _p46;
		var _p49 = _p47._0;
		var _p48 = _p49.countryPickerState;
		if (_p48.ctor === 'CountryPickerOpened') {
			return A4(
				_abadi199$intl_phone_input$IntlPhoneInput_Action$closeCountryDropdown,
				config,
				_abadi199$intl_phone_input$IntlPhoneInput_Internal$State(_p49),
				phoneNumber,
				cmd);
		} else {
			return A4(
				_abadi199$intl_phone_input$IntlPhoneInput_Action$openCountryDropdown,
				config,
				_abadi199$intl_phone_input$IntlPhoneInput_Internal$State(_p49),
				phoneNumber,
				cmd);
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Action$selectHighlightedCountry = F4(
	function (config, _p50, phoneNumber, cmd) {
		var _p51 = _p50;
		var _p53 = _p51._0;
		var doNothing = A4(
			_abadi199$intl_phone_input$IntlPhoneInput_Action$Action,
			config,
			_abadi199$intl_phone_input$IntlPhoneInput_Internal$State(_p53),
			phoneNumber,
			cmd);
		var _p52 = _p53.highlightedCountryByIsoCode;
		if (_p52.ctor === 'Just') {
			return A2(
				_abadi199$intl_phone_input$IntlPhoneInput_Action$andThen,
				_abadi199$intl_phone_input$IntlPhoneInput_Action$closeCountryDropdown,
				A5(
					_abadi199$intl_phone_input$IntlPhoneInput_Action$selectCountry,
					_p52._0,
					config,
					_abadi199$intl_phone_input$IntlPhoneInput_Internal$State(_p53),
					phoneNumber,
					cmd));
		} else {
			return doNothing;
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Action$updateKeyword = F5(
	function (keyword, config, _p54, phoneNumber, cmd) {
		var _p55 = _p54;
		return A2(
			_abadi199$intl_phone_input$IntlPhoneInput_Action$andThen,
			_abadi199$intl_phone_input$IntlPhoneInput_Action$filterCountries,
			A4(
				_abadi199$intl_phone_input$IntlPhoneInput_Action$Action,
				config,
				_abadi199$intl_phone_input$IntlPhoneInput_Internal$State(
					_elm_lang$core$Native_Utils.update(
						_p55._0,
						{keyword: keyword})),
				phoneNumber,
				cmd));
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Action$navigateCountry = F5(
	function (arrowKey, config, _p56, phoneNumber, cmd) {
		var _p57 = _p56;
		var _p59 = _p57._0;
		var doNothing = A4(
			_abadi199$intl_phone_input$IntlPhoneInput_Action$Action,
			config,
			_abadi199$intl_phone_input$IntlPhoneInput_Internal$State(_p59),
			phoneNumber,
			cmd);
		var _p58 = arrowKey;
		if (_p58.ctor === 'Arrow') {
			switch (_p58._0.ctor) {
				case 'Left':
					return A4(
						_abadi199$intl_phone_input$IntlPhoneInput_Action$highlightPrevCountry,
						config,
						_abadi199$intl_phone_input$IntlPhoneInput_Internal$State(_p59),
						phoneNumber,
						cmd);
				case 'Up':
					return A4(
						_abadi199$intl_phone_input$IntlPhoneInput_Action$highlightPrevCountry,
						config,
						_abadi199$intl_phone_input$IntlPhoneInput_Internal$State(_p59),
						phoneNumber,
						cmd);
				case 'Right':
					return A4(
						_abadi199$intl_phone_input$IntlPhoneInput_Action$highlightNextCountry,
						config,
						_abadi199$intl_phone_input$IntlPhoneInput_Internal$State(_p59),
						phoneNumber,
						cmd);
				default:
					return A4(
						_abadi199$intl_phone_input$IntlPhoneInput_Action$highlightNextCountry,
						config,
						_abadi199$intl_phone_input$IntlPhoneInput_Internal$State(_p59),
						phoneNumber,
						cmd);
			}
		} else {
			return doNothing;
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Action$autocloseCountryDropdown = F5(
	function (focusEvent, config, _p60, phoneNumber, cmd) {
		var _p61 = _p60;
		var _p62 = _p61._0;
		var domId = A2(_elm_lang$core$Maybe$withDefault, '', focusEvent.relatedTargetId);
		var doNothing = A4(
			_abadi199$intl_phone_input$IntlPhoneInput_Action$Action,
			config,
			_abadi199$intl_phone_input$IntlPhoneInput_Internal$State(_p62),
			phoneNumber,
			cmd);
		return (A3(
			_abadi199$intl_phone_input$IntlPhoneInput_Config$isDropdownElement,
			domId,
			config,
			_abadi199$intl_phone_input$IntlPhoneInput_Internal$State(_p62)) || A2(_abadi199$intl_phone_input$IntlPhoneInput_Config$isCountryPicker, domId, config)) ? doNothing : A4(
			_abadi199$intl_phone_input$IntlPhoneInput_Action$Action,
			config,
			_abadi199$intl_phone_input$IntlPhoneInput_Internal$State(
				_elm_lang$core$Native_Utils.update(
					_p62,
					{countryPickerState: _abadi199$intl_phone_input$IntlPhoneInput_Internal$CountryPickerClosed})),
			phoneNumber,
			_elm_lang$core$Platform_Cmd$none);
	});

var _abadi199$intl_phone_input$IntlPhoneInput_Event$keyDataDecoder = A5(
	_elm_lang$core$Json_Decode$map4,
	F4(
		function (keyCode, altKey, shiftKey, ctrlKey) {
			return {keyCode: keyCode, altKey: altKey, shiftKey: shiftKey, ctrlKey: ctrlKey};
		}),
	A2(_elm_lang$core$Json_Decode$field, 'keyCode', _elm_lang$core$Json_Decode$int),
	A2(_elm_lang$core$Json_Decode$field, 'altKey', _elm_lang$core$Json_Decode$bool),
	A2(_elm_lang$core$Json_Decode$field, 'shiftKey', _elm_lang$core$Json_Decode$bool),
	A2(_elm_lang$core$Json_Decode$field, 'ctrlKey', _elm_lang$core$Json_Decode$bool));
var _abadi199$intl_phone_input$IntlPhoneInput_Event$batch = F5(
	function (event, actions, config, _p0, phoneNumber) {
		var _p1 = _p0;
		var toDecoderAction = function (_p2) {
			var _p3 = _p2;
			return A2(
				_elm_lang$core$Json_Decode$map,
				_p3._1,
				A2(_elm_lang$core$Json_Decode$andThen, _p3._0, _abadi199$intl_phone_input$IntlPhoneInput_Event$keyDataDecoder));
		};
		var oneOf = _elm_lang$core$Json_Decode$oneOf(
			A2(_elm_lang$core$List$map, toDecoderAction, actions));
		return A2(
			_elm_lang$html$Html_Attributes$map,
			function (action) {
				return _abadi199$intl_phone_input$IntlPhoneInput_Action$done(
					A4(
						action,
						config,
						_abadi199$intl_phone_input$IntlPhoneInput_Internal$State(_p1._0),
						phoneNumber,
						_elm_lang$core$Platform_Cmd$none));
			},
			A3(
				_elm_lang$html$Html_Events$onWithOptions,
				event,
				{preventDefault: true, stopPropagation: true},
				oneOf));
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Event$batchKeyPress = _abadi199$intl_phone_input$IntlPhoneInput_Event$batch('keypress');
var _abadi199$intl_phone_input$IntlPhoneInput_Event$batchKeyDown = _abadi199$intl_phone_input$IntlPhoneInput_Event$batch('keydown');
var _abadi199$intl_phone_input$IntlPhoneInput_Event$onBlur = function (msg) {
	var relatedTargetDecoder = _elm_lang$core$Json_Decode$oneOf(
		{
			ctor: '::',
			_0: A2(
				_elm_lang$core$Json_Decode$at,
				{
					ctor: '::',
					_0: 'relatedTarget',
					_1: {
						ctor: '::',
						_0: 'id',
						_1: {ctor: '[]'}
					}
				},
				_elm_lang$core$Json_Decode$nullable(_elm_lang$core$Json_Decode$string)),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$core$Json_Decode$field,
					'relatedTarget',
					_elm_lang$core$Json_Decode$null(_elm_lang$core$Maybe$Nothing)),
				_1: {ctor: '[]'}
			}
		});
	return A2(
		_elm_lang$html$Html_Events$on,
		'blur',
		A2(
			_elm_lang$core$Json_Decode$map,
			msg,
			A2(
				_elm_lang$core$Json_Decode$map,
				function (targetId) {
					return {relatedTargetId: targetId};
				},
				relatedTargetDecoder)));
};
var _abadi199$intl_phone_input$IntlPhoneInput_Event$onClickStopPropagation = function (tagger) {
	return A3(
		_elm_lang$html$Html_Events$onWithOptions,
		'click',
		{stopPropagation: true, preventDefault: false},
		_elm_lang$core$Json_Decode$succeed(tagger));
};

var _abadi199$intl_phone_input$IntlPhoneInput_Flag$flagWrapper = F2(
	function (config, flagHtml) {
		var _p0 = _rtfeldman$elm_css_helpers$Html_CssHelpers$withNamespace(config.namespace);
		var id = _p0.id;
		var $class = _p0.$class;
		var classList = _p0.classList;
		return A2(
			_elm_lang$html$Html$span,
			{
				ctor: '::',
				_0: $class(
					{
						ctor: '::',
						_0: _abadi199$intl_phone_input$IntlPhoneInput_Css$Flag,
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: flagHtml,
				_1: {ctor: '[]'}
			});
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Flag$flag = F2(
	function (config, phoneNumber) {
		return A2(
			_abadi199$intl_phone_input$IntlPhoneInput_Flag$flagWrapper,
			config,
			_abadi199$intl_phone_input$IntlPhoneInput_Svg$flag(phoneNumber.isoCode));
	});

var _abadi199$intl_phone_input$IntlPhoneInput_Country$countryView = F5(
	function (config, isoCode, countryData, _p0, phoneNumber) {
		var _p1 = _p0;
		var _p3 = _p1._0;
		var _p2 = _rtfeldman$elm_css_helpers$Html_CssHelpers$withNamespace(config.namespace);
		var id = _p2.id;
		var $class = _p2.$class;
		var classList = _p2.classList;
		return A2(
			_elm_lang$html$Html$button,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$type_('button'),
				_1: {
					ctor: '::',
					_0: $class(
						{
							ctor: '::',
							_0: _abadi199$intl_phone_input$IntlPhoneInput_Css$Country,
							_1: _elm_lang$core$Native_Utils.eq(
								_p3.highlightedCountryByIsoCode,
								_elm_lang$core$Maybe$Just(isoCode)) ? {
								ctor: '::',
								_0: _abadi199$intl_phone_input$IntlPhoneInput_Css$Highlighted,
								_1: {ctor: '[]'}
							} : {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: id(
							A2(_abadi199$intl_phone_input$IntlPhoneInput_Config$getCountryElementId, config, isoCode)),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onClick(
								_abadi199$intl_phone_input$IntlPhoneInput_Action$done(
									A5(
										_abadi199$intl_phone_input$IntlPhoneInput_Action$selectCountry,
										isoCode,
										config,
										_abadi199$intl_phone_input$IntlPhoneInput_Internal$State(_p3),
										phoneNumber,
										_elm_lang$core$Platform_Cmd$none))),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Events$onMouseOver(
									_abadi199$intl_phone_input$IntlPhoneInput_Action$done(
										A5(
											_abadi199$intl_phone_input$IntlPhoneInput_Action$highlightCountry,
											isoCode,
											config,
											_abadi199$intl_phone_input$IntlPhoneInput_Internal$State(_p3),
											phoneNumber,
											_elm_lang$core$Platform_Cmd$none))),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Events$onFocus(
										_abadi199$intl_phone_input$IntlPhoneInput_Action$done(
											A5(
												_abadi199$intl_phone_input$IntlPhoneInput_Action$highlightCountry,
												isoCode,
												config,
												_abadi199$intl_phone_input$IntlPhoneInput_Internal$State(_p3),
												phoneNumber,
												_elm_lang$core$Platform_Cmd$none))),
									_1: {
										ctor: '::',
										_0: A4(
											_abadi199$intl_phone_input$IntlPhoneInput_Event$batchKeyDown,
											{
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: _abadi199$intl_phone_input$IntlPhoneInput_KeyCode$arrowKey, _1: _abadi199$intl_phone_input$IntlPhoneInput_Action$navigateCountry},
												_1: {
													ctor: '::',
													_0: {
														ctor: '_Tuple2',
														_0: _abadi199$intl_phone_input$IntlPhoneInput_KeyCode$escKey,
														_1: _elm_lang$core$Basics$always(_abadi199$intl_phone_input$IntlPhoneInput_Action$closeCountryDropdown)
													},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: _abadi199$intl_phone_input$IntlPhoneInput_KeyCode$alphabetKey, _1: _abadi199$intl_phone_input$IntlPhoneInput_Action$appendKeyword},
														_1: {ctor: '[]'}
													}
												}
											},
											config,
											_abadi199$intl_phone_input$IntlPhoneInput_Internal$State(_p3),
											phoneNumber),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				}
			},
			{
				ctor: '::',
				_0: A2(_abadi199$intl_phone_input$IntlPhoneInput_Flag$flagWrapper, config, countryData.flag),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$span,
						{
							ctor: '::',
							_0: $class(
								{
									ctor: '::',
									_0: _abadi199$intl_phone_input$IntlPhoneInput_Css$CountryName,
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(countryData.name),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			});
	});
var _abadi199$intl_phone_input$IntlPhoneInput_Country$countriesView = F3(
	function (config, _p4, phoneNumber) {
		var _p5 = _p4;
		var _p9 = _p5._0;
		var _p6 = _rtfeldman$elm_css_helpers$Html_CssHelpers$withNamespace(config.namespace);
		var id = _p6.id;
		var $class = _p6.$class;
		var classList = _p6.classList;
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: $class(
					{
						ctor: '::',
						_0: _abadi199$intl_phone_input$IntlPhoneInput_Css$CountryListScroll,
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$ul,
					{
						ctor: '::',
						_0: $class(
							{
								ctor: '::',
								_0: _abadi199$intl_phone_input$IntlPhoneInput_Css$CountryList,
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					},
					A2(
						_elm_lang$core$List$map,
						function (_p7) {
							var _p8 = _p7;
							return A2(
								_elm_lang$html$Html$li,
								{
									ctor: '::',
									_0: $class(
										{
											ctor: '::',
											_0: _abadi199$intl_phone_input$IntlPhoneInput_Css$CountryListItem,
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: A5(
										_abadi199$intl_phone_input$IntlPhoneInput_Country$countryView,
										config,
										_p8._0,
										_p8._1,
										_abadi199$intl_phone_input$IntlPhoneInput_Internal$State(_p9),
										phoneNumber),
									_1: {ctor: '[]'}
								});
						},
						A2(_abadi199$intl_phone_input$IntlPhoneInput_Config$toCountryDataList, config, _p9.filteredCountries))),
				_1: {ctor: '[]'}
			});
	});

var _abadi199$intl_phone_input$IntlPhoneInput$phoneInputView = F3(
	function (config, _p0, phoneNumber) {
		var _p1 = _p0;
		var _p2 = _rtfeldman$elm_css_helpers$Html_CssHelpers$withNamespace(config.namespace);
		var id = _p2.id;
		var $class = _p2.$class;
		var classList = _p2.classList;
		return A2(
			_elm_lang$html$Html$input,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$type_('tel'),
				_1: {
					ctor: '::',
					_0: id(
						_abadi199$intl_phone_input$IntlPhoneInput_Config$getPhoneNumberInputId(config)),
					_1: {
						ctor: '::',
						_0: $class(
							{
								ctor: '::',
								_0: _abadi199$intl_phone_input$IntlPhoneInput_Css$PhoneInput,
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$value(phoneNumber.phoneNumber),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Events$onInput(
									function (value) {
										return _abadi199$intl_phone_input$IntlPhoneInput_Action$done(
											A5(
												_abadi199$intl_phone_input$IntlPhoneInput_Action$updatePhoneNumber,
												value,
												config,
												_abadi199$intl_phone_input$IntlPhoneInput_Internal$State(_p1._0),
												phoneNumber,
												_elm_lang$core$Platform_Cmd$none));
									}),
								_1: {ctor: '[]'}
							}
						}
					}
				}
			},
			{ctor: '[]'});
	});
var _abadi199$intl_phone_input$IntlPhoneInput$searchInput = F3(
	function (config, _p3, phoneNumber) {
		var _p4 = _p3;
		var _p6 = _p4._0;
		var _p5 = _rtfeldman$elm_css_helpers$Html_CssHelpers$withNamespace(config.namespace);
		var id = _p5.id;
		var $class = _p5.$class;
		var classList = _p5.classList;
		return A2(
			_elm_lang$html$Html$input,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$type_('text'),
				_1: {
					ctor: '::',
					_0: id(
						_abadi199$intl_phone_input$IntlPhoneInput_Config$getSearchInputId(config)),
					_1: {
						ctor: '::',
						_0: $class(
							{
								ctor: '::',
								_0: _abadi199$intl_phone_input$IntlPhoneInput_Css$SearchInput,
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$value(_p6.keyword),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$placeholder('Search'),
								_1: {
									ctor: '::',
									_0: _abadi199$intl_phone_input$IntlPhoneInput_Event$onBlur(
										function (focusEvent) {
											return _abadi199$intl_phone_input$IntlPhoneInput_Action$done(
												A5(
													_abadi199$intl_phone_input$IntlPhoneInput_Action$autocloseCountryDropdown,
													focusEvent,
													config,
													_abadi199$intl_phone_input$IntlPhoneInput_Internal$State(_p6),
													phoneNumber,
													_elm_lang$core$Platform_Cmd$none));
										}),
									_1: {
										ctor: '::',
										_0: A4(
											_abadi199$intl_phone_input$IntlPhoneInput_Event$batchKeyDown,
											{
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: _abadi199$intl_phone_input$IntlPhoneInput_KeyCode$arrowKey, _1: _abadi199$intl_phone_input$IntlPhoneInput_Action$navigateCountry},
												_1: {
													ctor: '::',
													_0: {
														ctor: '_Tuple2',
														_0: _abadi199$intl_phone_input$IntlPhoneInput_KeyCode$enterKey,
														_1: _elm_lang$core$Basics$always(_abadi199$intl_phone_input$IntlPhoneInput_Action$selectHighlightedCountry)
													},
													_1: {
														ctor: '::',
														_0: {
															ctor: '_Tuple2',
															_0: _abadi199$intl_phone_input$IntlPhoneInput_KeyCode$escKey,
															_1: _elm_lang$core$Basics$always(_abadi199$intl_phone_input$IntlPhoneInput_Action$closeCountryDropdown)
														},
														_1: {ctor: '[]'}
													}
												}
											},
											config,
											_abadi199$intl_phone_input$IntlPhoneInput_Internal$State(_p6),
											phoneNumber),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Events$onInput(
												function (value) {
													return _abadi199$intl_phone_input$IntlPhoneInput_Action$done(
														A5(
															_abadi199$intl_phone_input$IntlPhoneInput_Action$updateKeyword,
															value,
															config,
															_abadi199$intl_phone_input$IntlPhoneInput_Internal$State(_p6),
															phoneNumber,
															_elm_lang$core$Platform_Cmd$none));
												}),
											_1: {
												ctor: '::',
												_0: _abadi199$intl_phone_input$IntlPhoneInput_Event$onClickStopPropagation(
													A3(
														_abadi199$intl_phone_input$IntlPhoneInput_Action$doNothing,
														config,
														_abadi199$intl_phone_input$IntlPhoneInput_Internal$State(_p6),
														phoneNumber)),
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						}
					}
				}
			},
			{ctor: '[]'});
	});
var _abadi199$intl_phone_input$IntlPhoneInput$countryDropdownView = F3(
	function (config, _p7, phoneNumber) {
		var _p8 = _p7;
		var _p11 = _p8._0;
		var _p9 = _rtfeldman$elm_css_helpers$Html_CssHelpers$withNamespace(config.namespace);
		var id = _p9.id;
		var $class = _p9.$class;
		var classList = _p9.classList;
		var _p10 = _p11.countryPickerState;
		if (_p10.ctor === 'CountryPickerClosed') {
			return _elm_lang$html$Html$text('');
		} else {
			return A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: $class(
						{
							ctor: '::',
							_0: _abadi199$intl_phone_input$IntlPhoneInput_Css$CountryDropdown,
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A3(
						_abadi199$intl_phone_input$IntlPhoneInput$searchInput,
						config,
						_abadi199$intl_phone_input$IntlPhoneInput_Internal$State(_p11),
						phoneNumber),
					_1: {
						ctor: '::',
						_0: A3(
							_abadi199$intl_phone_input$IntlPhoneInput_Country$countriesView,
							config,
							_abadi199$intl_phone_input$IntlPhoneInput_Internal$State(_p11),
							phoneNumber),
						_1: {ctor: '[]'}
					}
				});
		}
	});
var _abadi199$intl_phone_input$IntlPhoneInput$arrowView = F2(
	function (config, _p12) {
		var _p13 = _p12;
		var _p14 = _rtfeldman$elm_css_helpers$Html_CssHelpers$withNamespace(config.namespace);
		var id = _p14.id;
		var $class = _p14.$class;
		var classList = _p14.classList;
		return A2(
			_elm_lang$html$Html$span,
			{
				ctor: '::',
				_0: $class(
					{
						ctor: '::',
						_0: _abadi199$intl_phone_input$IntlPhoneInput_Css$Arrow,
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: _abadi199$intl_phone_input$IntlPhoneInput_Svg$arrow,
				_1: {ctor: '[]'}
			});
	});
var _abadi199$intl_phone_input$IntlPhoneInput$countryPickerView = F3(
	function (config, _p15, phoneNumber) {
		var _p16 = _p15;
		var _p19 = _p16._0;
		var _p17 = _rtfeldman$elm_css_helpers$Html_CssHelpers$withNamespace(config.namespace);
		var id = _p17.id;
		var $class = _p17.$class;
		var classList = _p17.classList;
		return A2(
			_elm_lang$html$Html$button,
			{
				ctor: '::',
				_0: $class(
					{
						ctor: '::',
						_0: _abadi199$intl_phone_input$IntlPhoneInput_Css$CountryPicker,
						_1: function () {
							var _p18 = _p19.countryPickerState;
							if (_p18.ctor === 'CountryPickerOpened') {
								return {
									ctor: '::',
									_0: _abadi199$intl_phone_input$IntlPhoneInput_Css$Highlighted,
									_1: {ctor: '[]'}
								};
							} else {
								return {ctor: '[]'};
							}
						}()
					}),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$type_('button'),
					_1: {
						ctor: '::',
						_0: id(
							_abadi199$intl_phone_input$IntlPhoneInput_Config$getCountryPickerId(config)),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onClick(
								_abadi199$intl_phone_input$IntlPhoneInput_Action$done(
									A4(
										_abadi199$intl_phone_input$IntlPhoneInput_Action$toggleCountryDropdown,
										config,
										_abadi199$intl_phone_input$IntlPhoneInput_Internal$State(_p19),
										phoneNumber,
										_elm_lang$core$Platform_Cmd$none))),
							_1: {
								ctor: '::',
								_0: A4(
									_abadi199$intl_phone_input$IntlPhoneInput_Event$batchKeyDown,
									{
										ctor: '::',
										_0: {
											ctor: '_Tuple2',
											_0: _abadi199$intl_phone_input$IntlPhoneInput_KeyCode$arrowKey,
											_1: _elm_lang$core$Basics$always(_abadi199$intl_phone_input$IntlPhoneInput_Action$openCountryDropdown)
										},
										_1: {
											ctor: '::',
											_0: {
												ctor: '_Tuple2',
												_0: _abadi199$intl_phone_input$IntlPhoneInput_KeyCode$escKey,
												_1: _elm_lang$core$Basics$always(_abadi199$intl_phone_input$IntlPhoneInput_Action$closeCountryDropdown)
											},
											_1: {ctor: '[]'}
										}
									},
									config,
									_abadi199$intl_phone_input$IntlPhoneInput_Internal$State(_p19),
									phoneNumber),
								_1: {
									ctor: '::',
									_0: _abadi199$intl_phone_input$IntlPhoneInput_Event$onBlur(
										function (focusEvent) {
											return _abadi199$intl_phone_input$IntlPhoneInput_Action$done(
												A5(
													_abadi199$intl_phone_input$IntlPhoneInput_Action$autocloseCountryDropdown,
													focusEvent,
													config,
													_abadi199$intl_phone_input$IntlPhoneInput_Internal$State(_p19),
													phoneNumber,
													_elm_lang$core$Platform_Cmd$none));
										}),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			},
			{
				ctor: '::',
				_0: A2(_abadi199$intl_phone_input$IntlPhoneInput_Flag$flag, config, phoneNumber),
				_1: {
					ctor: '::',
					_0: A2(
						_abadi199$intl_phone_input$IntlPhoneInput$arrowView,
						config,
						_abadi199$intl_phone_input$IntlPhoneInput_Internal$State(_p19)),
					_1: {ctor: '[]'}
				}
			});
	});
var _abadi199$intl_phone_input$IntlPhoneInput$intlPhoneInput = F3(
	function (config, _p20, phoneNumber) {
		var _p21 = _p20;
		var _p23 = _p21._0;
		var _p22 = _rtfeldman$elm_css_helpers$Html_CssHelpers$withNamespace(config.namespace);
		var id = _p22.id;
		var $class = _p22.$class;
		var classList = _p22.classList;
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: $class(
					{
						ctor: '::',
						_0: _abadi199$intl_phone_input$IntlPhoneInput_Css$IntlPhoneInput,
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A3(
					_abadi199$intl_phone_input$IntlPhoneInput$countryPickerView,
					config,
					_abadi199$intl_phone_input$IntlPhoneInput_Internal$State(_p23),
					phoneNumber),
				_1: {
					ctor: '::',
					_0: A3(
						_abadi199$intl_phone_input$IntlPhoneInput$countryDropdownView,
						config,
						_abadi199$intl_phone_input$IntlPhoneInput_Internal$State(_p23),
						phoneNumber),
					_1: {
						ctor: '::',
						_0: A3(
							_abadi199$intl_phone_input$IntlPhoneInput$phoneInputView,
							config,
							_abadi199$intl_phone_input$IntlPhoneInput_Internal$State(_p23),
							phoneNumber),
						_1: {ctor: '[]'}
					}
				}
			});
	});
var _abadi199$intl_phone_input$IntlPhoneInput$initialState = _abadi199$intl_phone_input$IntlPhoneInput_Internal$initialState;

var _abadi199$intl_phone_input$Demo$update = F2(
	function (msg, model) {
		var _p0 = msg;
		switch (_p0.ctor) {
			case 'NoOp':
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			case 'HomePhoneChanged':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							homePhoneNumber: {ctor: '_Tuple2', _0: _p0._0, _1: _p0._1}
						}),
					_1: _p0._2
				};
			default:
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							officePhoneNumber: {ctor: '_Tuple2', _0: _p0._0, _1: _p0._1}
						}),
					_1: _p0._2
				};
		}
	});
var _abadi199$intl_phone_input$Demo$phoneNumberView = F2(
	function (config, phoneNumber) {
		var _p1 = _rtfeldman$elm_css_helpers$Html_CssHelpers$withNamespace(config.namespace);
		var id = _p1.id;
		var $class = _p1.$class;
		var classList = _p1.classList;
		return A2(
			_elm_lang$html$Html$span,
			{
				ctor: '::',
				_0: $class(
					{
						ctor: '::',
						_0: _abadi199$intl_phone_input$Demo_Css$PhoneNumber,
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(
					A2(
						_elm_lang$core$Basics_ops['++'],
						'+',
						A2(
							_elm_lang$core$Basics_ops['++'],
							A2(
								_elm_lang$core$Maybe$withDefault,
								'XX',
								A2(
									_elm_lang$core$Maybe$map,
									function (_) {
										return _.dialCode;
									},
									A2(_elm_lang$core$Dict$get, phoneNumber.isoCode, config.countries))),
							A2(_elm_lang$core$Basics_ops['++'], ' ', phoneNumber.phoneNumber)))),
				_1: {ctor: '[]'}
			});
	});
var _abadi199$intl_phone_input$Demo$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$none;
};
var _abadi199$intl_phone_input$Demo$initialModel = {
	homePhoneNumber: {
		ctor: '_Tuple2',
		_0: _abadi199$intl_phone_input$IntlPhoneInput$initialState,
		_1: {isoCode: 'US', phoneNumber: '5551234'}
	},
	officePhoneNumber: {
		ctor: '_Tuple2',
		_0: _abadi199$intl_phone_input$IntlPhoneInput$initialState,
		_1: {isoCode: 'US', phoneNumber: '5559876'}
	}
};
var _abadi199$intl_phone_input$Demo$init = {ctor: '_Tuple2', _0: _abadi199$intl_phone_input$Demo$initialModel, _1: _elm_lang$core$Platform_Cmd$none};
var _abadi199$intl_phone_input$Demo$Model = F2(
	function (a, b) {
		return {homePhoneNumber: a, officePhoneNumber: b};
	});
var _abadi199$intl_phone_input$Demo$OfficePhoneChanged = F3(
	function (a, b, c) {
		return {ctor: 'OfficePhoneChanged', _0: a, _1: b, _2: c};
	});
var _abadi199$intl_phone_input$Demo$officePhoneConfig = _abadi199$intl_phone_input$IntlPhoneInput_Config$defaultConfig(_abadi199$intl_phone_input$Demo$OfficePhoneChanged);
var _abadi199$intl_phone_input$Demo$HomePhoneChanged = F3(
	function (a, b, c) {
		return {ctor: 'HomePhoneChanged', _0: a, _1: b, _2: c};
	});
var _abadi199$intl_phone_input$Demo$homePhoneConfig = _abadi199$intl_phone_input$IntlPhoneInput_Config$defaultConfig(_abadi199$intl_phone_input$Demo$HomePhoneChanged);
var _abadi199$intl_phone_input$Demo$view = function (model) {
	var _p2 = _rtfeldman$elm_css_helpers$Html_CssHelpers$withNamespace(_abadi199$intl_phone_input$Demo$homePhoneConfig.namespace);
	var id = _p2.id;
	var $class = _p2.$class;
	var classList = _p2.classList;
	var _p3 = _rtfeldman$elm_css$Css$compile(
		{
			ctor: '::',
			_0: _abadi199$intl_phone_input$IntlPhoneInput_Css$css(_abadi199$intl_phone_input$Demo$homePhoneConfig.namespace),
			_1: {
				ctor: '::',
				_0: _abadi199$intl_phone_input$Demo_Css$css(_abadi199$intl_phone_input$Demo$homePhoneConfig.namespace),
				_1: {ctor: '[]'}
			}
		});
	var css = _p3.css;
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: $class(
				{
					ctor: '::',
					_0: _abadi199$intl_phone_input$Demo_Css$Demo,
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A3(
				_elm_lang$html$Html$node,
				'style',
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(css),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: $class(
							{
								ctor: '::',
								_0: _abadi199$intl_phone_input$Demo_Css$FormField,
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$label,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$for(
									_abadi199$intl_phone_input$IntlPhoneInput_Config$getPhoneNumberInputId(_abadi199$intl_phone_input$Demo$homePhoneConfig)),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('Home Phone'),
								_1: {
									ctor: '::',
									_0: A3(
										_abadi199$intl_phone_input$IntlPhoneInput$intlPhoneInput,
										_abadi199$intl_phone_input$Demo$homePhoneConfig,
										_elm_lang$core$Tuple$first(model.homePhoneNumber),
										_elm_lang$core$Tuple$second(model.homePhoneNumber)),
									_1: {ctor: '[]'}
								}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_abadi199$intl_phone_input$Demo$phoneNumberView,
								_abadi199$intl_phone_input$Demo$homePhoneConfig,
								_elm_lang$core$Tuple$second(model.homePhoneNumber)),
							_1: {ctor: '[]'}
						}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: $class(
								{
									ctor: '::',
									_0: _abadi199$intl_phone_input$Demo_Css$FormField,
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$label,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$for(
										_abadi199$intl_phone_input$IntlPhoneInput_Config$getPhoneNumberInputId(_abadi199$intl_phone_input$Demo$officePhoneConfig)),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('Office Phone'),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_abadi199$intl_phone_input$Demo$phoneNumberView,
									_abadi199$intl_phone_input$Demo$officePhoneConfig,
									_elm_lang$core$Tuple$second(model.officePhoneNumber)),
								_1: {ctor: '[]'}
							}
						}),
					_1: {ctor: '[]'}
				}
			}
		});
};
var _abadi199$intl_phone_input$Demo$main = _elm_lang$html$Html$program(
	{init: _abadi199$intl_phone_input$Demo$init, update: _abadi199$intl_phone_input$Demo$update, view: _abadi199$intl_phone_input$Demo$view, subscriptions: _abadi199$intl_phone_input$Demo$subscriptions})();
var _abadi199$intl_phone_input$Demo$NoOp = {ctor: 'NoOp'};

var Elm = {};
Elm['Demo'] = Elm['Demo'] || {};
if (typeof _abadi199$intl_phone_input$Demo$main !== 'undefined') {
    _abadi199$intl_phone_input$Demo$main(Elm['Demo'], 'Demo', undefined);
}

if (typeof define === "function" && define['amd'])
{
  define([], function() { return Elm; });
  return;
}

if (typeof module === "object")
{
  module['exports'] = Elm;
  return;
}

var globalElm = this['Elm'];
if (typeof globalElm === "undefined")
{
  this['Elm'] = Elm;
  return;
}

for (var publicModule in Elm)
{
  if (publicModule in globalElm)
  {
    throw new Error('There are two Elm modules called `' + publicModule + '` on this page! Rename one of them.');
  }
  globalElm[publicModule] = Elm[publicModule];
}

}).call(this);

